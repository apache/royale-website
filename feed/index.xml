<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xml:base="https://royale.apache.org/">
  <channel>
    <title>Apache Royale™</title>
    <atom:link href="https://royale.apache.org/feed/index.xml" rel="self" type="application/rss+xml" />
    <link>https://royale.apache.org/</link>
    <description>News and tutorials about Apache Royale™</description>
    <lastBuildDate>Wed, 11 Dec 2024 24:00:00 GMT</lastBuildDate>
    <language>en-US</language>
    
        
        <item>
            <title>Apache Royale v0.9.12 released!</title>
            <link>https://royale.apache.org/blog/apache-royale-v0-9-12-released/</link>
            <pubDate>Wed, 11 Dec 2024 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Josh Tynjala]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/apache-royale-v0-9-12-released/</guid>
            <description><![CDATA[<p>The Apache Royale community is pleased to announce the release of <strong>Apache Royale 0.9.12</strong>.</p>
<p>The Apache Royale project is the next generation of the Apache Flex SDK. It lets developers use <strong>MXML</strong> and <strong>ActionScript 3</strong> to generate <strong>HTML/JS/CSS</strong> applications which can run natively in web browsers. The cross-compiled code can also run on platforms like <strong>Electron</strong> or <strong>Apache Cordova</strong> to build desktop or mobile applications.</p>
<p>This release should be considered 'beta' quality, although <em>we're very close to a 1.0 release</em> and <em>we have many applications in production</em> at this point. The purpose of this release is to continue to gather feedback about Royale's features and the project's implementation strategies, and to recruit new contributors. We hope to grow the code base into an SDK and tool chain that delivers the highest productivity when developing applications that can run on many platforms. Beta releases, however, may not handle all production needs.</p>
<h2>Changes in 0.9.12:</h2>
<h3>Apache Royale Framework 0.9.12</h3>
<ul>
<li>
<p>Basic</p>
<ul>
<li>Make shift click aware of the first selection in <code>ListMultiSelectionMouseController</code>.</li>
<li>Added <code>ReusableDataItemRendererFactoryForCollectionView</code> for reusable item renderers.</li>
<li>Fixed exception in <code>StyleInheritanceWithObserverBead</code> due to attempting to set style inheritance on non-element (e.g. Text) descendant nodes under the strand.</li>
<li><code>ContainerView</code> Checks the type on adding to strand and not on every <code>contentView</code> access</li>
<li>Optimized closing tree nodes.</li>
</ul>
</li>
<li>
<p>Core</p>
<ul>
<li>Added <code>removeDynamicSelector</code> method. Removes a CSS selector dynamically at runtime.</li>
<li>Added support for native <code>PointerEvent</code>.</li>
<li>Added <code>toDecimals</code> utility method.</li>
<li>Fixed &quot;click&quot; not being converted to Royale <code>MouseEvent</code>.</li>
</ul>
</li>
<li>
<p>Graphics</p>
<ul>
<li>Fixed <code>PathBuilder</code> using out of range radius values when drawing rounded rectangles.</li>
</ul>
</li>
<li>
<p>Icons</p>
<ul>
<li>Added <code>FontAwesome6IconType</code> with Font Awesome 6 icons.</li>
<li>Added new icons to <code>MaterialIconType</code> and <code>FontAwesome5IconType</code>.</li>
</ul>
</li>
<li>
<p>Jewel</p>
<ul>
<li>Added <code>RestrictRegExp</code> bead, which is essentially a copy of Restrict, but with RegExp property.</li>
<li>Added <code>RestrictValidator</code> for validation based on StringValidator capabilities and RegExp pattern.</li>
<li>Added ability to dynamically assign <code>itemRenderer</code> to <code>DataGridColumn</code></li>
<li>Added ability to extend and override <code>SnackbarView</code> in <code>Snackbar</code>.</li>
<li>Added <code>ComboBoxListWidth</code> bead to set ComboBox List width.</li>
<li>Fixed issue in <code>DateChooser</code> where next/previous buttons without text setup property were sized incorrectly.</li>
<li>Fixed font size alignment in <code>RadioButton</code>.</li>
</ul>
</li>
<li>
<p>MXRoyaleBase</p>
<ul>
<li>Added missing <code>mx.messaging.Producer</code> to MXML manifest.</li>
<li>Ensure that <code>SecureHTTPChannel</code>, <code>AMFChannel</code>, and <code>SecureAMFChannel</code> are included in SWC.</li>
</ul>
</li>
<li>
<p>MXRoyale</p>
<ul>
<li>Added event when tool tip changes.</li>
<li>Fixed tooltip getting created twice.</li>
<li>Fixed <code>Bitmap</code> class for embedding compatibility with Flex.</li>
</ul>
</li>
<li>
<p>Network</p>
<ul>
<li>Added <code>execute()</code> method to <code>HttpRequestTask</code>.</li>
<li>Fixed creation of loader in <code>HttpRequestTask</code>.</li>
<li>Fixed <code>BinaryUploader</code> POST data sent to server.</li>
<li>Made response headers accessible from <code>URLBinaryLoader</code> and <code>URLStream</code>.</li>
</ul>
</li>
<li>
<p>XML</p>
<ul>
<li>Improve performance of getting descendants.</li>
<li>Added index to XMLList prototype instead of instances to prevent GC thrashing.</li>
</ul>
</li>
<li>
<p>Fixed broken download locations for <em>playerglobal.swc</em> and Adobe AIR SDK in <em>InstallAdobeSDKs.xml</em> script.</p>
</li>
<li>
<p>Compiler and command line tools now require Java 11 or newer to run.</p>
</li>
<li>
<p>Dozens of bugs reported, investigated, and squashed. For details of closed bug reports see <a href="https://github.com/apache/royale-asjs/issues?q=is%3Aissue+is%3Aclosed">GitHub Issues list</a>.</p>
</li>
</ul>
<h3>Apache Royale Compiler 0.9.12</h3>
<ul>
<li>compiler: Added new <code>--infer-types</code> compiler option that allows the compiler to automatically detect an appropriate type for both variables and function signatures that have omitted their declared types. Type inference is based on either the initializer or return values.</li>
<li>compiler: Abstract classes now support abstract getter and setter methods.</li>
<li>compiler: Added <code>--strict-flex-css</code> compiler option to optionally enable CSS syntax limitations that match Flex.</li>
<li>compiler: Improved type checking for <code>&amp;&amp;</code> and <code>||</code> binary operators and <code>?:</code> ternary operator.</li>
<li>compiler: Removed obsolete &quot;AMD&quot; and &quot;Goog&quot; JavaScript backends, and finished some refactoring to make codebase easier to maintain.</li>
<li>compiler: Now requires Java 11 or newer to run. Previously required Java 8 minimum.</li>
<li>compiler: Updated various Java dependencies with security updates.</li>
<li>compiler: Fixed some Flex SDK integration tests that had been failing for a while.</li>
<li>compiler: Fix parsing of <code>&lt;arguments&gt;</code> or <code>&lt;request&gt;</code> properties for <code>RemoteObject</code>, <code>WebService</code>, or <code>HTTPService</code> tags in MXML.</li>
<li>compiler: Fix missing warning for duplicate function parameter names.</li>
<li>compiler: Fix missing error for multiple root nodes in <code>&lt;fx:Model&gt;</code> tag.</li>
<li>compiler: Fix missing errors for invalid MXML manifest files.</li>
<li>compiler: Fix null exception when emitting JavaScript if a variable is untyped or function doesn't have a return type</li>
<li>compiler: Fix exception for multiple intializers in an MXML field tag.</li>
<li>compiler: Fix column position of string inside metadata.</li>
<li>compiler: Fix exception when an event attribute in MXML is missing <code>=</code> and quotes.</li>
<li>compiler: Fix unnecessary warning when reading SWF data that contains <code>EnableTelemetry</code> tag without a password.</li>
<li>compiler: Fix backslash as an escape character for <code>{</code> and <code>}</code> inside MXML data binding.</li>
<li>compiler: Fix backslash characters being unescaped in property values when emitting JavaScript.</li>
<li>compiler: Fix overflow exception caused by <code>uint</code> values that overflowed an integer in the compiler.</li>
<li>compiler: Fix incorrect error or warning positions for CSS content inside <code>&lt;fx:Style&gt;</code> tag.</li>
<li>compiler: Fix non-string values in an MXML array sometimes getting incorrectly wrapped in quotes when emitting JavaScript.</li>
<li>compiler: Fix null exception for <code>&lt;fx:Style&gt;</code> tags that contain only comments.</li>
<li>compiler: Fix exceptions for <code>&lt;fx:Style&gt;</code> tags and <em>defaults.css</em> files that contain invalid CSS.</li>
<li>compiler: Fix silently ignoring errors in some invalid CSS content, if it appears at the end after valid content.</li>
<li>compiler: Fix crash when attempting to use <code>--remove-circulars=false</code> with a release build.</li>
<li>compiler: Added CSS support for modern syntax without commas in <code>rgb</code> and <code>rgba</code> functions.</li>
<li>compiler: Added CSS support for <code>radial-gradient</code>, <code>conic-gradient</code>, and repeating gradient functions in JS.</li>
<li>compiler: Added CSS support for several translate, rotate, scale, skew, and matrix transformation functions in JS.</li>
<li>compiler: Add CSS support for declaring custom properties (CSS variables) and using <code>var</code> function in JS.</li>
<li>compiler: Fix crash when <code>[Style]</code> is of type <code>Object</code> and value is passed in MXML.</li>
<li>compiler: Fix null pointer exception when omitting quoted <code>&lt;fx:Style&gt;</code> value for <code>source</code> attribute.</li>
<li>compiler: Fix null pointer exception when omitting quoted <code>&lt;fx:Binding&gt;</code> value for <code>source</code>, <code>destination</code>, and <code>twoWay</code> attributes.</li>
<li>compiler: Fix null pointer exception when omitting quoted <code>&lt;fx:Vector&gt;</code> value for <code>fixed</code>, and <code>type</code> attributes.</li>
<li>compiler: Fix missing problem for invalid <code>twoWay</code> value for <code>&lt;fx:Binding&gt;</code> tag.</li>
<li>compiler: Fix exception for unexpected attributes added to <code>&lt;fx:Array&gt;</code> and <code>&lt;fx:Vector&gt;</code> tags.</li>
<li>compiler: Changed to better problem message when MXML <code>implements</code> attribute is empty.</li>
<li>compiler: Fix exception when assigning to a property that has a getter, but not a setter.</li>
<li>compiler: Fix exception when working with certain namespace expressions.</li>
<li>compiler: Fix configuration problems not being reported when compc options are passed to mxmlc.</li>
<li>compiler: Fix source maps for fields and methods in the private namespace or custom namespaces.</li>
<li>compiler: Fixed end line and end column of numeric literal with <code>+</code> or <code>-</code> sign.</li>
<li>compiler: Fixed lines and columns of function body.</li>
<li>compiler: Added support for Friendly Call Frames in source maps.</li>
<li>compiler: Fixed missing warning for assignment in <code>else if</code> conditional.</li>
<li>compiler: Fixed missing warnings for assignment, return, and comparison of <code>null</code>, <code>undefined</code>, and <code>NaN</code> values with other values that could never possibly be compatible.</li>
<li>compiler: Fixed missing errors when calling objects as functions that can never possibly be callable.</li>
<li>compiler: Add <code>[RoyaleCallableInstances]</code> metadata to allow instances of a typedef class to be callable as functions. Used by jQuery externs.</li>
<li>compiler: Fixed incorrect conflicting definition error when a method in a language namespace (like public/protected) has the same name as a method in a custom namespace.</li>
<li>debugger: Fix exception when evaluating certain expressions at run-time.</li>
<li>formatter: Added <code>insert-new-line-else</code> configuration option.</li>
<li>formatter: Filtered out unnecessary compiler warnings.</li>
<li>formatter: Fix stack overflow on some platforms when <code>&lt;fx:Script&gt;</code> code is large enough.</li>
<li>formatter: Fix missing indent after empty object literal when <code>collapse-empty-blocks</code> is true (it's not a block).</li>
<li>formatter: Fix Unicode and ASCII escape sequences getting lost when formatting string literals.</li>
<li>formatter: Fix formatting for configuration constants that gate definitions (like types or fields) without braces.</li>
<li>formatter: Fix formatting for object literal inside parentheses.</li>
<li>formatter: Fix ignored formatting when file contains unresolved configuration constants.</li>
<li>formatter: Fix formatting for comments on same line as control flow that doesn't have braces.</li>
<li>formatter: Fix <em>asformat-config.xml</em> file being ignored.</li>
<li>formatter: Fix ignored implicit semicolon being formatted as <code>null</code>.</li>
<li>formatter: Fix formatting for comment between brace and <code>else</code>.</li>
<li>formatter: Fix formatting of unary operators that (depending on context) may also be arithmetic operators.</li>
<li>formatter: Fix formatting for switch/case inside for-each or for-in loop.</li>
<li>linter: Fix implicit semicolon incorrectly detected as an empty statement that should be removed (it can't be removed).</li>
<li>linter: Fix MXML linter being incorrectly used for <em>.as</em> files and AS3 linter being incorrectly used for <em>.mxml</em> files.</li>
<li>Building royale-compiler now requires JDK 11 or newer.</li>
</ul>
<p>For additional information on recent issues that have been closed, see <a href="https://github.com/apache/royale-compiler/issues?q=is%3Aissue+is%3Aclosed">Github Issues List</a></p>
<p>You can download a <a href="https://royale.apache.org/download/">binary distribution</a>, the <a href="https://royale.apache.org/source-code/">source code</a> or browse our <a href="https://github.com/apache/royale-asjs/wiki/Apache-Royale-Source-Code-Repositories">GitHub repositories</a>. If you're a NPM user you can check <a href="https://www.npmjs.com/org/apache-royale">Apache Royale at NPM</a>.</p>
<p>As well, you can help us <a href="https://github.com/apache/royale-asjs/issues">filing bug reports for issues you encounter in the framework</a> or <a href="https://github.com/apache/royale-compiler/issues">compiler</a>.</p>
<p>For questions about how to use Royale, send email to <a href="https://royale.apache.org/blog/apache-royale-v0-9-12-released/users@royale.apache.org">mailto:users@royale.apache.org</a>.  For questions and feedback on the development of the source code in the release, send email to <a href="mailto:dev@royale.apache.org">dev@royale.apache.org</a>.</p>
<p>Enjoy! 🙂</p>
]]></description>
        </item>
    
        
        <item>
            <title>Apache Royale v0.9.10 released!</title>
            <link>https://royale.apache.org/blog/apache-royale-v0-9-10-released/</link>
            <pubDate>Wed, 31 May 2023 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Yishay Weiss]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/apache-royale-v0-9-10-released/</guid>
            <description><![CDATA[<p>The Apache Royale community is pleased to announce the release of <strong>Apache Royale 0.9.10</strong>.</p>
<p>The Apache Royale project is the next generation of the Apache Flex SDK. It lets developers use <strong>MXML</strong> and <strong>ActionScript 3</strong> to generate <strong>HTML/JS/CSS</strong> applications which can run natively in browsers. The cross-compiled code can also run on platforms like <strong>Electron</strong> or <strong>Apache Cordova</strong> (Adobe PhoneGap) to build mobile applications.</p>
<p>This release should be considered 'beta' quality, although <em>we're very close to a 1.0 release</em> and <em>we have many applications in production</em> at this point. The purpose of this release is to continue to gather feedback about Royale's features and the project's implementation strategies, and to recruit new contributors. We hope to grow the code base into an SDK and tool chain that delivers the highest productivity when developing applications that can run on many platforms. Beta releases, however, may not handle all production needs.</p>
<h2>Changes in 0.9.10:</h2>
<h3>Apache Royale Framework 0.9.10</h3>
<ul>
<li>RoyaleUnit
<ul>
<li>Added BDD-style expect() method for natural language assertions</li>
<li>Added a number of new asserts, including checks for NaN, less than, greater than, less or equal, greater or equal, within range, is of type, throws exception, and matches regular expression.</li>
</ul>
</li>
<li>MXRoyale
<ul>
<li>Various bug fixes</li>
</ul>
</li>
<li>Jewel
<ul>
<li>Various bug fixes</li>
</ul>
</li>
<li>Dozens of bugs reported, investigated, and squashed. For details of closed bug reports see <a href="https://github.com/apache/royale-asjs/issues?q=is%3Aissue+is%3Aclosed">GitHub Issues list</a>.</li>
</ul>
<h3>Apache Royale Compiler 0.9.10</h3>
<ul>
<li><strong>aslint</strong> is a new command line code linter for ActionScript and MXML, with a programmatic API for use in editors and IDEs.</li>
<li>compiler: Added <code>--watch</code> compiler option that keeps compiler active and incrementally compiles when changes to <em>.as</em> and <em>.mxml</em> files are detected. You may exit with Ctrl+C.</li>
<li>compiler: Added support for <code>??</code> null coalescing operator to ActionScript.</li>
<li>compiler: Added support for <code>?.</code> null conditional operator to ActionScript.</li>
<li>compiler: Added support for <code>@&quot;&quot;</code> verbatim strings to ActionScript.</li>
<li>compiler: Fix JS output for chained <code>Date</code> setter initialization, like <code>date.minutes = date.seconds = 0</code>.</li>
<li>compiler: Fix <code>&lt;![CDATA[]]&gt;</code> handling in MXML for properties with <code>[CollapseWhiteSpace]</code> metadata.</li>
<li>royaleunit-ant-tasks: The <code>&lt;royaleunit&gt;</code> Ant Task can now use Playwright to run headless tests in HTML/JS. Set the <code>player</code> to chromium, webkit, or firefox.</li>
<li>royaleunit-ant-tasks: Added a new <code>commandArgs</code> attribute to the <code>&lt;royaleunit&gt;</code> Ant Task. It may be used to pass extra command line arguments to the executable specified in the <code>command</code> attribute.</li>
<li>formatter: Can load configuration options with <code>-load-config+=path/to/file.xml</code>, similar to compiler.</li>
<li>formatter: If a file named <em>asformat-config.xml</em> appears in the current working directory, automatically load it with <code>-load-config</code>. To disable this behavior, use <code>-skip-local-config-file=true</code>.</li>
<li>formatter: Fix issue where more than one new line might appear at the end of a file.</li>
<li>formatter: Fix indentation between opening and closing parentheses/brackets on separate lines.</li>
<li>formatter: Fix detection of <code>Script</code> elements in MXML when line endings are CRLF.</li>
<li>formatter: Fix exception when file starts with UTF BOM character.</li>
<li>formatter: Fix issue where ternary operator inside <code>if</code> condition was formatted incorrectly.</li>
<li>formatter: Fix missing formatting for <code>finally</code> block.</li>
<li>formatter: If a case or default clause in a <code>switch</code> contains only a block, indent is not increased.</li>
<li>formatter: If formatting is skipped because compiler errors are found, display those compiler errors.</li>
</ul>
<p>For additional information on recent issues that have been closed, see <a href="https://github.com/apache/royale-compiler/issues?q=is%3Aissue+is%3Aclosed">Github Issues List</a></p>
<p>You can download a <a href="https://royale.apache.org/download/">binary distribution</a>, the <a href="https://royale.apache.org/source-code/">source code</a> or browse our <a href="https://github.com/apache/royale-asjs/wiki/Apache-Royale-Source-Code-Repositories">GitHub repositories</a>. If you're a NPM user you can check <a href="https://www.npmjs.com/org/apache-royale">Apache Royale at NPM</a>.</p>
<p>As well, you can help us <a href="https://github.com/apache/royale-asjs/issues">filing bug reports for issues you encounter in the framework</a> or <a href="https://github.com/apache/royale-compiler/issues">compiler</a>.</p>
<p>For questions about how to use Royale, send email to <a href="https://royale.apache.org/blog/apache-royale-v0-9-10-released/users@royale.apache.org">mailto:users@royale.apache.org</a>.  For questions and feedback on the development of the source code in the release, send email to <a href="mailto:dev@royale.apache.org">dev@royale.apache.org</a>.</p>
<p>Enjoy! 🙂</p>
]]></description>
        </item>
    
        
        <item>
            <title>Apache Royale v0.9.9 released!</title>
            <link>https://royale.apache.org/blog/apache-royale-v0-9-9-released/</link>
            <pubDate>Wed, 30 Mar 2022 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Yishay Weiss]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/apache-royale-v0-9-9-released/</guid>
            <description><![CDATA[<p>The Apache Royale community is pleased to announce the release of <strong>Apache Royale 0.9.9</strong>.</p>
<p>The Apache Royale project is the next generation of the Apache Flex SDK. It lets developers use <strong>MXML</strong> and <strong>ActionScript 3</strong> to generate <strong>HTML/JS/CSS</strong> applications which can run natively in browsers. The cross-compiled code can also run on platforms like <strong>Electron</strong> or <strong>Apache Cordova</strong> (Adobe PhoneGap) to build mobile applications.</p>
<p>This release should be considered 'beta' quality, although <em>we're very close to a 1.0 release</em> and <em>we have many applications in production</em> at this point. The purpose of this release is to continue to gather feedback about Royale's features and the project's implementation strategies, and to recruit new contributors. We hope to grow the code base into an SDK and tool chain that delivers the highest productivity when developing applications that can run on many platforms. Beta releases, however, may not handle all production needs.</p>
<h2>Changes in 0.9.9:</h2>
<h3>Apache Royale Framework 0.9.9</h3>
<ul>
<li>MXRoyale
<ul>
<li>MXRoyale has been split 2 libs : MXRoyaleBase (mostly non-UI code) and MXRoyale (mostly UI code). Users of MXRoyale should see no immediate changes as the build of this swc remains the same.</li>
<li>Listen to children's resize events to fix some layout issues</li>
<li>Various fixes to measured sizes (ComboBox, and other UI components)</li>
<li>Fixes to labels in item renderers not displaying correctly</li>
<li>ComboBox prompt fixes</li>
<li>ArrayCollection.refresh() updating lists</li>
<li>Various fixes to labels in item renderers not showing correctly</li>
<li>Add option to add custom header renderers to data grids</li>
<li>Fix issues with Menu.show() when receiving non-null parent arguments</li>
<li>Improve emulation of ADG's expand/collapse behavior</li>
</ul>
</li>
<li>SparkRoyale
<ul>
<li>ComboBox sizing improvements</li>
</ul>
</li>
<li>Basic
<ul>
<li>Improvements to DragBead's out of bounds behavior</li>
</ul>
</li>
<li>RoyaleUnit
<ul>
<li>Fix coercion error in MetadataRunner when expecting an exception in a test, like [Test(expected=&quot;RangeError&quot;)]</li>
</ul>
</li>
<li>Reflection
<ul>
<li>getQualifiedSuperclassName() can find the superclass of a Class object in JS, matching the behavior of SWF</li>
</ul>
</li>
<li>Examples
<ul>
<li>Ace example running in Maven</li>
<li>Added Jewel TriStateCheckBox example in <a href="https://royale.apache.org/tourdejewel/">Tour De Jewel</a></li>
</ul>
</li>
<li>Jewel
<ul>
<li>Improved:
<ul>
<li>Added emphasized and secondary sass settings for Jewel CheckBox / Switch</li>
</ul>
</li>
<li>New:
<ul>
<li>Added Jewel TriStateCheckBox and some associated beads: TriStateCheckBoxTooltipState, TriStateCheckBoxState</li>
<li>Added ComboBoxReadOnly bead</li>
</ul>
</li>
</ul>
</li>
<li>Icons
<ul>
<li>Icon constants have been added to MaterialIconType and FontAwesome5IconType</li>
</ul>
</li>
<li>Dozens of bugs reported, investigated, and squashed. For details of closed bug reports see <a href="https://github.com/apache/royale-asjs/issues?q=is%3Aissue+is%3Aclosed">GitHub Issues list</a>.</li>
</ul>
<h3>Apache Royale Compiler 0.9.9</h3>
<ul>
<li><strong>asformat</strong> is a new command line code formatter for ActionScript and MXML, with a programmatic API for use in editors and IDEs.</li>
<li>Added a boolean new compiler option <code>compiler.mxml.force-local-id</code> - (short commandline form <code>force-local-id</code>). This is a quick way to avoid propagating id attributes to browser DOM in JSRoyale.</li>
<li>(JS) Added new string compiler options <code>js-getter-prefix</code> and <code>js-setter-prefix</code> to optionally specify different prefixes to use instead of 'get_' and 'set_' for accessors in the generated JavaScript. Useful for integrating with JS libraries/languages that use a different naming convention.</li>
<li>(JS) Fix for <code>@royalesuppressexport</code> feature which had stopped working</li>
<li>(JS) Fix for <code>mx.managers.SystemManager</code> subclass not being generated for applications that were not direct subclasses of the relevant application classes.</li>
<li>(JS) Improvement in output of locale properties files as ResourceBundles. Now using original Flex/SWF parsing approach for improved parity.</li>
<li>(JS) First implementation of multiple-catch support in Javascript</li>
<li>(JS) Added unsafe option for outputting literal javascript (via externally defined jsUnsafeNativeInline function)</li>
<li>Fixed <code>&lt;!----&gt;</code> in MXML being incorrectly detected as an unclosed ASDoc comment, instead of an empty regular comment.</li>
<li>(JS) Improved the generated JavaScript for <code>if</code>, <code>else if</code>, and <code>else</code> statements that contained only a semicolon and no braces.</li>
<li>(JS) Generated JavaScript for <code>parseInt()</code> passes <code>0</code> instead of <code>undefined</code> for radix argument to avoid number format exception.</li>
<li>(JS) Fixed several issues with generated JavaScript for E4X expressions when using <code>js-dynamic-access-unknown-members</code> compiler option.</li>
<li>(JS) Fixed a couple of issues with generated JavaScript when using custom namespaces.</li>
<li>Fixed missing <code>[Event]</code> metadata in playerglobal.swc classes generated from documentation.</li>
<li>Fixed parse exception when binding to XML.</li>
</ul>
<p>For additional information on recent issues that have been closed, see <a href="https://github.com/apache/royale-compiler/issues?q=is%3Aissue+is%3Aclosed">Github Issues List</a></p>
<p>You can download a <a href="https://royale.apache.org/download/">binary distribution</a>, the <a href="https://royale.apache.org/source-code/">source code</a> or browse our <a href="https://github.com/apache/royale-asjs/wiki/Apache-Royale-Source-Code-Repositories">GitHub repositories</a>. If you're a NPM user you can check <a href="https://www.npmjs.com/org/apache-royale">Apache Royale at NPM</a>.</p>
<p>As well, you can help us <a href="https://github.com/apache/royale-asjs/issues">filing bug reports for issues you encounter in the framework</a> or <a href="https://github.com/apache/royale-compiler/issues">compiler</a>.</p>
<p>For questions about how to use Royale, send email to <a href="https://royale.apache.org/blog/apache-royale-v0-9-9-released/users@royale.apache.org">mailto:users@royale.apache.org</a>.  For questions and feedback on the development of the source code in the release, send email to <a href="mailto:dev@royale.apache.org">dev@royale.apache.org</a>.</p>
<p>Enjoy! 🙂</p>
]]></description>
        </item>
    
        
        <item>
            <title>Apache Royale v0.9.8 released!</title>
            <link>https://royale.apache.org/blog/apache-royale-v0-9-8-released/</link>
            <pubDate>Thu, 02 Sep 2021 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Yishay Weiss]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/apache-royale-v0-9-8-released/</guid>
            <description><![CDATA[<p>The Apache Royale community is pleased to announce the release of <strong>Apache Royale 0.9.8</strong>.</p>
<p>The Apache Royale project is the next generation of the Apache Flex SDK. It lets developers use <strong>MXML</strong> and <strong>ActionScript 3</strong> to generate <strong>HTML/JS/CSS</strong> applications which can run natively in browsers. The cross-compiled code can also run on platforms like <strong>Electron</strong> or <strong>Apache Cordova</strong> (Adobe PhoneGap) to build mobile applications.</p>
<p>This release should be considered 'beta' quality, although <em>we're very close to a 1.0 release</em> and <em>we have many applications in production</em> at this point. The purpose of this release is to continue to gather feedback about Royale's features and the project's implementation strategies, and to recruit new contributors. We hope to grow the code base into an SDK and tool chain that delivers the highest productivity when developing applications that can run on many platforms. Beta releases, however, may not handle all production needs.</p>
<h2>Changes in 0.9.8:</h2>
<h3>Apache Royale Framework 0.9.8</h3>
<ul>
<li>Core
<ul>
<li>Added getClassStyle function that get an Object with all styles in a CSS className.</li>
</ul>
</li>
<li>Basic
<ul>
<li>Move getParentEventTarget() from EventDispatcher to UIBase to reduce require dependencies. This allows EventDispatcher to be used in non-GUI contexts, such as Node.js.</li>
<li>UIBase, added loadBeads hook method</li>
<li>Added BrowserResizeListener bead that listen for browser resizing and resizes a component accordingly. Old one was renamed to &quot;BrowserResizeApplicationListener&quot;</li>
<li>StyledUIBase &amp; ClassSelectorListSupport, added replaceClass method</li>
<li>Added ILabelFunction and LabelFunction bead</li>
<li>Added LayoutChildren: A bead to trigger layout in children. Added support in StyledLayoutBase.</li>
<li>Added interfaces for better extension in Basic and Jewel: IColumns, ITableModel, ITableView, ITextButton, IPaddings, IPositioning</li>
<li>Paddings: New bead to add padding in mxml to a component</li>
<li>Positioning: New bead to add positioning in mxml to a component</li>
<li>Add SelectionDataItemRendererFactoryForCollectionView to handle ISelectionModel for components that uses selection and add/remove/update items at runtime.</li>
</ul>
</li>
<li>RoyaleUnit
<ul>
<li>Fixed issue where CIListener incorrectly escaped quotes in messages.</li>
<li>Better error messages when <code>[BeforeClass]</code> or <code>[AfterClass]</code> is detected, but method is not found by reflection.</li>
</ul>
</li>
<li>Jewel
<ul>
<li>ASDocs: multiple refactors in many components to document and describe better components</li>
<li>Item Renderers
<ul>
<li>Refactor to make Basic Layout the default (before was horizontal baked)</li>
<li>Initializers now use new Paddings bead. Create a default if no one is found.</li>
<li>Remove then minimum height of 34px, so we can have renderers with less height</li>
</ul>
</li>
<li>New BinaryImage component</li>
<li>Card:
<ul>
<li>New CardExpandedContent: Used for content that needs to avoid paddings like navigation bars</li>
</ul>
</li>
<li>Button, CheckBox, RadioButton:
<ul>
<li>add &quot;spanLabel&quot; to separate the text from other decorations like icons and get more control over styling</li>
</ul>
</li>
<li>Image added &quot;loadComplete&quot; event
<ul>
<li>New ClipImage bead for images to allow clipping</li>
<li>New ErrorImage beads</li>
</ul>
</li>
<li>Added SimpleLoader component that show an indeterminate spin circle</li>
<li>DataContainer
<ul>
<li>dataProvider is now the DefaultProperty</li>
</ul>
</li>
<li>List
<ul>
<li>Added label function through beads</li>
<li>New ListAlternateRowColor bead (should be temporal until get nth-child css styles work in compiler)</li>
<li>dataProvider is now the DefaultProperty</li>
<li>Fixes on SearchFilterForList</li>
</ul>
</li>
<li>ComboBox:
<ul>
<li>Fix Sizing issues</li>
<li>Improve open popup faster</li>
<li>new ComboBoxItemByField bead that allows to select an item by field</li>
<li>dataProvider is now the DefaultProperty</li>
<li>add item renderer support at mxml (TLC) level</li>
<li>Fixes on SearchFilter</li>
</ul>
</li>
<li>DateField:
<ul>
<li>Fix Sizing issues</li>
</ul>
</li>
<li>TabBar:
<ul>
<li>Multiple refactors to decouple functionality in beads and make renderers more flexible. Now we allow vertical layouts and indicator in renderer can be positiones in different places</li>
<li>Add &quot;sameWidths&quot; to make all buttons share the same width.</li>
<li>dataProvider is now the DefaultProperty</li>
</ul>
</li>
<li>Table
<ul>
<li>Refactor to get better scrolling and fixed header</li>
<li>Added label function through beads</li>
<li>New TableAlternateRowColor bead</li>
<li>Solve RTE when set columns at runtime</li>
<li>Added Initializer</li>
<li>New TableAlternateRowColor bead (should be temporal until get nth-child css styles work in compiler)</li>
<li>Removed CRUD beads and added new CRUDTableItemRendererFactoryForCollectionView</li>
</ul>
</li>
<li>DataGrid
<ul>
<li>Multiple fixes in column dimensions to allow more configurations</li>
<li>Added sorting through DataGridSortBead</li>
<li>Added swap of columns</li>
<li>Added label function through beads</li>
<li>dataProvider is now the DefaultProperty</li>
<li>add item renderer support at mxml (TLC) level</li>
</ul>
</li>
<li>PresentationModels refactor for List and DataGrid based controls to allow more flexibility</li>
<li>NumericStepper:
<ul>
<li>Fix Sizing Issues</li>
</ul>
</li>
<li>New responsive beads: ResponsiveSize, ResponsiveResizeListener and ResponsiveLabelVisibility</li>
<li>New TileHorizontalLayout and TileVerticalLayout beads</li>
<li>New ViewLayout for View</li>
<li>Removed Jewel ControlBar since it was just an HGroup</li>
<li>Jewel Themes:
<ul>
<li>Lots of changes to accommodate the rest of component development and fixes in jewel</li>
<li>Add fluid text sizing responsiveness, so size of text shrinks or grows depending on device to fit on different screens</li>
</ul>
</li>
<li>Start of VirtualDataGrid component (still has some issues)</li>
</ul>
</li>
<li>Collections
<ul>
<li>ArrayList.length now is bindable</li>
</ul>
</li>
<li>Maven Distribtuon:
<ul>
<li>The distributions built by Maven should now be equivalent to those of the Ant build.</li>
</ul>
</li>
<li>Maven Archetypes:
<ul>
<li>updated royale-simple-application-archetype</li>
<li>new new royale-jewel-application-archetype</li>
<li>new new royale-jewel-module-application-archetype</li>
<li>new new royale-jewel-crux-application-archetype</li>
</ul>
</li>
<li>Dozens of bugs reported, investigated, and squashed. For details of closed bug reports see <a href="https://github.com/apache/royale-asjs/issues?q=is%3Aissue+is%3Aclosed">GitHub Issues list</a>.</li>
</ul>
<p>Updates to the <em>RELEASE_NOTES</em> made after this file was packaged into the release artifacts can be found here:</p>
<p><a href="https://github.com/apache/royale-asjs/wiki/Release-Notes-0.9.8">https://github.com/apache/royale-asjs/wiki/Release-Notes-0.9.8</a></p>
<h3>Apache Royale Compiler 0.9.8</h3>
<ul>
<li>Fixed issue where problems in .mxml files were sometimes duplicated.</li>
<li>Fixed issue where unrecognized characters in .mxml files were sometimes ignored, and now an error is reported.</li>
<li>Fixed some missing syntax checks for bindable variables that should have been the same as non-bindable variables. This may produce some new errors that weren't there before (such as duplicate variable names), but they should have been.</li>
<li>Fixed issue where a type annotation referencing a class with a private constructor was not correctly resolved.</li>
<li>Improvements/Fixes in Binding support, added support for binding inheritance, similar to Flex.</li>
<li>(JS) Source map debugging paths of SDK classes are updated to allow breakpoints in the original .as or .mxml files in the SDK when debugging in a browser or IDE.</li>
<li>(JS) Added source-map-source-root compiler option to optionally customize the source root of source maps.</li>
<li>(JS) No longer generates @export annotations for exported symbols in debug builds. Exports are smartly generated when creating a release build, and if they are disabled, they will be omitted from framework classes now too. This can help reduce the size of a release build.</li>
<li>(JS) Fixed issue where compiling a .swc library with another .swc library on the library-path did not copy the required .js files to the new .swc library. Only when a .swc library is added external-library-path should the .js files not get copied.</li>
<li>(JS) Improved reproducible builds of .swc library files by ensuring that the paths to .js.map source map files are always referenced with forward slash and never backslash. This matches the existing behavior of references to .js files included with .swc libraries.</li>
<li>(JS) Static getters/setters are not accessed with <code>[&quot;name&quot;]</code> syntax in generated JavaScript anymore, which required them to always be exported, even if the associated export symbols compiler option were disabled.</li>
<li>(JS) When internal namespace is used in ActionScript, the generated JavaScript adds the @package annotation.</li>
<li>(JS) Fixed issue where the Language class was not loaded in the correct order when type coersion is required in a static initializer.</li>
<li>(JS) (Advanced) Added export-internal-symbols and prevent-rename-internal-symbols compiler options to match the existing options for public and protected namespaces.</li>
<li>(JS) (Advanced) Added prevent-rename-public-static-methods, prevent-rename-public-instance-methods, prevent-rename-public-static-variables, prevent-rename-public-instance-variables, prevent-rename-public-static-accessors, and prevent-rename-public-instance-accessors compiler options to provide more granular control when prevent-rename-public-symbols is true (same for protected and internal namespaces too).</li>
</ul>
<p>For additional information on recent issues that have been closed, see <a href="https://github.com/apache/royale-compiler/issues?q=is%3Aissue+is%3Aclosed">Github Issues List</a></p>
<p>You can download a <a href="https://royale.apache.org/download/">binary distribution</a>, the <a href="https://royale.apache.org/source-code/">source code</a> or browse our <a href="https://github.com/apache/royale-asjs/wiki/Apache-Royale-Source-Code-Repositories">GitHub repositories</a>. If you're a NPM user you can check <a href="https://www.npmjs.com/org/apache-royale">Apache Royale at NPM</a>.</p>
<p>As well, you can help us <a href="https://github.com/apache/royale-asjs/issues">filing bug reports for issues you encounter in the framework</a> or <a href="https://github.com/apache/royale-compiler/issues">compiler</a>.</p>
<p>For questions about how to use Royale, send email to <a href="https://royale.apache.org/blog/apache-royale-v0-9-8-released/users@royale.apache.org">mailto:users@royale.apache.org</a>.  For questions and feedback on the development of the source code in the release, send email to <a href="mailto:dev@royale.apache.org">dev@royale.apache.org</a>.</p>
<p>Enjoy! 🙂</p>
]]></description>
        </item>
    
        
        <item>
            <title>Royale at ApacheCon 2020</title>
            <link>https://royale.apache.org/blog/royale-at-apachecon-2020/</link>
            <pubDate>Fri, 02 Oct 2020 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Andrew Wetmore]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/royale-at-apachecon-2020/</guid>
            <description><![CDATA[<p>The Apache Software Foundation (ASF) held its annual convention, ApacheCon, September 29-October 1, 2020. Because of the pandemic, it was an all-virtual conference. Participants logged in and attended keynote speeches, track sessions, and informal hallway meetings from all around the world. The conference had a track in Mandarin, and sessions in Hindi.</p>
<p><strong>Attendance broke all previous records, with over three thousand people taking part.</strong> Over 80% were attending their first-ever ASF convention.</p>
<p>There were 27 presentation tracks, the largest number ever for ApacheCon. Apache Royale was among them, with presenters in Pakistan, Spain, and Canada.</p>
<p>The tracks were:</p>
<ul>
<li>
<p><strong>Hello, Royale!</strong>: A high-level tour of what Apache Royale does, its history, and what it offers to people creating new applications or migrating existing Flex applications before the end of Flash support. (<a href="https://youtu.be/YLt85Nee4ks">Video</a>) (<a href="https://apache.github.io/royale-docs/presentations/HelloRoyale!-ApacheCon2020.pdf">PDF</a>)</p>
<img src="https://royale.apache.org/img/blog/apache-royale-track-1.png" width="200">
</li>
<li>
<p><strong>Moving an App from Flex to Royale</strong>: What's involved in migrating a complex, business-critical application from Apache Flex and the Flash platform to Apache Royale. (<a href="https://youtu.be/O5WJ6nRPX40">Video</a>) (<a href="https://apache.github.io/royale-docs/presentations/MovingaFlexAppToRoyale-ApacheCon2020.pdf">PDF</a>)</p>
<img src="https://royale.apache.org/img/blog/apache-royale-track-2.png" width="200">
</li>
<li>
<p><strong>Starting from a blank file</strong>: A demonstration of creating a complex application from an empty file, using Royale's existing features and component sets. (<a href="https://youtu.be/E-Fg5V5DxbY">Video</a>) (<a href="https://apache.github.io/royale-docs/presentations/StartingFromABlankFile-ApacheCon2020.pdf">PDF</a>)</p>
<img src="https://royale.apache.org/img/blog/apache-royale-track-3.png" width="200">
</li>
<li>
<p><strong>Tour de Jewel</strong>: A review and discussion of the Jewel component set, the most feature-rich of the component sets Royale provides. (<a href="https://youtu.be/9Wdv-ooku3k">Video</a>) (<a href="https://apache.github.io/royale-docs/presentations/TourDeJewel-ApacheCon2020.pdf">PDF</a>)</p>
<img src="https://royale.apache.org/img/blog/apache-royale-track-4.png" width="200">
</li>
</ul>
<p>You can <a href="https://apache.github.io/royale-docs/presentations/presentations.html">download</a> and review PDFs of the four presentations or watch the videos of the presentations available on YouTube.</p>
]]></description>
        </item>
    
        
        <item>
            <title>Using Jewel TileHorizontalLayout</title>
            <link>https://royale.apache.org/blog/using-jewel-tilehorizontallayout/</link>
            <pubDate>Tue, 11 Aug 2020 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/using-jewel-tilehorizontallayout/</guid>
            <description><![CDATA[<p>This example shows how to use the Jewel <strong>TileHorizontalLayout</strong> in Jewel components and data-based containers to arrange child elements as tiles. The layout lets you customize the tiles' size, the gaps between tiles, and whether you want them organized by rows or columns.</p>
<p>This layout is modeled very closely on the <a href="https://flex.apache.org/asdoc/spark/layouts/TileLayout.html">Apache Flex Spark TileLayout</a>.</p>
<h2>Example structure</h2>
<p>We're using the <strong>Jewel UI set</strong> to build a simple interface as a placeholder for the example. We use a Jewel <strong>Card</strong> in the middle of the screen. Inside the <strong>CardPrimaryContent</strong> we add a <strong>TabBarContent</strong> to switch between a <strong>Container</strong> and a <strong>DataContainer</strong> both using the <strong>TileHorizontalLayout</strong> to display child elements as tiles. We switch between the views using a TabBar inside a <strong>CardExpandedContent</strong>.</p>
<blockquote>
<p>Use <strong>CardExpandedContent</strong> when we need the content adjusted to fit the Card borders without any gap. In our example, we want the TabBar to fill all the available space.</p>
</blockquote>
<h2>Adding the TabBar</h2>
<p>We declare the <strong>TabBar</strong> using an inline <strong>ArrayList</strong> as <strong>dataProvider</strong> with the data to build each <strong>TabBarButton</strong>.</p>
<pre><code class="language-mxml">&lt;j:CardExpandedContent&gt;
    &lt;j:TabBar localId=&quot;tabbar&quot; width=&quot;100%&quot; selectedIndex=&quot;0&quot; sameWidths=&quot;true&quot;
       itemRenderer=&quot;itemRenderers.TabBarVerticalIconItemRenderer&quot;&gt;
        &lt;js:ArrayList&gt;
            &lt;fx:Array&gt;
                &lt;vos:TabBarButtonVO label=&quot;Tile Container&quot; hash=&quot;sec1&quot; icon=&quot;{FontAwesome5IconType.TH_LARGE}&quot;/&gt;
                &lt;vos:TabBarButtonVO label=&quot;Tile DataContainer&quot; hash=&quot;sec2&quot; icon=&quot;{FontAwesome5IconType.TH_LIST}&quot;/&gt;
            &lt;/fx:Array&gt;
        &lt;/js:ArrayList&gt;
    &lt;/j:TabBar&gt;
&lt;/j:CardExpandedContent&gt;
</code></pre>
<p>The Tabbar add two buttons to control the content that fills all available space (width is 100%). It makes both buttons the same width and puts the focus on the first one (selectedIndex = 0). The <strong>TabBarVerticalIconItemRenderer</strong> item renderer controls each button's layout. Check the full code to see details on configuring the renderer.</p>
<p>With this code in place we can add the content.</p>
<h2>Add the dual TabBarContent</h2>
<p>The main content is structured as follows:</p>
<pre><code class="language-mxml">&lt;j:CardPrimaryContent&gt;
    &lt;j:TabBarContent selectedContent=&quot;{(tabbar.selectedItem as TabBarButtonVO).hash}&quot;&gt;
        &lt;j:SectionContent name=&quot;sec1&quot;&gt;
            &lt;j:Container width=&quot;100%&quot;&gt;
                &lt;!-- Content to show as tiles--&gt;
            &lt;/j:Container&gt;
        &lt;/j:SectionContent&gt;
            
        &lt;j:SectionContent name=&quot;sec2&quot;&gt;
            &lt;j:DataContainer width=&quot;100%&quot; height=&quot;250&quot;&gt;
                &lt;!-- Content to show as tiles--&gt;
            &lt;/j:DataContainer&gt;
        &lt;/j:SectionContent&gt;

    &lt;/j:TabBarContent&gt;
&lt;/j:CardPrimaryContent&gt;
</code></pre>
<p>The TabBarContent's <strong>selectedContent</strong> is bound to the TabBar's <strong>selectedItem</strong> so when a TabBar button is selected the content changes accordingly.</p>
<h2>Using the tile layout in a Container</h2>
<p>Inside the <strong>SectionContent</strong> we add a <strong>Container</strong> configured with <strong>TileHorizontalLayout</strong>. We can add any content we want to the container, but the size of each piece will be controlled by the layout.</p>
<p>Since no height is provided, no scrolling will be added as the number of content items increases or decreases, and the surrounding card will grow or shrink to adapt to them.</p>
<p>The layout is configured with some horizontal and vertical gaps, and we want three columns by default. This means that the width of the tiles will be calculated to fill all available space, taking into account the <strong>requestedColumnCount</strong> and the gaps:</p>
<pre><code class="language-mxml">&lt;j:Container width=&quot;100%&quot;&gt;
    &lt;j:beads&gt;
        &lt;j:TileHorizontalLayout localId=&quot;thl&quot; verticalGap=&quot;6&quot;
            horizontalGap=&quot;6&quot; requestedColumnCount=&quot;3&quot;/&gt;
    &lt;/j:beads&gt;
    
    &lt;html:Div className=&quot;box&quot; text=&quot;1&quot;/&gt;
    &lt;html:Div className=&quot;box&quot; text=&quot;2&quot;/&gt;
    &lt;html:Div className=&quot;box&quot; text=&quot;3&quot;/&gt;
    &lt;html:Div className=&quot;box&quot; text=&quot;4&quot;/&gt;
    &lt;html:Div className=&quot;box&quot; text=&quot;5&quot;/&gt;
    &lt;html:Div className=&quot;box&quot; text=&quot;6&quot;/&gt;
    &lt;html:Div className=&quot;box&quot; text=&quot;7&quot;/&gt;
    &lt;html:Div className=&quot;box&quot; text=&quot;8&quot;/&gt;
    &lt;html:Div className=&quot;box&quot; text=&quot;9&quot;/&gt;
    &lt;html:Div className=&quot;box&quot; text=&quot;10&quot;/&gt;
    &lt;html:Div className=&quot;box&quot; text=&quot;11&quot;/&gt;
    &lt;html:Div className=&quot;box&quot; text=&quot;12&quot;/&gt;

&lt;/j:Container&gt;
</code></pre>
<h2>Using the tile layout in a DataContainer</h2>
<p>Inside the <strong>SectionContent</strong> we add a <strong>DataContainer</strong> configured with the <strong>TileHorizontalLayout</strong>. As its name indicates, the content is generated dynamically based on the data in the ArrayList, and the item renderer controls the display of each tile.</p>
<blockquote>
<p>You can use other data-based containers like a <strong>List</strong> if you need more functionality like selection of items, roll-over support or keyboard accessibility.</p>
</blockquote>
<p>For this example, we limit the height of the container so the content can be hidden, and add scrolling with the <strong>ScrollingViewport</strong> bead.</p>
<p>Also we configure <strong>columnWidth</strong> and <strong>rowHeight</strong> so the columns will be calculated based on tile size and gaps.</p>
<pre><code class="language-mxml">&lt;j:DataContainer width=&quot;100%&quot; height=&quot;250&quot;
    itemRenderer=&quot;itemRenderers.VerticalIconListItemRenderer&quot;&gt;
    &lt;j:beads&gt;
        &lt;j:ScrollingViewport/&gt;
        &lt;j:TileHorizontalLayout localId=&quot;thll&quot; verticalGap=&quot;6&quot;
                horizontalGap=&quot;6&quot; columnWidth=&quot;130&quot; rowHeight=&quot;70&quot;/&gt;
    &lt;/j:beads&gt;

    &lt;js:ArrayList&gt;
        &lt;fx:Array&gt;
            &lt;vos:IconListVO label=&quot;Ank&quot; icon=&quot;{FontAwesome5IconType.ANKH}&quot;/&gt;
            &lt;vos:IconListVO label=&quot;Atom&quot; icon=&quot;{FontAwesome5IconType.ATOM}&quot;/&gt;
            &lt;vos:IconListVO label=&quot;Burn&quot; icon=&quot;{FontAwesome5IconType.BURN}&quot;/&gt;
            &lt;vos:IconListVO label=&quot;Candy Cane&quot; icon=&quot;{FontAwesome5IconType.CANDY_CANE}&quot;/&gt;
            &lt;vos:IconListVO label=&quot;Fire&quot; icon=&quot;{FontAwesome5IconType.FIRE_ALT}&quot;/&gt;
            &lt;vos:IconListVO label=&quot;Duck&quot; icon=&quot;{FontAwesome5IconType.DUCK}&quot;/&gt;
            &lt;vos:IconListVO label=&quot;Cloud And Moon&quot; icon=&quot;{FontAwesome5IconType.CLOUD_MOON}&quot;/&gt;
            &lt;vos:IconListVO label=&quot;Europe&quot; icon=&quot;{FontAwesome5IconType.GLOBE_EUROPE}&quot;/&gt;
            &lt;vos:IconListVO label=&quot;Electric Guitar&quot; icon=&quot;{FontAwesome5IconType.GUITAR_ELECTRIC}&quot;/&gt;
            &lt;vos:IconListVO label=&quot;Mask&quot; icon=&quot;{FontAwesome5IconType.MASK}&quot;/&gt;
            &lt;vos:IconListVO label=&quot;Skull&quot; icon=&quot;{FontAwesome5IconType.SKULL}&quot;/&gt;
            &lt;vos:IconListVO label=&quot;Spider&quot; icon=&quot;{FontAwesome5IconType.SPIDER}&quot;/&gt;
        &lt;/fx:Array&gt;
    &lt;/js:ArrayList&gt;
    
&lt;/j:DataContainer&gt;
</code></pre>
<h2>CardActions to control sizing at runtime</h2>
<p>In the example we also add some sliders to control different settings of each layout. For example, to change columnWidth we configure the following slider:</p>
<pre><code class="language-mxml">&lt;j:VGroup&gt;
    &lt;j:Label text=&quot;columnWidth&quot;/&gt;
    &lt;j:HSlider width=&quot;200&quot; value=&quot;85&quot; minimum=&quot;50&quot; maximum=&quot;150&quot; 
            valueChange=&quot;tabbar.selectedIndex == 0 ? thl.columnWidth = event.target.value : thll.columnWidth = event.target.value;&quot;/&gt;
&lt;/j:VGroup&gt;
</code></pre>
<p>We use the tabbar selectedIndex to affect the current selected content layout and avoid changing the content layout in the other tab. Check the final code example to see the rest of sliders since all are similar.</p>
<p>And that's all! I hope you like this layout example in Royale. As always, enjoy coding with Apache Royale!</p>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/features/data-binding">Apache Royale Data Binding documentation page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel">Apache Royale Jewel UI Set documentation page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/tabbar">Jewel TabBar Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/tabbarcontent">Jewel TabBarContent Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/container">Jewel Container Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/datacontainer">Jewel DataContainer Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="600" src="https://royale.apache.org/blog-examples/BE0015_Using_Jewel_TileHorizontalLayout/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0015_Using_Jewel_TileHorizontalLayout/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0015_Using_Jewel_TileHorizontalLayout">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0015_Using_Jewel_TileHorizontalLayout"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Apache Royale v0.9.7 released!</title>
            <link>https://royale.apache.org/blog/apache-royale-v0-9-7-released/</link>
            <pubDate>Fri, 15 May 2020 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/apache-royale-v0-9-7-released/</guid>
            <description><![CDATA[<p>The Apache Royale community is pleased to announce the release of <strong>Apache Royale 0.9.7</strong>.</p>
<p><img src="https://royale.apache.org/img/blog/release-0.9.7.png" alt=""></p>
<p>The Apache Royale project is the next generation of the Apache Flex SDK. It lets developers use <strong>MXML</strong> and <strong>ActionScript 3</strong> to generate <strong>HTML/JS/CSS</strong> applications which can run natively in browsers. The cross-compiled code can also run on platforms like <strong>Electron</strong> or <strong>Apache Cordova</strong> (Adobe PhoneGap) to build mobile applications.</p>
<p>This release should be considered 'beta' quality, although <em>we're very close to a 1.0 release</em> and <em>we have many applications in production</em> at this point. The purpose of this release is to continue to gather feedback about Royale's features and the project's implementation strategies, and to recruit new contributors. We hope to grow the code base into an SDK and tool chain that delivers the highest productivity when developing applications that can run on many platforms. Beta releases, however, may not handle all production needs.</p>
<h2>Changes in 0.9.7:</h2>
<h3>Apache Royale Framework 0.9.7</h3>
<ul>
<li>Reflection support improved (supports access to custom namespaces) including improved utility methods</li>
<li>Added a <code>getTimer</code> emulation to Core library, similar to <code>flash.utils.getTimer</code></li>
<li>added <code>[RoyaleArrayLike]</code> implementation support to Royale Collections, and BinaryData</li>
<li>improvements to XML/E4X conformance, and memory footprint</li>
<li>General improvements in Bindings, including function bindings</li>
<li>Added new Router classes</li>
<li>Added AMFLocalStorage, a javascript version of the Flash runtime LSO (Local Shared Object)</li>
<li>Added new ItemRendererInitializer bead infrastructure to decouple better item renderers functionality</li>
<li>Added ToolTipRemovalWhenItemRemoved for renderers that use tooltips.</li>
<li>Fix bin/mxmlc and bin/compc scripts that did not understand certain default compiler options in royale-config.xml</li>
<li>Crux:
<ul>
<li>Improved:
<ul>
<li>Crux can now be used in MXRoyale and SparkRoyale applications</li>
</ul>
</li>
<li>New:
<ul>
<li>Added support for using Command pattern to Crux</li>
<li>Added Documentation in royale-docs site</li>
</ul>
</li>
</ul>
</li>
<li>Graphics:
<ul>
<li>New:
<ul>
<li>Added new high-parity swf graphics emulation (UIGraphicBase)</li>
</ul>
</li>
</ul>
</li>
<li>Jewel:
<ul>
<li>Improved:
<ul>
<li>Massive refactors and improvments</li>
<li>Hierachy improved in many Jewel framework branches to make StyleUIBase the base of all components and unify APIs.</li>
<li>StyleUIBase now improve width and height so we can use NaN values to unset values. For JS this means return to default values.</li>
<li>Card: Added new subcomponents (CardHeader, CardTitle, CardPrimaryContent and CardActions)</li>
<li>Button: Added new unboxed and outlined styles (also to IconButton and ToggleButton)</li>
<li>CheckBox and RadioButton now can size the icon part</li>
<li>ComboBox can now confifure custom renders and supports rowCount, and fixed percent width. also popup adapts to data provider length.</li>
<li>List supports now variableRowHeight, scrollToIndex and can be navigated with arrow cursors (up/down)</li>
<li>Item Renderer: Use the new Initializer infrastructure</li>
<li>Remove mappers to rely on basic ones, also remove CRUD beads (Add, Remove and Update item beads)</li>
<li>Layouts, Group and Container supports variableRowHeight</li>
<li>Layouts many fixes and improvements in alignment, and now dispatch childs dispatch a &quot;sizeChanged&quot;</li>
<li>Viewport and ScrollingViewport refactor. Viewport has now clipContent so Container can activate/deactivate</li>
<li>added tabindex in many components and to Disabled bead (=-1)</li>
<li>Prompt beads now support changes at runtime</li>
<li>TabBar: fix AssignTabContent bead when change dataprovider</li>
<li>Jewel Themes was updated to show many visual improvements in colors and styles. Flat and Light themes are almost finished. Still Dark themes are work in progress.</li>
<li><a href="https://royale.apache.org/tourdejewel/">Tour De Jewel</a> was updated to show all the latest updates</li>
</ul>
</li>
<li>New:
<ul>
<li>Runtime Theme Switch. Can be seen working in Tour De Jewel</li>
<li>StyledUIBase now adds min and max width and height properties.</li>
<li>Added VSlider. The original Slider is now HSlider.</li>
<li>Added Paddings bead</li>
<li>Added VContainer and HContainer for clipped content</li>
<li>Added DataGrid</li>
<li>Added ButtonBar</li>
<li>Added ComboBoxTrucatedText</li>
<li>Added DrawerFooter</li>
<li>Added VirtualList and VirtualComboBox to load huge amounts of data in a performant way</li>
<li>New colors for text and icons (lightest, light, normal, dark and darkest)</li>
<li>Added Jewel TodoMVC and TodoMVC with Crux examples following the TodoMVC website guidelines. Also added more blog examples.</li>
</ul>
</li>
</ul>
</li>
<li>Icons
<ul>
<li>Refactored classes IIcon classes to support more icons sets</li>
<li>Added FontAwesome v5 support (also v4)</li>
<li>Icons now support Material and FontAwesome (more sets can be added)</li>
</ul>
</li>
<li>SVG:
<ul>
<li>Fixed SVGImage when using Maven</li>
</ul>
</li>
<li>Network:
<ul>
<li>Improved:
<ul>
<li>URLLoader now respects contentType passed in via URLRequest.</li>
</ul>
</li>
<li>New:
<ul>
<li>Added URLVariables emulation</li>
</ul>
</li>
</ul>
</li>
<li>MXRoyale:
<ul>
<li>Improved:
<ul>
<li>mx.utils.ObjectUtil – improved parity</li>
<li>mx.net.SharedObject – improved parity</li>
<li>add support for legacy HttpService decoding format</li>
<li>Fixes in mx.messaging for polling support, mx.external.ExternalInterface</li>
</ul>
</li>
<li>New:
<ul>
<li>mx.net.SharedObjectJSON – new alternative</li>
</ul>
</li>
</ul>
</li>
<li>Maven:
<ul>
<li>Massive improvements</li>
<li>Now Maven can generate a valid distribution (SDK) to use in any IDE (tested on VSCode and Moonshine)
distribution can be JS only</li>
<li>SASS generation is now separated from main build to a profile to save lots of time when no need to build themes</li>
</ul>
</li>
<li>RoyaleUnit:
<ul>
<li><code>[Test(async)]</code> may be used to define asynchronous tests</li>
<li><code>[BeforeClass]</code> and <code>[AfterClass]</code> metadata must be added to static methods</li>
<li><code>[Test]</code> metadata supports an 'expected' attribute to expect a thrown exception</li>
<li>Fixed incorrect order of expected and actual values in assert messages</li>
</ul>
</li>
<li>RoyaleUnitUI: An optional UI to display the results of RoyaleUnit tests</li>
<li>Dozens of bugs reported, investigated, and squashed. For details of closed bug reports see <a href="https://github.com/apache/royale-asjs/issues?q=is%3Aissue+is%3Aclosed">GitHub Issues list</a>.</li>
</ul>
<p>Updates to the <em>RELEASE_NOTES</em> made after this file was packaged into the release artifacts can be found here:</p>
<p><a href="https://github.com/apache/royale-asjs/wiki/Release-Notes-0.9.7">https://github.com/apache/royale-asjs/wiki/Release-Notes-0.9.7</a></p>
<h3>Apache Royale Compiler 0.9.7</h3>
<ul>
<li>Definitions containing <code>[JSModule]</code> with a custom module name are no longer required to use strict camelCase naming scheme.</li>
<li>Added Flex emulation RPC WebService partial support</li>
<li>Fix add event handler code in renderers and inline Components</li>
<li>(SWF/JS) Added support for <code>[RoyaleArrayLike]</code> metadata-driven support for proxying compile-time numeric-typed array index access to get/set method calls and also specific for-in/for-each-in loop support.</li>
<li>(JS) Compiler updates to support more e4X variations/scenarios, including 'use namespace' and 'default xml namespace' directives</li>
<li>(JS) Compiler updates to address custom namespace-related output, and reflection support</li>
<li>(JS) Compiler updates to output more compact Reflection data</li>
<li>Fixed a compiler memory leak that was occurring over multiple compilations</li>
<li>Fixes in bindable code generation for accessors, and in bindable function generation for swf</li>
<li>Fixed <code>-show-binding-warnings=false</code> option to switch off binding warnings</li>
<li>Maven: Many fixes, improvements and Updates</li>
<li>Support for Maven distribution (Create SDK with Maven)</li>
<li>(JS) Prevent renaming of public variables in release builds so that they may be set from MXML.</li>
<li>(JS) Fix conflict between methods of the same name in superclass and subclass, where the superclass method is private and the subclass method is public.</li>
<li>(JS) Added <code>-jsx-factory</code> compiler option to customize the factory method used in code generated from [JSX].</li>
<li>(JS) Added <code>-inline-constants</code> compiler option that optionally replaces references to contants with their value when the value is a primitive (like numeric, boolean, or string).</li>
<li>(SWF/JS) Added <code>-warn-this-within-closure</code> compiler option that controls whether the compiler emits warnings when referencing <code>this</code> in closures or anonymous functions.</li>
<li>(SWF/JS) Added <code>-strict-identifier-names</code> compiler option to make the compiler emit errors when using certain keywords as identifiers, to match the old behavior of the Flex SDK compiler.</li>
<li>(SWF/JS) Fix metadata attributes being ignored if they did not have a value. Example: async was ignored in <code>[Test(async)]</code>.</li>
<li>(SWF/JS) Fix path resolving error when specifying a source file with ./ or .\ on the command line.</li>
<li>(SWF/JS) Fix <code>[ArrayElementType]</code> being ignored when setting the <code>[DefaultProperty]</code> in MXML.</li>
<li>(SWF) Fix mxmlc and compc scripts in the bin folder that didn't work from the command line.</li>
<li>(SWF/JS) Fix incorrect resolving of a property with a different namespace than the parent element in MXML. Properties must have the same namespace as the component, just like in Flex.</li>
<li>(SWF/JS) Fix missing error for values that cannot be parsed as text in MXML.</li>
<li>(JS) Fix stripped end quotes from strings in data binding expressions in MXML.</li>
<li>(Maven) Added missing MXML manifest for core language types like Object, Array, Number, String, Boolean, etc.</li>
<li>(JS) Fixed null reference error on source map generation with certain folder hierarchies.</li>
<li>(JS) Fixed lost UTF-8 encoding when using remove-circulars.</li>
<li>(SWF/JS) Fix missing error when setting private/inaccessible property in MXML.</li>
<li>(JS) Fix &quot;missing var keyword&quot; warning from Closure compiler for type definitions.</li>
<li>(SWF/JS) Fix missing error for calling a getter as a function (similar to attempting to call a variable as a function) when it is the wrong type.</li>
<li>(JS) Fix missing . in generated JS when using static getter/setter in a custom namespace.</li>
</ul>
<p>For additional information on recent issues that have been closed, see <a href="https://github.com/apache/royale-compiler/issues?q=is%3Aissue+is%3Aclosed">Github Issues List</a></p>
<p>You can download a <a href="https://royale.apache.org/download/">binary distribution</a>, the <a href="https://royale.apache.org/source-code/">source code</a> or browse our <a href="https://github.com/apache/royale-asjs/wiki/Apache-Royale-Source-Code-Repositories">GitHub repositories</a>. If you're a NPM user you can check <a href="https://www.npmjs.com/org/apache-royale">Apache Royale at NPM</a>.</p>
<p>As well, you can help us <a href="https://github.com/apache/royale-asjs/issues">filing bug reports for issues you encounter in the framework</a> or <a href="https://github.com/apache/royale-compiler/issues">compiler</a>.</p>
<p>For questions about how to use Royale, send email to <a href="https://royale.apache.org/blog/apache-royale-v0-9-7-released/users@royale.apache.org">mailto:users@royale.apache.org</a>.  For questions and feedback on the development of the source code in the release, send email to <a href="mailto:dev@royale.apache.org">dev@royale.apache.org</a>.</p>
<p>Enjoy! 🙂</p>
]]></description>
        </item>
    
        
        <item>
            <title>Working with vector graphics</title>
            <link>https://royale.apache.org/blog/working-with-vector-graphics/</link>
            <pubDate>Sun, 29 Mar 2020 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/working-with-vector-graphics/</guid>
            <description><![CDATA[<p>This example shows some ways you can work with vector graphics in Apache Royale. Since Royale draws in part from the sources of Flash and Flex technologies, you'll find that <a href="https://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/display/Graphics.html">the powerful Flash drawing API</a> is supported for JavaScript and SWF applications. On the other hand, Apache Royale also supports use of <a href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG graphics</a>.</p>
<p>In this example we create an Erlenmeyer flask, a measuring and mixing container for laboratories, that we can fill with some kind of strange green fluid. We can change the level of the fill with a Jewel <strong>HSlider</strong>, and use a <strong>ToggleButton</strong> to show or hide an indicator of the maximum level the liquid can reach. The bottle is be a static SVG shape and the fluid is drawn at runtime as the code responds when the slider value changes.</p>
<h2>Example structure</h2>
<p>We're using the <strong>Jewel UI set</strong> to build a simple interface as a placeholder for the example. We use a Jewel <strong>Card</strong>; the Jewel <strong>HorizontalCenteredLayout</strong> centers the card in the card on both axes.</p>
<p>As usual, the <strong>Card</strong> has three sections: a <strong>CardHeader</strong> (with the title), a <strong>CardPrimaryContent</strong> (that holds the bottle) and a <strong>CardActions</strong> (with some controls).</p>
<p>This is the main structure:</p>
<pre><code class="language-mxml">&lt;j:Card width=&quot;460&quot; height=&quot;680&quot;&gt;
    &lt;j:CardHeader&gt;
        &lt;html:H3 text=&quot;Working with vector graphics&quot; className=&quot;primary-normal&quot;/&gt;
    &lt;/j:CardHeader&gt;
    &lt;j:CardPrimaryContent itemsHorizontalAlign=&quot;itemsCentered&quot;&gt;

        &lt;!-- Here will have the bottle --&gt;

    &lt;/j:CardPrimaryContent&gt;
    &lt;j:CardActions itemsHorizontalAlign=&quot;itemsRight&quot; itemsVerticalAlign=&quot;itemsCentered&quot;&gt;
        &lt;j:BarSection width=&quot;50%&quot;&gt;

            &lt;!-- Here will go the ToggleButton --&gt;

        &lt;/j:BarSection&gt;
        &lt;j:BarSection width=&quot;50%&quot; itemsHorizontalAlign=&quot;itemsRight&quot;&gt;

            &lt;!-- Here will go the Slider --&gt;

        &lt;/j:BarSection&gt;
    &lt;/j:CardActions&gt;
&lt;/j:Card&gt;
</code></pre>
<p>With this code in place we can…</p>
<h2>Create the bottle</h2>
<p>We use SVG graphics to assemble the flask, and <strong>ActionScript 3</strong> code using the powerful <strong>Flash drawing API</strong> to create and manage the liquid. We're using both to show you both options so you have more weapons in your arsenal.</p>
<p>For the flask, I created three SVG files using a design tool. You can use whatever tool you prefer to draw vector art and export it in SVG format. I used <a href="https://affinity.serif.com/">Affinity Designer</a> software to create it since I think it's one of the best professional and modern tools available today. But many other free, open source and commercial options are available, so choose whatever you want.</p>
<p>The flask's three files are: A <strong>mask</strong>, a <strong>shade</strong> (with some reflections and gradients) and the <strong>main flask shape</strong>. I loaded the files with the <strong>svg:Image</strong> Royale component. Then I added a red indicator line coded In SVG directly in Royale to show that option with <strong>svg:Rect</strong>. Finally the fluid uses the <strong>UIGraphicsBase</strong> class that lets you work with the Flash drawing API.</p>
<p>I added all the parts to a Jewel <strong>Container</strong> so I can position them in relation to each other as layers. The Container clips the content so things that fall outside the container boundaries are hidden.</p>
<p>You can see all the pieces in perspective in the following image:</p>
<p><img src="https://royale.apache.org/img/blog/bottle-layers-perspective.png" alt=""></p>
<p>Here is the final code of the <strong>Container</strong> that composes all the graphic parts:</p>
<pre><code class="language-mxml">&lt;j:Container localId=&quot;fgShape&quot; width=&quot;400&quot; height=&quot;500&quot;&gt;
    
    &lt;!-- liquid --&gt;    
    &lt;js:UIGraphicsBase localId=&quot;bgShape&quot; width=&quot;400&quot; height=&quot;500&quot;/&gt;
    
    &lt;!-- rule --&gt;
    &lt;j:Group&gt;
        &lt;svg:Rect localId=&quot;rule&quot; x=&quot;180&quot; y=&quot;{bgShape.height - rule.height}&quot; width=&quot;6&quot; height=&quot;350&quot;&gt;
            &lt;svg:fill&gt;
                &lt;js:SolidColor color=&quot;#ff0000&quot; alpha=&quot;.5&quot;/&gt;
            &lt;/svg:fill&gt;
        &lt;/svg:Rect&gt;
    &lt;/j:Group&gt;
    &lt;!-- fill mask --&gt;
    &lt;svg:Image src=&quot;assets/bottle-mask.svg&quot; width=&quot;400&quot; height=&quot;500&quot;/&gt;
    &lt;!-- inner shade --&gt;
    &lt;svg:Image src=&quot;assets/bottle-shade.svg&quot; width=&quot;400&quot; height=&quot;500&quot;/&gt;
    &lt;!-- main shape --&gt;
    &lt;svg:Image src=&quot;assets/bottle-main.svg&quot; width=&quot;400&quot; height=&quot;500&quot;/&gt;

&lt;/j:Container&gt;
</code></pre>
<p>Notice that the fluid is declared first so the other shapes can hide the fluid that is outside the flask shape.</p>
<h2>Fluid controls</h2>
<p>To provide some interactivity we add a <strong>ToogleButton</strong> and an <strong>HSlider</strong>. The button lets you show and hide the indicator line; move the slider to change the fluid level from empty to full.</p>
<p>The <strong>ToogleButton</strong> has the following code:</p>
<pre><code class="language-mxml">&lt;j:ToggleButton localId=&quot;ruleVisibility&quot; 
    outlined=&quot;true&quot; emphasis=&quot;emphasized&quot;
    text=&quot;Hide Rule&quot; selectedText=&quot;Show Rule&quot; selected=&quot;true&quot;&gt;
    &lt;j:icon&gt;
        &lt;js:ToggleFontIcon text=&quot;{MaterialIconType.VISIBILITY_OFF}&quot; selectedText=&quot;{MaterialIconType.VISIBILITY}&quot; material=&quot;true&quot;/&gt;
    &lt;/j:icon&gt;
&lt;/j:ToggleButton&gt;
</code></pre>
<p>It uses an outlined style with emphasized coloring, and <a href="https://www.material.io/resources/icons/?style=baseline">material icons</a> and texts for both selected and unselected states.</p>
<h2>Show and Hide the indicator with binding</h2>
<p>We control the visibility of the red indicator line with the <strong>data binding</strong> Royale feature:</p>
<p>First add <strong>ApplicationDataBinding</strong> to the application beads to make Royale support binding at that level (Remember that Royale is <a href="https://apache.github.io/royale-docs/features/payg">PAYG</a>, so we only add code when it is really necessary instead of adding lots of code that you probably will never use to every component).</p>
<p>Then add the binding to the <strong>Group</strong> that holds the rule.</p>
<pre><code class="language-mxml">&lt;!-- rule --&gt;
&lt;j:Group visible=&quot;{ruleVisibility.selected}&quot;&gt;
</code></pre>
<p>When you run the application, click the button to show and hide the red indicator.</p>
<h2>Add the slider</h2>
<p>We finish the action controls part by adding a label and a slider in the last <strong>BarSection</strong> of the <strong>CardActions</strong>. The slider lets you change the fluid level.</p>
<pre><code class="language-mxml">&lt;j:Label text=&quot;Slide to fill&quot;/&gt;
&lt;j:HSlider localId=&quot;slider&quot; value=&quot;0&quot; minimum=&quot;0&quot; maximum=&quot;500&quot;/&gt;
</code></pre>
<h2>Drawing the fluid</h2>
<p>Using the drawing API in Royale is easy, and well-supported by both <strong>JavaScript</strong> and <strong>SWF</strong>. We get the <strong>Graphics</strong> instance of the <strong>UIGraphicsBase</strong> object in the following way:</p>
<pre><code class="language-as3">var g:Graphics = Graphics.getInstanceFor(bgShape);
</code></pre>
<p>Now we can use the graphics object to invoke drawing functions like <strong>moveTo</strong>, <strong>lineTo</strong>, and more.</p>
<p>To draw the fluid we use the following function using fills, lines and quadratic bezier curves:</p>
<pre><code class="language-as3">/**
 * Draw the liquid to fill the bottle
 */
private function drawLiquid(g:Graphics, color:Number, alpha:Number, x:int, y:int, width:int, height:int, wave:int):void {
    if(y &gt; height)
        y = height;
    g.beginFill(color, alpha);
    g.moveTo(x, height);
    g.lineTo(x, y);
    g.curveTo(width / 4, y - wave, width / 2, y);
    g.lineTo(width / 2, y)
    g.curveTo(width * 3 / 4, y + wave, width, y);
    g.lineTo(width, height);
    g.lineTo(x, height);
    g.endFill();
}
</code></pre>
<p>Then to join all the pieces we add a <strong>valueChange</strong> event handler to the <strong>HSlider</strong>:</p>
<pre><code class="language-mxml">&lt;j:HSlider localId=&quot;slider&quot; value=&quot;0&quot; minimum=&quot;0&quot; maximum=&quot;500&quot; valueChange=&quot;changeFill(event)&quot;/&gt;
</code></pre>
<p>The <strong>changeFill</strong> function is the following:</p>
<pre><code class="language-as3">/**
 * Fill the bottle
 */
private function changeFill(event:ValueChangeEvent):void {
    var g:Graphics = Graphics.getInstanceFor(bgShape);
    var newHeight:Number = transformValueFromRange(slider.value, slider.minimum, slider.maximum, 0, rule.height);
    var newY:Number = fgShape.height - newHeight;
    
    g.clear();
    drawLiquid(g, liquidColor, .5, 0, newY, 400, 500, -15);
    drawLiquid(g, liquidColor, 1,  0, newY, 400, 500, 30);
}
</code></pre>
<p>When we change the <strong>HSlider</strong> position, the code calls the function, gets the graphic object, calculates the new height value based on the current container height (transforming ranges), clears all drawings and redraws two different liquids with some displacement on X and change on the wave length with the new values.</p>
<p>And that's all! I hope you like this drawing feature in Royale. You'll be able to do many creative things in your Royale applications with it!</p>
<p>As always, enjoy!</p>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/features/data-binding">Apache Royale Data Binding documentation page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel">Apache Royale Jewel UI Set documentation page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/hslider">Jewel HSlider Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/card">Jewel Card Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="800" src="https://royale.apache.org/blog-examples/BE0014_Working_with_vector_graphics/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0014_Working_with_vector_graphics/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0014_Working_with_vector_graphics">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0014_Working_with_vector_graphics"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>How to create a Desktop Application with Royale and Electron</title>
            <link>https://royale.apache.org/blog/how-to-create-a-desktop-application-with-royale-and-electron/</link>
            <pubDate>Thu, 26 Mar 2020 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Judah Frangipane]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/how-to-create-a-desktop-application-with-royale-and-electron/</guid>
            <description><![CDATA[<p>With <strong>Apache Royale</strong> and <strong>Electron</strong> you can publish your projects to desktop applications. In this guide you'll learn how to do that.</p>
<p>The short version is to create an Electron project, create an Apache Royale project inside of that and then point the Electron app to the generated Apache Royale html page. You then communicate through the ipcRenderer. We'll be using Visual Studio Code for this guide. The complete example project is attached at the end.</p>
<p>Prerequisites:</p>
<ul>
<li>Install Visual Studio Code – <a href="https://code.visualstudio.com/">Link</a></li>
<li>Install ActionScript &amp; MXML plugin <em>(required – also included in the extension pack below)</em> – <a href="https://marketplace.visualstudio.com/items?itemName=bowlerhatllc.vscode-nextgenas">Link</a></li>
<li>Install npm <em>(required)</em> – <a href="https://blog.teamtreehouse.com/install-node-js-npm-mac">Link</a></li>
<li>Install Apache Royale SDK <em>(required)</em> – <a href="https://royale.apache.org/download/">Link</a></li>
<li>Install Electron plugin – <a href="https://marketplace.visualstudio.com/items?itemName=kodetech.electron-debug">Link</a></li>
<li>Install Firefox Debugger plugin – <a href="https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-firefox-debug">Link</a></li>
<li>Install Git – <a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">Link</a></li>
<li>Extension pack that includes AS3 &amp; MXML plugin, AS3 projects and AS3 snippets – <a href="https://marketplace.visualstudio.com/items?itemName=neminovno.flex-and-actionscript-extension-pack">Link</a></li>
</ul>
<h2>Create an Electron project</h2>
<p>A basic Electron application needs just these files:</p>
<ul>
<li><strong>package.json</strong> – This points to the app's main file and lists its details and dependencies.</li>
<li><strong>main.js</strong> – Starts the app and creates a browser window to render HTML. This is the app's <strong><em>main process</em></strong>.</li>
<li><strong>index.html</strong> – A web page to render. This is the app's <strong><em>renderer process</em></strong>.</li>
</ul>
<p>You also need a reference to an Electron development instance. This can be in the form of a <strong>/node_modules</strong> directory in your project or a reference to another external location. We will show two ways to reference it.</p>
<h2>Creating a New Project</h2>
<p>Visual Studio Code doesn't have a <strong>New Project</strong> menu option that you might be used to from using Flash Builder or other IDEs. Some extensions will set up new projects for you.</p>
<p>Instead you create a folder and define configuration files in the folder. Visual Studio Code then looks for those settings and uses them to set up the environment and provide code intelligence.</p>
<p>Open Visual Studio Code (if it is open already, create a new instance with Command + Shift + N or Control + Shift + N) and then click on Open Folder.</p>
<p><img src="https://royale.apache.org/img/blog/electron-visual-studio-code-welcome.png" alt=""></p>
<p>Create a new folder named &quot;Electron-Royale&quot;, select it and then click <strong>Open</strong>.</p>
<p><img src="https://royale.apache.org/img/blog/open-electron-royale.png" alt=""></p>
<p>A new <strong>Explorer</strong> section opens.</p>
<p><img src="https://royale.apache.org/img/blog/electron-new-blank-project.png" alt=""></p>
<p><em>New Visual Studio Project (showing Welcome screen)</em></p>
<p>On the right side of the screen (or left) you see the Explorer section. Under that you the &quot;<strong>Electron-Royale</strong>&quot; area. That is our project folder.</p>
<p>In the heading are the <strong>New File</strong>, <strong>New Folder</strong>, <strong>Refresh</strong> and <strong>Collapse</strong> buttons. They appear when you hover the mouse pointer over the header area.</p>
<p><img src="https://royale.apache.org/img/blog/electron-project-folder.png" alt=""></p>
<p><em>Project Folder</em></p>
<p>Open files appear in the <strong>Open Editors</strong> view:</p>
<p><img src="https://royale.apache.org/img/blog/electron-open-editors.png" alt=""></p>
<p><em>Open Editors area</em></p>
<p>If the Welcome screen is still open, click the X button to close it.</p>
<p>For an Electron app we create this folder structure:</p>
<pre><code>your-app/
├── package.json
├── main.js
└── index.html
</code></pre>
<p>If you haven't created an Electron app before, read this short <a href="https://electronjs.org/docs/tutorial/first-app">overview</a> page and then return here.</p>
<p>There are extensions that can create the project for us but we're going to do it by hand for this guide. Why? You will be editing these options frequently until the project is set up.</p>
<p>Create the <strong>package.json</strong> in the root directory by clicking the <strong>New File</strong> button and adding the following:</p>
<pre><code class="language-json">{
   &quot;name&quot;: &quot;electron-royale-app&quot;,
   &quot;version&quot;: &quot;1.0.0&quot;,
   &quot;description&quot;: &quot;Electron and Royale&quot;,
   &quot;main&quot;: &quot;main.js&quot;,
   &quot;scripts&quot;: {
      &quot;start&quot;: &quot;electron .&quot;
   },
   &quot;devDependencies&quot;: {
      &quot;electron&quot;: &quot;^5.0.1&quot;
   }
}
</code></pre>
<p>You could also create the <strong>package.json</strong> project by using the <strong>npm init</strong> command.</p>
<p>Open a new <strong>Terminal</strong> window (built in to Visual Studio Code):</p>
<p><img src="https://royale.apache.org/img/blog/electron-terminal-window.png" alt=""></p>
<p><em>New Terminal Window</em></p>
<p>In the Window that opens enter the following command and follow the prompts:</p>
<pre><code class="language-sh">npm init
</code></pre>
<p>You can simply press enter multiple times and type the values into the editor afterwards:</p>
<p><img src="https://royale.apache.org/img/blog/electron-npm-init.png" alt=""></p>
<p><em>Prompts from npm init</em></p>
<p>Type <strong>yes</strong> to confirm. Visual Studio creates a new <strong>package.json</strong> file in the root directory. A few of the values will be different, so set them back to the values we have above.</p>
<p>Now we create the main Electron js file <strong>main.js</strong>. Note: There are other examples that use <strong>index.js</strong> instead.</p>
<p>Click the <strong>New File</strong> button and name the file <strong>main.js</strong>:</p>
<p><img src="https://royale.apache.org/img/blog/electron-main-js.png" alt=""></p>
<p><em>Main js</em></p>
<p>Again, read this <a href="https://electronjs.org/docs/tutorial/first-app">overview page</a> if you are new to Electron, and then return here.</p>
<p>Enter the following for <strong>main.js</strong>:</p>
<pre><code class="language-js">const { app, BrowserWindow } = require('electron')

// Keep a global reference of the window object. If you don't, the window will
// close automatically when the JavaScript object is garbage collected.
let win

function createWindow () {
  // Create the browser window.
  win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true
    }
  })

  // and load the index.html of the app.
  win.loadFile('index.html')

  // Open the DevTools.
  //win.webContents.openDevTools()

  // Emitted when the window is closed.
  win.on('closed', () =&gt; {
    // Dereference the window object, usually you would store windows
    // in an array if your app supports multi windows, this is the time
    // when you should delete the corresponding element.
    win = null
  })
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed.
app.on('window-all-closed', () =&gt; {
  // On macOS it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () =&gt; {
  // On macOS it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (win === null) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and require them here.
</code></pre>
<p>Note: Some code may be affected by the copy and paste process. If any code is encoded into HTML entities then you will see an error. Simply convert them back to the greater than or less than characters. Use the example project at the end for comparison.</p>
<p>We then need to create an HTML page to display in our Electron app.</p>
<p>Click the <strong>New File</strong> button, name it <strong>index.html</strong> and then enter the following value:</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Hello World!&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello World!&lt;/h1&gt;
    We are using node &lt;script&gt;document.write(process.versions.node)&lt;/script&gt;,
    Chrome &lt;script&gt;document.write(process.versions.chrome)&lt;/script&gt;,
    and Electron &lt;script&gt;document.write(process.versions.electron)&lt;/script&gt;.
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>We have one last step before running our project. We need the Electron <strong>node_modules</strong> folder (or a reference to it).</p>
<p>We can install this folder locally to our project or, if we've installed the Electron plugin, we can use that.</p>
<p>Let's use the extension first and then do it manually after.</p>
<p>Install the Electron plugin above and then click the <strong>Debug</strong> button that runs along the edge of Visual Studio Code. When you click it, it opens the <strong>Debug</strong> view:</p>
<p><img src="https://royale.apache.org/img/blog/electron-vscode-debug-view.png" alt=""></p>
<p>Here you can launch different tasks, including debugging your application.</p>
<p>Click the <strong>No configurations</strong> dropdown list and you'll see <strong>Add Configuration</strong>. Click that.</p>
<p><img src="https://royale.apache.org/img/blog/electron-add-configuration.png" alt=""></p>
<p><em>Add Configuration option</em></p>
<p>This will show a list of options, including one called <strong>Electron</strong>. Select this option.</p>
<p><img src="https://royale.apache.org/img/blog/electron-configuration.png" alt=""></p>
<p><em>Electron Launch Configuration</em></p>
<p>When you select <strong>Electron</strong> from the dropdown list, a <strong>launch.json</strong> file is created and placed in a <strong>.vscode</strong> folder in the root of your project, and the <strong>launch.json</strong> file opens in an editor tab.</p>
<p><img src="https://royale.apache.org/img/blog/electron-launch-json.png" alt=""></p>
<p><em>Launch Configuration</em></p>
<p>You can see the configuration is a simple JSON string like our other configurations.</p>
<p>Let's update the name to <strong>Launch Electron</strong> and save the document. You can see the name updated in the Debug view:</p>
<p><img src="https://royale.apache.org/img/blog/launch-electron.png" alt=""></p>
<p><em>Launch Electron button</em></p>
<p>Now, to launch your first Electron app you can use <strong>npm start</strong> from the Terminal view, or you can click the <strong>Launch</strong> button in the Debug view. For this guide use the <strong>Launch</strong> button.</p>
<p>If everything went correctly your first Electron app appears. Congratulations!</p>
<p><img src="https://royale.apache.org/img/electron-hello-world.png" alt=""></p>
<p><em>Hello World in Electron</em></p>
<p>Shortly after opening it it will show the Chrome dev tools:</p>
<p><img src="https://royale.apache.org/img/blog/electron-hello-world-dev-tools.png" alt=""></p>
<p><em>Dev tools</em></p>
<p>You can use the Dev tools to set breakpoints, inspect the page elements and more.</p>
<p>Let's prevent the dev tools from opening for now. You can re-enable them later.</p>
<p>Open main.js and find and comment out or remove the line below, then save the document:</p>
<pre><code class="language-js">win.webContents.openDevTools();
</code></pre>
<p>When you're debugging a session in Visual Studio Code a debug bar appears:</p>
<p><img src="https://royale.apache.org/img/blog/electron-debug-bar.png" alt=""></p>
<p><em>Debug bar appearing</em></p>
<p>Use that to <strong>Pause</strong>, <strong>Continue</strong>, <strong>Step Over</strong>, <strong>Step Into</strong>, <strong>Step Out of</strong>, <strong>Reload</strong> or <strong>Stop</strong> your app. You can dock this bar through an option in the VSC preferences… <em>Code &gt; Preferences &gt; Settings &gt; Tool bar location &gt; docked</em>.</p>
<h2>Install Electron in the Project</h2>
<p>We can set up Electron manually as well, and in this case we install it inside the project folder.</p>
<p>The reason to install it in the project is so we can switch between different versions and maintain control of our dependencies. The downside is that the project has to download an Electron instance and each project instance will take up additional space. If you work on a project on a team it's recommended to keep the instance in your project but not to commit it into version control.</p>
<p>Note: We can have Electron installed inside our project and use the electron install from the Electron plugin or reference another instance externally. Our launch configurations will allow that.</p>
<p>We are going to install Electron in to our root project directory.</p>
<p>Close the app if it is open by going to the menu and choosing <strong>Quit your-app</strong>.</p>
<p><img src="https://royale.apache.org/img/blog/electron-app-quit-menu.png" alt=""></p>
<p><em>Quit menu</em></p>
<p>Open the built in Terminal and enter the following <strong>npm</strong> command:</p>
<pre><code class="language-sh">npm install --save-dev electron
</code></pre>
<p>Electron will begin downloading the <strong>node_modules</strong> and its progress will show in the Terminal view:</p>
<p><img src="https://royale.apache.org/img/blog/downloading-electron-1.png" alt=""></p>
<p><em>Downloading…</em></p>
<p><img src="https://royale.apache.org/img/blog/downloading-electron-2.png" alt=""></p>
<p><em>Download Complete</em></p>
<p>When the download is complete you see a new folder in your project called <strong>node_modules</strong>:</p>
<p><img src="https://royale.apache.org/img/blog/electron-node-module-folder.png" alt=""></p>
<p><em>Node installed locally</em></p>
<p>You will also see that <strong>npm install</strong> creates a <strong>package-lock.json</strong> file.</p>
<p>The file <strong>package-lock.json</strong> is like a quick save for your project. Using it, you or your teammates can restore the dependencies to a specific versioned state. It's described more <a href="https://stackoverflow.com/a/50868741/441016">here</a>, <a href="https://stackoverflow.com/a/55606805/441016">here</a> and <a href="https://stackoverflow.com/a/55318035/441016">here</a>. Commit this configuration instead of the <strong>node_modules</strong> directory when using version control.</p>
<p>Once the Node modules have been downloaded we may need to manually create the <strong>.vscode</strong> directory and the <strong>launch.json</strong> configuration. Create the <strong>.vscode</strong> directory and <strong>launch.json</strong> file and enter the value below:</p>
<pre><code class="language-json">{
   &quot;version&quot;: &quot;0.2.0&quot;,
   &quot;configurations&quot;: [
      {
         &quot;name&quot;: &quot;Debug Main Electron Process&quot;,
         &quot;type&quot;: &quot;node&quot;,
         &quot;request&quot;: &quot;launch&quot;,
         &quot;cwd&quot;: &quot;${workspaceRoot}&quot;,
         &quot;runtimeExecutable&quot;: &quot;${workspaceRoot}/node_modules/.bin/electron&quot;,
         &quot;windows&quot;: {
            &quot;runtimeExecutable&quot;: &quot;${workspaceRoot}/node_modules/.bin/electron.cmd&quot;
         },
         &quot;args&quot; : [&quot;.&quot;],
         &quot;outputCapture&quot;: &quot;std&quot;
      }
   ]
}
</code></pre>
<p>Since the <strong>launch.json</strong> already exists we can <strong>add</strong> our new configuration settings to it.</p>
<p>BTW notice in the launch configuration above that the <strong>type</strong> is <strong>node</strong> and that <strong>runtimeExecutable</strong> options are defined.</p>
<p>Let's <em>add</em> our new manual configuration next to our existing extension-created configuration. Open <strong>launch.json</strong> config and use the values below:</p>
<pre><code class="language-json">{
   &quot;version&quot;: &quot;0.2.0&quot;,
   &quot;configurations&quot;: [
      {
         &quot;type&quot;: &quot;electron&quot;,
         &quot;request&quot;: &quot;launch&quot;,
         &quot;name&quot;: &quot;Launch Electron&quot;,
         &quot;appDir&quot;: &quot;${workspaceFolder}&quot;
      },
      {
         &quot;name&quot;: &quot;Debug Main Electron Process&quot;,
         &quot;type&quot;: &quot;node&quot;,
         &quot;request&quot;: &quot;launch&quot;,
         &quot;cwd&quot;: &quot;${workspaceRoot}&quot;,
         &quot;runtimeExecutable&quot;: &quot;${workspaceRoot}/node_modules/.bin/electron&quot;,
         &quot;windows&quot;: {
            &quot;runtimeExecutable&quot;: &quot;${workspaceRoot}/node_modules/.bin/electron.cmd&quot;
         },
         &quot;args&quot; : [&quot;.&quot;],
         &quot;outputCapture&quot;: &quot;std&quot;
      }
   ]
}
</code></pre>
<p>You'll see why we have added both later.</p>
<p>I recommend you read about the Electron Architecture <a href="https://electronjs.org/docs/tutorial/application-architecture">here</a> and then continue.</p>
<p>You can read more here:</p>
<ul>
<li>Electron Quick Start – <a href="https://electronjs.org/docs/tutorial/quick-start">link</a></li>
<li>Electron Quick Start project – <a href="https://github.com/electron/electron-quick-start">link</a></li>
<li>Your first Electron project – <a href="https://electronjs.org/docs/tutorial/first-app">link</a></li>
<li>Electron Architecture – <a href="https://electronjs.org/docs/tutorial/application-architecture">link</a></li>
</ul>
<h2>Create an Apache Royale project</h2>
<p>Now we are going to create our Apache Royale project.</p>
<p>Make sure you have the AS3 &amp; MXML extension installed as mentioned above. This requires Java 1.8. An install page is listed <a href="https://github.com/BowlerHatLLC/vscode-as3mxml/wiki/Install-the-ActionScript-and-MXML-extension-for-Visual-Studio-Code">here</a>.</p>
<p>Once the extension is installed you need to point to the Apache Royale SDK in the project. We will do it manually and you can see how to have the extension do it at the <a href="https://github.com/BowlerHatLLC/vscode-as3mxml/wiki/Install-the-ActionScript-and-MXML-extension-for-Visual-Studio-Code">link</a> provided earlier.</p>
<p>Open the <strong>Explorer</strong> view and open the <strong>.vscode</strong> directory.</p>
<p>In that directory create a <strong>settings.json</strong> file:</p>
<p><img src="https://royale.apache.org/img/blog/electron-settings.png" alt=""></p>
<p><em>Apache Royale SDK settings.json</em></p>
<p>Enter the following text:</p>
<pre><code class="language-json">{
   &quot;as3mxml.sdk.framework&quot;: &quot;/Users/user/Documents/Royale_SDK/apache-royale-0.9.4-bin-js/royale-asjs&quot;
}
</code></pre>
<p>That will not work as is. You need to enter the path to the directory where you downloaded and installed the Apache Royale SDK.</p>
<p>There is a more in-depth guide <a href="https://github.com/BowlerHatLLC/vscode-as3mxml/wiki/Choose-an-ActionScript-SDK-for-the-current-workspace-in-Visual-Studio-Code">here</a> that shows how to set up the SDK with the help of the AS3 &amp; Flex extension. You can use the information to confirm the SDK is available to your project.</p>
<p>Once the SDK is set up you'll need to add an <a href="https://github.com/BowlerHatLLC/vscode-as3mxml/wiki/asconfig.json"><strong>asconfig.json</strong></a> to your project. The <strong>asconfig.json</strong> file is used to add code intelligence to AS3 and MXML files.</p>
<p>Open the Explorer view, select the root project directory, and create a new file with the <strong>New File</strong> button. Name it <strong>asconfig.json</strong>.</p>
<p><img src="https://royale.apache.org/img/blog/electron-asconfig.png" alt=""></p>
<p><em>asconfig in project directory</em></p>
<p>Open the <strong>asconfig.json</strong> file and enter the following:</p>
<pre><code class="language-json">{
   &quot;compilerOptions&quot;: {
      &quot;source-map&quot;: true,
      &quot;html-template&quot;: &quot;index.html&quot;,
      &quot;theme&quot;: &quot;${royalelib}/themes/JewelTheme/src/main/resources/defaults.css&quot;
   },
   &quot;additionalOptions&quot;: &quot;-warn-public-vars=false&quot;,
   &quot;files&quot;:
   [
      &quot;src/HelloWorld.mxml&quot;
   ]
}
</code></pre>
<p>Notice the page we are pointing to in the <strong>html-template</strong> option. This is the Electron <strong>index.html</strong> page. We will use this as the Royale app <em>template page</em>.</p>
<p>Note: We can use any page as a template but we need to update the page with special tokens that the Apache Royale compiler looks for.</p>
<p>Note: In the theme option we have a token for <strong>royalelib</strong>. If you have any issues with this, if the components do not look like they have any theme, then you may have to use the full path to your Royale install.</p>
<p>For example, you may have to use something like:</p>
<pre><code>&quot;C:/ApacheFlexInstall/apache-royale-0.9.6-bin-js-swf/royale-asjs/frameworks/themes/JewelTheme/src/main/resources/defaults.css&quot;
</code></pre>
<p>Note: We can add another configuration option called <strong>config</strong> that will provide us with code intelligence for the node APIs (see first line).</p>
<pre><code class="language-json">{
   &quot;config&quot;: &quot;node&quot;,
   &quot;compilerOptions&quot;: {
      &quot;source-map&quot;: true,
      &quot;html-template&quot;: &quot;index.html&quot;,
      &quot;theme&quot;: &quot;${royalelib}/themes/JewelTheme/src/main/resources/defaults.css&quot;
   },
   &quot;additionalOptions&quot;: &quot;-warn-public-vars=false&quot;,
   &quot;files&quot;:
   [
      &quot;src/HelloWorld.mxml&quot;
   ]
}
</code></pre>
<p>This shows us classes and code completion for some Node APIs (possibly only for the Main process). The issue when we use this option is we get an error on the first line of our MXML document:</p>
<blockquote>
<p>This tag could not be resolved to an ActionScript class. It will be ignored. js:Application</p>
</blockquote>
<p>You can have this option enabled and choose to Debug anyway and it will run. For now, remove this option and add it in later if appropriate as needed.</p>
<p>Let's continue and update our HTML page to our HTML template.</p>
<p>Open the <strong>index.html</strong> page in the root of the project directory and enter the following HTML:</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
    &lt;meta name=&quot;Custom Template for injecting custom style CSS&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;${application}.css&quot;&gt;
    &lt;link href=&quot;//fonts.googleapis.com/css?family=Lato:400,700&quot; rel=&quot;stylesheet&quot;&gt;
${head}
&lt;/head&gt;
&lt;body&gt;
${body}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Notice we have the <code>${head}</code> and <code>${body}</code> tokens.</p>
<p>Now we need to create a new directory for our application.</p>
<p>In the root of the project create a directory named src and create an MXML document in that directory named <strong>HelloWorld.mxml</strong>.</p>
<p><img src="https://royale.apache.org/img/blog/electron-src-hello-world.png" alt=""></p>
<p><em>HelloWorld.mxml</em></p>
<p>In <strong>HelloWorld.mxml</strong> enter the following value:</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;js:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot; 
   xmlns:js=&quot;library://ns.apache.org/royale/express&quot; 
   xmlns:html=&quot;library://ns.apache.org/royale/html&quot; 
   xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;&gt;
   &lt;js:initialView&gt;
      &lt;js:View&gt;
         &lt;js:Label id=&quot;helloLabel&quot; text=&quot;Hello World&quot; x=&quot;240&quot; y=&quot;20&quot;/&gt;
         &lt;j:Button id=&quot;helloButton&quot; text=&quot;Hello&quot; x=&quot;20&quot; y=&quot;20&quot;/&gt;
      &lt;/js:View&gt;
   &lt;/js:initialView&gt;
&lt;/js:Application&gt;
</code></pre>
<h2>Create the Compile Task</h2>
<p>To compile our Royale application we need to create a compile task. We can use the AS3 &amp; MXML extension to create a compile task or we can do it manually.</p>
<p>Let's create a compile task manually and then maybe later create it with the extension.</p>
<p>In the <strong>.vscode</strong> directory create a <strong>tasks.json</strong>:</p>
<p><img src="https://royale.apache.org/img/blog/electron-tasks.png" alt=""></p>
<p><em>Tasks</em></p>
<p>In <strong>tasks.json</strong> add the following value:</p>
<pre><code class="language-json">{
   &quot;version&quot;: &quot;2.0.0&quot;,
   &quot;tasks&quot;: [
      {
         &quot;label&quot;: &quot;Compile&quot;,    
         &quot;type&quot;: &quot;actionscript&quot;,
         &quot;debug&quot;: true,
         &quot;group&quot;: {
            &quot;kind&quot;: &quot;build&quot;,
            &quot;isDefault&quot;: true
         }
      }
   ]
}
</code></pre>
<p>For documentation about the <strong>tasks.json</strong> format go <a href="https://go.microsoft.com/fwlink/?LinkId=733558">here</a>.</p>
<p>Notice the <strong>label</strong> property. It is named <strong>Compile</strong>. We can name it anything, but for now name it <strong>Compile</strong>. We'll refer to this task later by name as a <strong>preLaunchTask</strong>.</p>
<p>Before we can launch our Apache Royale app we need to build it. Building it compiles the MXML and ActionScript into HTML and JS.</p>
<p>We can build it from the <strong>Run Build Task</strong> in the Visual Studio Code menu.</p>
<p>In the menu go to <strong>Terminal</strong> and choose <strong>Run Build Task</strong>.</p>
<p><img src="https://royale.apache.org/img/blog/electron-run-build-task.png" alt=""></p>
<p><em>Run Build Task</em></p>
<p>You can also use Command + Shift + B or CTRL + Shift + B.</p>
<p>That will open Terminal and show you messages from the Apache Royale compiler. Check these messages for any errors and information about the project.</p>
<p>When that is complete you'll see a &quot;compile successful&quot; message:</p>
<p><img src="https://royale.apache.org/img/blog/electron-compile-successful.png" alt=""></p>
<p><em>Compile Successful</em></p>
<p>Congratulations! You will also see a new directory in your project named <strong>/bin</strong>:</p>
<p><img src="https://royale.apache.org/img/blog/electron-export-bin.png" alt=""></p>
<p><em>Exported to bin directory</em></p>
<p>We could open this index page in a browser using the Firefox debugger, but for our Electron app we are not done yet.</p>
<p>If we launched our Electron app now, not the Royale app, it would open the template page because it is still pointing to the index page in the root of our project.</p>
<p><img src="https://royale.apache.org/img/blog/electron-index-template.png" alt=""></p>
<p><em>Pointing to the template</em></p>
<p>The actual Royale application is in <strong>bin/js-debug/index.html</strong> that is created after we compile <strong>HelloWorld.mxml</strong>. So we need our Electron app to load in the application page and not the template.</p>
<p>Open <strong>main.js</strong> and find the line that loads in <strong>index.html</strong>:</p>
<pre><code class="language-js">// load the index.html of the app.
win.loadFile('index.html')
</code></pre>
<p>Change it to point to our exported Royale application:</p>
<pre><code class="language-js">// load the Apache Royale index.html
win.loadFile('bin/js-debug/index.html')
</code></pre>
<p>Note: We can easily load in different pages in Electron using the loadFile() method. You can use inter-process communication to have an action on your web page load another web page. You'll learn more about this later.</p>
<p>If you've compiled the Royale project successfully and changed the path to load the index.html page in the bin directory, we are ready to start our Electron project.</p>
<p>Open the <strong>Debug</strong> view and start <strong>Launch Electron</strong>. Since everything always goes well on the first try you should have a running application:</p>
<p><img src="https://royale.apache.org/img/blog/electron-royale-hello-world.png" alt=""></p>
<p><em>Royale Hello World</em></p>
<p>Note: If you the button is missing its theme, check the theme value in the asconfig.json and troubleshoot as mentioned above.</p>
<p>Note: If we make changes to our application and then run the <strong>Launch Electron</strong> task again we may not see our changes.</p>
<p>In Flash Builder there was an option to Build Automatically that was enabled by default. What this means is your projects were built automatically when you saved the document. Building the application also provided warnings and error messages in the problems view. We can do something similar with a prelaunch task.</p>
<p>Let's add a prelaunch task to build our application before we launch it.</p>
<p>Remember how we named our compile task earlier? We are are going to tell our Electron launch configuration to run the Royale compile task before starting the application.</p>
<p>Open <strong>launch.json</strong> and add a prelaunch task property and set it to our <strong>Compile</strong> build task (mentioned in the <strong>tasks.json</strong> file). The <strong>launch.json</strong> should look like the following:</p>
<pre><code class="language-json">{
   &quot;version&quot;: &quot;0.2.0&quot;,
   &quot;configurations&quot;: [
      {
         &quot;name&quot;: &quot;Launch Electron&quot;,
         &quot;type&quot;: &quot;electron&quot;,
         &quot;request&quot;: &quot;launch&quot;,
         &quot;preLaunchTask&quot;: &quot;Compile&quot;,
         &quot;appDir&quot;: &quot;${workspaceFolder}&quot;
      },
      {
         &quot;name&quot;: &quot;Debug Main Electron Process&quot;,
         &quot;type&quot;: &quot;node&quot;,
         &quot;request&quot;: &quot;launch&quot;,
         &quot;cwd&quot;: &quot;${workspaceRoot}&quot;,
         &quot;preLaunchTask&quot;: &quot;Compile&quot;,
         &quot;runtimeExecutable&quot;: &quot;${workspaceRoot}/node_modules/.bin/electron&quot;,
         &quot;windows&quot;: {
            &quot;runtimeExecutable&quot;: &quot;${workspaceRoot}/node_modules/.bin/electron.cmd&quot;
         },
         &quot;args&quot; : [&quot;.&quot;],
         &quot;outputCapture&quot;: &quot;std&quot;
      }
   ]
}
</code></pre>
<p>Make sure the name is the same. It is case sensitive. We can, of course, add more launch configurations with or without these options at any time.</p>
<p>FYI You can learn about the possible launch attributes and their values by hovering your mouse pointer over them or by going <a href="https://go.microsoft.com/fwlink/?linkid=830387">here</a>.</p>
<p>Now launch the application again using either of the two launch configurations.</p>
<p>You'll see that the Royale application is built right before the Electron application is launched. If there are any errors in your Royale app the Electron app will not launch.</p>
<h2>Communicating with the Main Process</h2>
<p>Electron apps have two primary processes. The <strong>Main</strong> process and the <strong>Renderer</strong> process. The Royale application runs in the <strong>Renderer</strong> process and the Electron application runs in the <strong>Main</strong> process.</p>
<p>Although the processes are separate you can communicate between them using a variety of methods. Read more about this <a href="https://electronjs.org/docs/tutorial/application-architecture">here</a> and then continue.</p>
<p>For this guide we'll send messages.</p>
<p>Open your &quot;Hello World&quot; mxml application and add a script block below the js <strong>Application</strong> tag and above the <strong>initialView</strong> tag:</p>
<pre><code class="language-mxml">&lt;fx:Script&gt;
    &lt;![CDATA[

    public function clickHandler(event:Event):void {
        var electron:Object;
        var ipcRenderer:Object;

        // check for electron
        // if we add tag config:&quot;node&quot; to our asconfig we get node code intelligence but error for js:Appliction
        if (window[&quot;require&quot;]) {
          electron = window[&quot;require&quot;](&quot;electron&quot;);
          ipcRenderer = electron.ipcRenderer;
          ipcRenderer.send(&quot;mainMessageHandler&quot;, &quot;hello&quot;);
          ipcRenderer.on(&quot;rendererMessageHandler&quot;, rendererMessageHandler)
        }
        else {
          helloLabel.text = &quot;Electron is not found&quot;;
        }
    }

    public function rendererMessageHandler(event:Object, data:String):void {
        trace(&quot;Data received:&quot;, data);
        helloLabel.text = data;
    }

    ]]&gt;
&lt;/fx:Script&gt;
</code></pre>
<p>In the button add a click handler:</p>
<pre><code class="language-mxml">&lt;j:Button id=&quot;helloButton&quot; text=&quot;Hello&quot; x=&quot;20&quot; y=&quot;20&quot; click=&quot;clickHandler(event)&quot;/&gt;
</code></pre>
<p>When we are running in an Electron app the <strong>Renderer</strong> process, or the browser window, makes additional objects available. The main ones are <strong>electron</strong> and <strong>ipcRenderer</strong>. We will use these for communication.</p>
<p>Sending a message is somewhat like dispatching an event. We can send synchronous and asynchronous messages.</p>
<p>The following example code will dispatch a &quot;sayHello&quot; message with a &quot;hello&quot; value:</p>
<pre><code class="language-as3">// example code
const electron = window[&quot;require&quot;](&quot;electron&quot;);
const ipcRenderer = electron.ipcRenderer;

ipcRenderer.send(&quot;sayHello&quot;, &quot;hello&quot;);
</code></pre>
<p>We are sending a String but we could send an Object. Read more <a href="https://electronjs.org/docs/api/ipc-main">here</a> before continuing.</p>
<p>In our <strong>main.js</strong> we will add a listener to handle this event. At the end of the <strong>main.js</strong> document add the following:</p>
<pre><code class="language-js">const { ipcMain } = require('electron')
ipcMain.on(&quot;mainMessageHandler&quot;, (event, arg) =&gt; {
  console.log(arg);
  var time = new Date().toLocaleTimeString();
  win.webContents.send(&quot;rendererMessageHandler&quot;, &quot;hello there. it's &quot; + time);
})
</code></pre>
<p>Notice the <strong>rendererMessageHandler</strong>. We have added a listener for this event in <strong>HelloWorld.mxml</strong>.</p>
<p>Launch the application and click the <strong>Hello World</strong> button.</p>
<p><img src="https://royale.apache.org/img/blog/hello-world-electron.png" alt=""></p>
<p><em>Hello World message</em></p>
<h2>Debugging</h2>
<p>To debug the <strong>Renderer</strong> process, <strong>HelloWorld.mxml</strong>, add a breakpoint in the button click handler. Open the debug view and click <strong>Launch Electron</strong>. When you click the <strong>Hello</strong> button, the debugger opens at that point showing you local variables and classes. Take a minute and review the objects available to your application:</p>
<p><img src="https://royale.apache.org/img/blog/electron-debug-hello-world.png" alt=""></p>
<p><em>Debug Hello World</em></p>
<p>To debug the Main process, <strong>main.js</strong>, add a breakpoint in the <strong>mainMessageHandler</strong>. Open the debug view and click <strong>Debug main Electron process</strong>.</p>
<p><img src="https://royale.apache.org/img/blog/electron-debug-main-process.png" alt=""></p>
<p><em>Debug Main</em></p>
<p>We use the first one to debug the <strong>Renderer</strong> process and the second to debug the <strong>Main</strong> process. You can also use the integrated Chrome dev tools mentioned earlier.</p>
<p><img src="https://royale.apache.org/img/blog/electron-chrome-debugger-1.png" alt=""></p>
<p><em>Chrome dev tools</em></p>
<p>Open <strong>launch.json</strong>. In the first launch configuration notice the <strong>type</strong> says <strong>electron</strong>. In the second launch configuration notice the <strong>type</strong> is <strong>node</strong>.</p>
<p>Note: This author has not found a way to hit both breakpoints for the Royale application and the Electron app in one session in Visual Studio Code. However, using a combination of the integrated Chrome dev tools (shown above) to set breakpoints you can use the second configuration, <strong>Debug main Electron process</strong>, to break on both the Royale and Electron processes, but the break occurs in the Chrome Dev tools and not Visual Studio Code. You could also debug the Royale instance only using the Firefox debugger and launching in a browser.</p>
<h2>Summary</h2>
<p>In this guide you've created a desktop application using Royale and Electron. You've sent a message to the Main process and sent that message back to the Renderer process. You've set a break point in the debugger.</p>
<p>The example project is attached here: <a href="https://royale.apache.org/blog/downloads/ApacheRoyaleElectron_1.0.0.zip">Apache Royale Electron zip</a></p>
<p>If you use the Moonshine IDE, an example project is available <a href="https://github.com/prominic/Royale-Examples/tree/master/ElectronRoyale">here</a>.</p>
<h2>Next Steps</h2>
<ul>
<li>The Wiki has more information on the AS3 &amp; MXML plugin <a href="https://github.com/BowlerHatLLC/vscode-as3mxml/wiki">here</a></li>
<li>Electron documentation <a href="https://electronjs.org/docs/tutorial">here</a> and <a href="https://electronjs.org/docs/">here</a></li>
<li>Sample Electron apps <a href="https://github.com/hokein/electron-sample-apps">here</a></li>
<li><a href="https://electronjs.org/docs/api/ipc-main">ipcMain</a> and <a href="https://electronjs.org/docs/api/ipc-renderer">ipcRenderer</a></li>
<li>Apache Royale Getting Started <a href="https://apache.github.io/royale-docs/Get%20Started.html">here</a></li>
<li>Install the <a href="https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-firefox-debug">Firefox Debugger</a> and debug Royale in the browser</li>
<li>Electron Hello World Walkthrough on YouTube <a href="https://www.youtube.com/playlist?list=PLYxzS__5yYQmocPoLUiEAfD1cJNjhdQar">here</a></li>
<li>Learn the Apache Royale components and layouts with Tour of Jewel <a href="https://royale.apache.org/tourdejewel">here</a></li>
<li>Join the Apache Royale <a href="https://royale.apache.org/mailing-lists/">Mailing Lists</a></li>
</ul>
<h2>Contributions</h2>
<p>Thanks to the work of numerous individuals and projects in the <a href="https://royale.apache.org/">Apache Royale</a> community.</p>
]]></description>
        </item>
    
        
        <item>
            <title>Apache Royale v0.9.6 released!</title>
            <link>https://royale.apache.org/blog/apache-royale-v0-9-6-released/</link>
            <pubDate>Tue, 08 Oct 2019 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/apache-royale-v0-9-6-released/</guid>
            <description><![CDATA[<p>The Apache Royale community is pleased to announce the release of <strong>Apache Royale 0.9.6</strong>.</p>
<p><img src="https://royale.apache.org/blog/apache-royale-v0-9-6-released/blog/release-0.9.6.png" alt=""></p>
<p>The Apache Royale project is the next generation of the Apache Flex SDK. It lets developers use <strong>MXML</strong> and <strong>ActionScript 3</strong> to generate <strong>HTML/JS/CSS</strong> applications which can run natively in browsers. The cross-compiled code can also run on platforms like <strong>Electron</strong> or <strong>Apache Cordova</strong> (Adobe PhoneGap) to build mobile applications.</p>
<p>This release should be considered 'beta' quality, although <em>we're very close to a 1.0 release</em> and <em>we have many applications in production</em> at this point. The purpose of this release is to continue to gather feedback about Royale's features and the project's implementation strategies, and to recruit new contributors. We hope to grow the code base into an SDK and tool chain that delivers the highest productivity when developing applications that can run on many platforms. Beta releases, however, may not handle all production needs.</p>
<h2>Changes in 0.9.6:</h2>
<h3>Apache Royale Docs</h3>
<ul>
<li>We have restructured and largely rewritten the online documentation. It now contains reference pages for components and code, and links to Apache Royale (<a href="https://royale.apache.org/asdoc/">ASDoc</a>) references to help new users get up to speed with Royale. Check it out <a href="https://apache.github.io/royale-docs/">here</a>.</li>
</ul>
<h3>Apache Royale Framework 0.9.6</h3>
<ul>
<li>Compiles faster.</li>
<li>For applications targeting JavaScript, you can now incorporate the vast resources available in existing, free JavaScript libraries.</li>
<li>Many additional components are available:
<ul>
<li>for the Jewel component set, Wizard, PopUp, TabBar, Module, ModuleLoader, FooterBar, Badge, ScrollableSectionContent, and HorizontalListScroll are now available.</li>
</ul>
</li>
<li>Emulations of many other components are available.</li>
<li>Many improvements and fixes in the Jewel component set:
<ul>
<li>Full implementation of DateField/DateChooser.</li>
<li>Components now work correctly on IE11 and on Android/iOS mobile devices.</li>
<li>Many improvements to all themes, such as styles for new components and a disabled style that was missing in some components.</li>
<li>Many beads have been added for Jewel components:
<ul>
<li>Search filter bead for Jewel ComboBox</li>
<li>SearchFilterForList bead to use with Jewel List and TextInput</li>
<li>RequiredSelection for DropDownList</li>
</ul>
</li>
<li>Improvements to how your application handles focus.</li>
<li>Button now extends from the new BasicButton.</li>
</ul>
</li>
<li>Many improvements to the Tour De Jewel demo app to show components and beads introduced in this version.</li>
<li>Added BrowserOrientation bead.</li>
<li>Added loadCSS, to load external CSS dynamically.</li>
<li>Added generation of source-maps to all Royale libs for better debugging of framework code.</li>
<li>Added new <a href="https://apache.github.io/royale-docs/testing/royaleunit.html">RoyaleUnit</a> library for unit testing.</li>
<li>Improvements to AMF / RemoteObject Support.</li>
<li>AMFBinaryData api now matches flash.utils.ByteArray (one missing feature is support for non-UTF String encoding). It therefore now works for deep cloning via readObject/writeObject and registerClassAlias.</li>
<li>Updates to the Royale collections library with support for sorting and filtering via ArrayListView. Simple example added to Tour de Jewel.</li>
<li>A conforming runtime implementation of AS3 Vector (typed Arrays) was added for JavaScript output, with options for avoiding certain runtime checks.</li>
<li>int, uint, and Class are now represented as simple, distinct types (Class is now not an 'Object' and int is now not a 'Number', for example), and these support indirect 'as' or 'is' type checking and instantiation, matching swf behavior.</li>
<li>General improvements and additions to the Reflection library.</li>
<li>A new Apache Royale Crux MVC/DI/IOC application architecture library (based on the Swiz framework that was popular in Flex development) was added, with some simple examples.</li>
<li>Added and updated documentation in many areas of the <a href="https://royale.apache.org/asdoc/">ASDoc reference</a>.</li>
<li>Dozens of bugs reported, investigated, and squashed. For details of closed bug reports see <a href="https://github.com/apache/royale-asjs/issues?q=is%3Aissue+is%3Aclosed">GitHub Issues list</a>.</li>
</ul>
<h3>Apache Royale Compiler 0.9.6</h3>
<ul>
<li>Added <code>-allow-abstract-classes</code> compiler option to enable abstract keyword for classes and methods.</li>
<li>Added <code>-allow-private-constructor</code>s compiler option to enable classes with private constructors.</li>
<li>Added <code>-allow-import-aliases</code> compiler option to enable import-renaming syntax.</li>
<li>Added <code>-verbose</code> compiler option to reduce console output by default.</li>
<li>Added RoyaleUnit tasks for Apache Ant.</li>
<li>Fixed incorrect compiler error when unicodeRange value is specified for Embed metadata.</li>
<li>Fixed missing compiler error when adding type parameters to classes other the Vector.</li>
<li>Fixed missing compiler error for instantiation of a variable with new that is not typed as Class or Function.</li>
<li>Fixed missing compiler warning for missing types on function parameter.</li>
<li>Fixed internal cache that broke IDEs that use the compiler to provide code intelligence.</li>
<li>Fixed automatic type coercion in generated JavaScript so that it better matches SWF behavior.</li>
</ul>
<p>Updates to the <em>RELEASE_NOTES</em> made after this file was packaged into the release artifacts can be found at this <a href="https://github.com/apache/royale-asjs/wiki/Release-Notes-0.9.6">link</a>. You can see more <a href="https://github.com/apache/royale-asjs/blob/develop/RELEASE_NOTES.md">here</a>.</p>
<p>You can download a <a href="https://royale.apache.org/download/">binary distribution</a>, the <a href="https://royale.apache.org/source-code/">source code</a> or browse our <a href="https://github.com/apache/royale-asjs/wiki/Apache-Royale-Source-Code-Repositories">GitHub repositories</a>. If you're a NPM user you can check <a href="https://www.npmjs.com/org/apache-royale">Apache Royale at NPM</a>.</p>
<p>As well, you can help us <a href="https://github.com/apache/royale-asjs/issues">filing bug reports for issues you encounter in the framework</a> or <a href="https://github.com/apache/royale-compiler/issues">compiler</a>.</p>
<p>For questions about how to use Royale, send email to <a href="https://royale.apache.org/blog/apache-royale-v0-9-6-released/users@royale.apache.org">mailto:users@royale.apache.org</a>.  For questions and feedback on the development of the source code in the release, send email to <a href="mailto:dev@royale.apache.org">dev@royale.apache.org</a>.</p>
<p>Enjoy! 🙂</p>
]]></description>
        </item>
    
        
        <item>
            <title>Dividing an Apache Royale application with modules</title>
            <link>https://royale.apache.org/blog/dividing-an-apache-royale-application-with-modules/</link>
            <pubDate>Wed, 26 Jun 2019 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/dividing-an-apache-royale-application-with-modules/</guid>
            <description><![CDATA[<p>This example shows how you can break an Apache Royale application into parts called Modules. You then have a main application that acts as a shell for the modules, that hold key features or functions, and that are loaded on demand, not when the user first opens the application.</p>
<p>In this way you benefit from better load times for your application since you don't load all the code at once. Another benefit is better compile times, since you have to build the application or module to which you have made changes, so you compile less code.</p>
<p>The application uses a <strong>ModuleLoader</strong> to load each module as it is needed. ModuleLoader can load a module directly (this is the default behavior), or you can turn off automatic loading by setting <strong>autoLoad</strong> to false, and perform the load of each module on demand.</p>
<p>This example shows a <strong>Jewel Card</strong> with a ModuleLoader and a button that triggers the load. You can push the button and see the sample <strong>Module</strong> load.</p>
<h2>The Main Application</h2>
<p>This is the code for the main application that holds the ModuleLoader:</p>
<pre><code class="language-mxml">&lt;j:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
              xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;
              xmlns:js=&quot;library://ns.apache.org/royale/basic&quot;
              xmlns:html=&quot;library://ns.apache.org/royale/html&quot;&gt;

    &lt;fx:Script&gt;
        &lt;![CDATA[
           public function loadModule():void
           {
               moduleLoader.loadModule();
           }
        ]]&gt;
    &lt;/fx:Script&gt;
    
    &lt;j:beads&gt;
        &lt;js:ApplicationDataBinding /&gt;
    &lt;/j:beads&gt;

    &lt;j:initialView&gt;
        &lt;j:View&gt;
            &lt;j:beads&gt;
                &lt;j:HorizontalCenteredLayout/&gt;
            &lt;/j:beads&gt;

            &lt;j:Card percentWidth=&quot;90&quot;&gt;
                &lt;html:H3 text=&quot;Dividing an Apache Royale application with modules&quot;/&gt;
                
                &lt;j:Label html=&quot;This example uses Modules to load parts of the application&quot;/&gt;

                &lt;j:ModuleLoader localId=&quot;moduleLoader&quot; autoLoad=&quot;false&quot;
                               modulePath=&quot;modules&quot; moduleName=&quot;JewelModule&quot;/&gt;

                &lt;j:Button text=&quot;Load a Module&quot; emphasis=&quot;primary&quot; click=&quot;loadModule()&quot;/&gt;
             &lt;/j:Card&gt;
        &lt;/j:View&gt;
    &lt;/j:initialView&gt;
&lt;/j:Application&gt;
</code></pre>
<p>As you can see, the <strong>ModuleLoader</strong> needs to know the <strong>modulePath</strong> (the path where the module can be found) and the <strong>moduleName</strong> (the name of the module to load). We set <strong>autoLoad</strong> to false to avoid having the module load when <strong>ModuleLoader</strong> is added to the application. The module loads when a user pushes the button that calls <strong>moduleLoader.loadModule()</strong>. That's all!</p>
<h2>The Sample Module</h2>
<p>This is the code for the Module:</p>
<pre><code class="language-mxml">&lt;j:Module xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
        xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;
        xmlns:js=&quot;library://ns.apache.org/royale/basic&quot;
        initComplete=&quot;initModule()&quot;&gt;
    
    &lt;fx:Script&gt;
        &lt;![CDATA[
            private function initModule():void
            {
                trace(&quot;Initialize the module!&quot;);
            }
        ]]&gt;
    &lt;/fx:Script&gt;

    &lt;j:beads&gt;
        &lt;js:ContainerDataBinding/&gt;
        &lt;j:VerticalLayout/&gt;
    &lt;/j:beads&gt;
    
    &lt;j:valuesImpl&gt;
        &lt;js:SimpleCSSValuesImpl/&gt;
    &lt;/j:valuesImpl&gt;
    
    &lt;j:HGroup gap=&quot;3&quot;&gt;
        &lt;j:IconTextInput&gt;
            &lt;j:beads&gt;
                &lt;j:TextPrompt prompt=&quot;Search...&quot;/&gt;
                &lt;j:SizeControl size=&quot;xlarge&quot;/&gt;
            &lt;/j:beads&gt;
            &lt;j:icon&gt;
                &lt;js:FontIcon text=&quot;{MaterialIconType.SEARCH}&quot; material=&quot;true&quot;/&gt;
            &lt;/j:icon&gt;
        &lt;/j:IconTextInput&gt;
        &lt;j:Button text=&quot;Search&quot; emphasis=&quot;secondary&quot;&gt;
            &lt;j:beads&gt;
                &lt;j:SizeControl size=&quot;xlarge&quot;/&gt;
            &lt;/j:beads&gt;
        &lt;/j:Button&gt;
    &lt;/j:HGroup&gt;
    
&lt;/j:Module&gt;
</code></pre>
<p>We need to use the <strong>Module</strong> tag as the main tag. This means that the module can't be loaded on its own. It needs to be parented by an application and loaded by a ModuleLoader.</p>
<p>The content of the module can be whatever code you want. In this case we are adding just a few Jewel controls to show a big search box.</p>
<p>Notice that the module has an <strong>initComplete</strong> handler where you can execute code you need to initialize the module (in this case just a log a message). This is similar to the <strong>applicationComplete</strong> feature for the application itself.</p>
<blockquote>
<p>Since this particular module uses a search icon that comes from MaterialIconType, when you add it directly to an application, the compiler injects a link to make Material Icons available. Since this class is used in a module, not in the application itself, Royale adds it via JavaScript to the html head when the module is loaded, so it is ready to be added to the application.</p>
</blockquote>
<h2>Project structure</h2>
<p>We have multiple compilation units (one application and one or more modules), building this application is more complex than a simpler application. You used to have a project for the application and a project for the module. You would like to copy the module output files into the target application folder to make the module available for the compiled application. In this example, Maven helps you by providing a maven build layout for an application and its modules and copying the files you need to the right folders for both debug and release compilations. Check the project source code below.</p>
<p>A simpler option is to have only one project with application and modules all together. This is how <a href="https://github.com/apache/royale-asjs/tree/develop/examples/mxroyale/tourdeflexmodules">Tour De Flex</a> is done. For this layout you must use <strong>module-output</strong> compiler option so royale can output modules in the folder you prefer. Check <a href="https://apache.github.io/royale-docs/create-an-application/modules.html">Apache Royale Modules documentation page</a> to know more about it.</p>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/features/modules">Apache Royale Modules documentation page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/textinput">Jewel TextInput Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/button">Jewel Button Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/card">Jewel Card Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="400" src="https://royale.apache.org/blog-examples/BE0013_Dividing_an_Apache_Royale_application_with_modules/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0013_Dividing_an_Apache_Royale_application_with_modules/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0013_Dividing_an_Apache_Royale_application_with_modules">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0013_Dividing_an_Apache_Royale_application_with_modules"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Using external JavaScript libraries in Apache Royale</title>
            <link>https://royale.apache.org/blog/using-external-javascript-libraries-in-apache-royale/</link>
            <pubDate>Mon, 03 Jun 2019 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/using-external-javascript-libraries-in-apache-royale/</guid>
            <description><![CDATA[<p>This example shows how to use external JavaScript libraries in your Apache Royale application. You can add quick functionality to your application by including code that is not part of Apache Royale itself or is even not written in ActionScript.</p>
<p>In this way, <em>you get lots of libraries available for free in the Internet to strengthen and extend your Apache Royale Application.</em></p>
<p>It also allows an IDE to provide code completion, type checking, etc.</p>
<p>The example shows a <strong>Jewel Card</strong> with a code text zone that loads an ActionScript code example. Click the <em>&quot;highlight block&quot;</em> button to show the code in a beautifully colored way, thanks to processing by a highlight library which is an external JavaScript library.</p>
<blockquote>
<p>The JavaScript library used to show this feature is <a href="https://highlightjs.org/">highlightjs</a>. In JavaScript this library creates the hljs object our code references.</p>
</blockquote>
<h2>How to use JavaScript external libraries</h2>
<p>We have two solutions available for using external JavaScript libraries in Apache Royale. We'll focus first on the better and recommended way, which is using the <strong>@externs</strong> compiler directive.</p>
<p>This method gives you robust access to JavaScript methods though ActionScript with dot access syntax (and lets you use code hinting in your IDE). But if you need to prototype something quickly, you can use dynamic syntax with <em>bracket access</em> notation.</p>
<h2>Dot access</h2>
<p>This is the recommended way. You get all advantages of an object-oriented language like ActionScript 3: type checking, compiler errors and warnings, and code hinting and code completion in your favorite IDEs.</p>
<p><img src="https://royale.apache.org/img/blog/Captura-de-pantalla-2019-06-03-a-las-18.20.46.png" alt=""></p>
<p>The code for this <a href="https://github.com/apache/royale-asjs/blob/develop/examples/blog/BE0012_Using_external_javascript_libraries_in_Apache_Royale/src/main/royale/hljs.as">hljs as3 stub code</a> is located in this blog example project and is the <strong>@externs</strong> class definition for <strong>hljs</strong>:</p>
<pre><code class="language-as3">////////////////////////////////////////////////////////////////////////////////
//
//  Licensed to the Apache Software Foundation (ASF) under one or more
//  contributor license agreements.  See the NOTICE file distributed with
//  this work for additional information regarding copyright ownership.
//  The ASF licenses this file to You under the Apache License, Version 2.0
//  (the &quot;License&quot;); you may not use this file except in compliance with
//  the License.  You may obtain a copy of the License at
//
//      //www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////
package
{
    /**
     * @externs
     */
    COMPILE::JS
    public class hljs
    {
        /** 
         * &lt;inject_script&gt;
         * var script = document.createElement(&quot;script&quot;);
         * script.setAttribute(&quot;src&quot;, &quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js&quot;);
         * document.head.appendChild(script);
         * var link = document.createElement(&quot;link&quot;);
         * link.setAttribute(&quot;rel&quot;, &quot;stylesheet&quot;);
         * link.setAttribute(&quot;type&quot;, &quot;text/css&quot;);
         * link.setAttribute(&quot;href&quot;, &quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/atom-one-dark.min.css&quot;);
         * document.head.appendChild(link);
         * &lt;/inject_script&gt;
         */
        public function hljs(){}

        public static function highlightBlock(block:Element):void {}
    }
}
</code></pre>
<p>You can see two main things in this code:</p>
<ol>
<li>An inject_html directive declared in the constructor adds the following lines to the html template, so you do not need to add the lines manually. If you use this library, Royale adds these references automatically, and if you remove all references, Royale removes the dependencies to the JavaScript library and nothing is output in the html file.</li>
<li>Use the highlightBlock static function, which you can access as a normal method in the AS3 hljs class.</li>
</ol>
<h2>Bracket access</h2>
<p>If you need to prototype something quickly you can use this method but remember we don't recommend that you use this in your main Apache Royale project.</p>
<p>First, reference the JavaScript library (and/or css if it exists) in your html template. For <strong>hljs</strong> you can copy the following lines:</p>
<pre><code class="language-html">&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js&quot;&gt;&lt;/script&gt;
&lt;link rel=&quot;stylesheet&quot; title=&quot;Atom One Dark&quot; href=&quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/atom-one-dark.min.css&quot;&gt;
</code></pre>
<p>Then you can start using the library in your code. An example with the highlightjs hljs object is:</p>
<pre><code class="language-as3">var hljs:Object = window[&quot;hljs&quot;];
hljs[&quot;highlightBlock&quot;](block);
</code></pre>
<p>As you can see, this avoids using a more structured language like ActionScript 3. You lose type checking and the compiler will not help you if you write something wrong. Plus, if the API is changed, that code will not be able to warn you about the changes.</p>
<h2>The example</h2>
<p>The example uses <strong>HTTPService</strong> to retrieve sample code and display it in an <strong>html:Code</strong> component. When the application loads, it fires the <strong>initialize</strong> event. We use that to order HTTPService to load the text file. When the file finishes loading, HTTPService fires a complete event. We use that to add the text file content to the <strong>code_txt</strong> <em>String variable</em>.</p>
<blockquote>
<p>Note: Since the code_txt variable uses data binding (it's marked with the <strong>Bindable</strong> metadata and we prepared the application to handle data binding with the <strong>ApplicationDataBinding</strong> bead), the application fills the html:Code <strong>sourceCodeMXMLText</strong> with the loaded text.</p>
</blockquote>
<p>This is the code for this example:</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!--

 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the &quot;License&quot;); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

--&gt;
&lt;j:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
              xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;
              xmlns:js=&quot;library://ns.apache.org/royale/basic&quot;
              xmlns:html=&quot;library://ns.apache.org/royale/html&quot;
              initialize=&quot;codeTextLoader.send();&quot;&gt;

    &lt;fx:Script&gt;
        &lt;![CDATA[
           [Bindable]
           public var code_txt:String;

           public function highLightContent():void
           {
                COMPILE::JS
                {
                    hljs.highlightBlock(sourceCodeMXMLText.element);   
                }
           }
        ]]&gt;
    &lt;/fx:Script&gt;
    
    &lt;j:beads&gt;
        &lt;js:ApplicationDataBinding/&gt;
        &lt;js:HTTPService id=&quot;codeTextLoader&quot; url=&quot;as3code.txt&quot; complete=&quot;code_txt = codeTextLoader.data;&quot;/&gt;
    &lt;/j:beads&gt;

    &lt;j:initialView&gt;
        &lt;j:View&gt;
            &lt;j:beads&gt;
                &lt;j:HorizontalCenteredLayout/&gt;
            &lt;/j:beads&gt;

            &lt;j:Card width=&quot;90%&quot;&gt;
                &lt;html:H3 text=&quot;Using external JavaScript Libraries&quot;/&gt;
                
                &lt;j:Label html=&quot;This example uses hljs library to highligh a piece of code&quot;/&gt;

                &lt;html:Pre height=&quot;300&quot; width=&quot;100%&quot; style=&quot;background-color: white&quot;&gt;
                    &lt;html:beads&gt;
                        &lt;j:ScrollingViewport/&gt;
                    &lt;/html:beads&gt;
                    &lt;html:Code id=&quot;sourceCodeMXMLText&quot; text=&quot;{code_txt}&quot;/&gt;
                &lt;/html:Pre&gt;
                
                &lt;j:Button text=&quot;highlight Block&quot; emphasis=&quot;primary&quot; click=&quot;highLightContent()&quot;/&gt;
             &lt;/j:Card&gt;
        &lt;/j:View&gt;
    &lt;/j:initialView&gt;
&lt;/j:Application&gt;
</code></pre>
<p>In the example code you can see how we call the <em>hljs.highlightBlock</em> method with the recommended dot syntax as with any other ActionScript code, creating a seamless integration between your project code and the external JavaScript code.</p>
<h2>Conclusion</h2>
<p>You can see how simple and elegant it can be to use external JS code, while not compromising the safe syntax you have when using the MXML and AS3 languages, to give you more dynamic options for your application at no cost.</p>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://github.com/apache/royale-asjs/blob/eaf2dbde05a3823e0c148ba806c025eb56388a7a/frameworks/projects/Jewel/src/main/royale/org/apache/royale/jewel/Alert.as#L225">Other use of @externs in a Jewel Alert component</a></li>
<li><a href="https://royale.apache.org/loading-external-data-through-httpservice/">Loading external data through HTTPService</a></li>
<li><a href="https://royale.apache.org/binding-the-text-property-of-a-jewel-textinput-to-update-a-text-label/">Binding the text property of a Jewel TextInput to update a text Label</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="600" src="https://royale.apache.org/blog-examples/BE0012_Using_external_javascript_libraries_in_Apache_Royale/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0012_Using_external_javascript_libraries_in_Apache_Royale/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0012_Using_external_javascript_libraries_in_Apache_Royale">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0012_Using_external_javascript_libraries_in_Apache_Royale"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Apache Royale v0.9.4 released!</title>
            <link>https://royale.apache.org/blog/apache-royale-v0-9-4-released/</link>
            <pubDate>Mon, 10 Dec 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/apache-royale-v0-9-4-released/</guid>
            <description><![CDATA[<p>The Apache Royale community is pleased to announce the release of Apache Royale 0.9.4.</p>
<p><img src="https://royale.apache.org/img/blog/release-0.9.4.png" alt=""></p>
<p>The Apache Royale project is a continuation of the previous effort called FlexJS to produce a next-generation of the Apache Flex SDK that enables developers to use MXML and ActionScript to generate HTML/JS/CSS applications which can run natively in browsers. The cross-compiled code can also be used in Apache Cordova (Adobe PhoneGap) mobile applications.</p>
<p>This release should be considered 'beta' quality. The purpose of this release is to gather feedback about the features and implementation strategies, and to recruit new contributors. We hope to grow the code base into an SDK and tool chain that deliver the highest productivity when developing applications that can run on many platforms. Beta releases may not handle production needs.</p>
<p>In 0.9.4 you can find important additions like a full new UI set called <strong>Jewel</strong> that's ready for production. This new set was designed with look and feel / themes in mind, so you can have a cool interface out of the box just using Jewel. Another great addition is bringing full <strong>AMF/RemoteObject</strong> support to Apache Royale so you can ease your migration from Apache Flex.</p>
<p>We are also working hard on MX and Spark <strong>emulation</strong> components that will help make your migration of an existing Apache Flex application a breeze. Many people are contributing to this effort, but more are welcome: please help us develop this powerful feature.</p>
<h2>Changes in 0.9.4:</h2>
<ul>
<li><a href="https://github.com/apache/royale-asjs/issues/205">Better way to style components: ClassSelectorList</a></li>
<li><a href="https://github.com/apache/royale-asjs/issues/204">Fixed AMF / RemoteObject support</a></li>
<li><a href="https://github.com/apache/royale-asjs/issues/154">Added New Jewel UI set And first 72 Jewel Themes, 12 Colors, Light and Dark (Initial work).</a></li>
<li><a href="https://github.com/apache/royale-asjs/issues/130">Renamed TextOverflow bead to EllipsisOverflow. It now supports Label elements as well.</a></li>
<li><a href="https://github.com/apache/royale-asjs/issues/131">Added IEEventAdapterBead.</a></li>
<li><a href="https://github.com/apache/royale-asjs/issues/132">Added Object getter/setter utility functions.</a></li>
<li><a href="https://github.com/apache/royale-asjs/issues/134">Added InfiniteVScroller Bead.</a></li>
<li>Initial release of the migration component sets (MXRoyale and SparkRoyale) that have a goal of reducing the effort for those moving existing Flex applications to Royale.</li>
<li>Initial release of the Tour de Flex example migrated to Royale via the migration component sets. This is a work in progress. You can see the latest version running on our <a href="http://apacheroyaleci.westus2.cloudapp.azure.com:8080/job/TourDeFlexMigration/lastSuccessfulBuild/artifact/examples/mxroyale/tourdeflexmodules/bin/js-debug/index.html">CI server.</a></li>
</ul>
<h3>Known Issues:</h3>
<ul>
<li>Users only using Basic components and not MXRoyale or SparkRoyale emulation components should delete <em>frameworks/libs/MXRoyale.swc</em>, <em>frameworks/libs/SparkRoyale.swc</em>, <em>frameworks/js/libs/MXRoyaleJS.swc</em>, and <em>frameworks/js/libs/SparkRoyaleJS.swc</em> from their library paths (or from the file system).</li>
</ul>
<p>Updates to the <em>RELEASE_NOTES</em> discovered after this file was packaged into the release artifacts can be found here:</p>
<p><a href="https://github.com/apache/royale-asjs/wiki/Release-Notes-0.9.4">https://github.com/apache/royale-asjs/wiki/Release-Notes-0.9.4</a></p>
<p>You can see more <a href="https://github.com/apache/royale-asjs/blob/develop/RELEASE_NOTES.md">here</a>.</p>
<p>You can download a <a href="https://royale.apache.org/download/">binary distribution</a>, the <a href="https://royale.apache.org/source-code/">source code</a> or browse our <a href="https://github.com/apache/royale-asjs/wiki/Apache-Royale-Source-Code-Repositories">GitHub repositories</a>. If you're a NPM user you can check <a href="https://www.npmjs.com/org/apache-royale">Apache Royale at NPM</a>.</p>
<p>As well, you can help us <a href="https://github.com/apache/royale-asjs/issues">filing bugs in the framework</a> or <a href="https://github.com/apache/royale-compiler/issues">compiler</a>.</p>
<p>For questions about how to use Royale, send email to <a href="https://royale.apache.org/blog/apache-royale-v0-9-4-released/users@royale.apache.org">mailto:users@royale.apache.org</a>.  For questions and feedback on the development of the source code in the release, send email to <a href="mailto:dev@royale.apache.org">dev@royale.apache.org</a>.</p>
<p>Enjoy! 🙂</p>
]]></description>
        </item>
    
        
        <item>
            <title>Hello Node: How to transpile ActionScript 3 for Node.js</title>
            <link>https://royale.apache.org/blog/hello-node-how-to-transpile-actionscript-for-node-js/</link>
            <pubDate>Wed, 03 Oct 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Josh Tynjala]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/hello-node-how-to-transpile-actionscript-for-node-js/</guid>
            <description><![CDATA[<blockquote>
<p><strong>Note:</strong> This tutorial was originally published in <a href="https://twitter.com/joshtynjala">Josh Tynjala</a>'s NextGen ActionScript website, but is now donated to Apache Royale. The tutorial has been adapted to correct the things that changed in Apache Royale since it was published.</p>
</blockquote>
<p>Over the years, many developers have dreamed of using ActionScript on both the client and the server. Today, the Apache Royale™ SDK finally makes it possible.</p>
<p><img src="https://royale.apache.org/img/blog/apache-royale-node-js.png" alt="Apache Royale and Node.js logos"></p>
<p>Let's learn to use <strong>asnodec</strong> to write <em>ActionScript</em> code that runs in the popular server-side JavaScript environment, <a href="http://nodejs.org/">Node.js</a>.</p>
<p><img src="https://royale.apache.org/img/blog/nodejs-terminal@2x.jpg" alt="Screenshot of Node.js console output running in the terminal"></p>
<p>With <strong>asnodec</strong>, we'll get full access to all Node.js APIs, and it's even possible to require npm modules in ActionScript. We'll start with a simple example.</p>
<h2>Requirements</h2>
<p>For this tutorial, you should install <a href="https://nodejs.org/">Node.js</a>. The newest Long Term Support (LTS) release is recommended.</p>
<p>Additionally, you will need <a href="https://royale.apache.org/download">Apache Royale 0.9.4 or newer</a>. Use the <a href="https://royale.apache.org/download">downloads page</a>, or download it from Node Package Manager with</p>
<pre><code class="language-sh">npm install -g @apache-royale/royale-js
</code></pre>
<h2>Create a new project</h2>
<ol>
<li>Create a new, empty folder for your project, and name it <em>HelloNode</em>.</li>
<li>Inside the new project, create a new folder named <em>src</em>. This is where our ActionScript classes will go.</li>
<li>Inside the <em>src</em> folder, create a file named <em>HelloNode.as</em>, and add the following code:</li>
</ol>
<pre><code class="language-as3">package
{
    public class HelloNode
    {
        public function HelloNode()
        {
            console.log(&quot;Hello&quot;, process.release.name, process.version);
            dns.lookup(&quot;localhost&quot;, null, dnsLookupCallback);
        }

        private function dnsLookupCallback(error:Object, address:String):void
        {
            console.log(&quot;The address of localhost is:&quot;, address);
        }
    }
}
</code></pre>
<p>In this class, we're doing two things. First, we're printing the version of Node to the console. Then, we're using Node's built-in <a href="https://nodejs.org/api/dns.html"><strong>dns</strong></a> module to look up an IP address.</p>
<blockquote>
<p>It is not necessary to call <code>require()</code> for built-in Node modules in ActionScript. The compiler will detect when a module is used, and it will generate the appropriate call to <code>require()</code> automatically when generating the final JavaScript. (<code>require()</code> is necessary for custom modules)</p>
</blockquote>
<h2>Compile the project on the command line</h2>
<p>Inside the Apache Royale SDK, the <em>js/bin</em> folder contains several different exeuctables used to transpile ActionScript to JavaScript.</p>
<p>What do each of those executables in <em>js/bin</em> do?</p>
<ul>
<li><strong>asjsc</strong> compiles pure ActionScript to JavaScript with access to web browser APIs like the HTML DOM.</li>
<li><strong>asnodec</strong> compiles pure ActionScript to JavaScript with access to Node.js APIs to create server-side or command line projects. <em>We'll use this one.</em></li>
<li><strong>mxmlc</strong> compiles applications that use the Apache Royale framework components.</li>
</ul>
<p>Use the <strong>asnodec</strong> executable to transpile the <code>HelloNode</code> ActionScript class that you created above for Node.js.</p>
<pre><code class="language-sh">asnodec src/HelloNode.as
</code></pre>
<p>This will produce a folder named <em>bin</em> containing <em>js-debug</em> and <em>js-release</em> folders. The <em>js-debug</em> folder contains JavaScript that is easy to read, and each class is loaded at runtime from a separate file. The <em>js-release</em> folder contains JavaScript that has been concatenated and minified for production.</p>
<p>The project should now contain the following files and folders:</p>
<p><img src="https://royale.apache.org/img/blog/node-project-files@2x.jpg" alt="Screenshot of project files, including bin/js-debug, bin/js-release, and src/HelloNode.as"></p>
<p>Finally, let's try running our code with Node.js.</p>
<h2>Run the project</h2>
<p>Inside the js-debug folder, a file named index.js will be created as the entry point for your Node.js project. You can run this script using the <code>node</code> executable:</p>
<pre><code class="language-sh">node bin/js-debug/index.js
</code></pre>
<p>You should see the following output in your console:</p>
<pre><code>Hello node v6.11.0
The address of localhost is: 127.0.0.1
</code></pre>
<p>(The Node version number might be different, obviously!)</p>
<h2>What's Next?</h2>
<p>This is just a simple example, but it gives you a glimpse of how developers can bring ActionScript server-side using Apache Royale and Node.js. By using an established ecosystem like Node.js, ActionScript developers can take advantage of all of the libraries published to NPM and join a large, vibrant community.</p>
]]></description>
        </item>
    
        
        <item>
            <title>Loading external data through HTTPService</title>
            <link>https://royale.apache.org/blog/loading-external-data-through-httpservice/</link>
            <pubDate>Sun, 23 Sep 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/loading-external-data-through-httpservice/</guid>
            <description><![CDATA[<p>This example shows you how to use <strong>HTTPService</strong> to access external data to use in your Apache Royale application.</p>
<p>You can use HTTPService to retrieve data in XML, JSON, or other formats. We'll use GitHub API services to get JSON formatted GitHub data so we can load info about the code of this example, which is hosted in GitHub.</p>
<p>It uses the new Jewel UI set that supports themes and is available in <a href="https://royale.apache.org/download/">the 0.9.4 release or later</a>.</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;j:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
              xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;
              xmlns:js=&quot;library://ns.apache.org/royale/basic&quot;
              xmlns:html=&quot;library://ns.apache.org/royale/html&quot;
              xmlns:services=&quot;services.*&quot;&gt;

    &lt;fx:Script&gt;
        &lt;![CDATA[
           import org.apache.royale.events.Event;
           import org.apache.royale.events.MouseEvent;
           import org.apache.royale.jewel.Alert;

           public function getGithubContent(event:MouseEvent):void
           {
               service.getContent();
           }
           
           public function dataReadyHandler(event:Event):void
            {
               Alert.show(service.jsonToString, &quot;JSON data retrieved&quot;);
               jsonData.html = &quot;Some JSON Data: &lt;br&gt;&lt;strong&gt; - service.json.name:&lt;/strong&gt; &quot; + service.json.name + 
                                &quot;&lt;br&gt;&lt;strong&gt; - service.json.sha:&lt;/strong&gt; &quot; + service.json.sha +
                                &quot;&lt;br&gt;&lt;strong&gt; - service.json._links.html&lt;/strong&gt; &quot; + service.json._links.html;
                sourceCodeMXMLText.text =  service.sourceCode;
            }
        ]]&gt;
    &lt;/fx:Script&gt;
    
    &lt;fx:Declarations&gt;
        &lt;services:GitHubService id=&quot;service&quot; 
           sourceCodeUrl=&quot;https://api.github.com/repos/apache/royale-asjs/contents/examples/blog/BE0011_Loading_external_data_through_HTTPService/src/main/royale/BE0011_Loading_external_data_through_HTTPService.mxml&quot;
           dataReady=&quot;dataReadyHandler(event)&quot;/&gt; 
    &lt;/fx:Declarations&gt;

    &lt;j:initialView&gt;
        &lt;j:View&gt;
            &lt;j:beads&gt;
                &lt;j:HorizontalCenteredLayout/&gt;
            &lt;/j:beads&gt;

            &lt;j:Card percentWidth=&quot;90&quot;&gt;
                &lt;html:H3 text=&quot;Loading Github external data through HTTPService&quot;/&gt;
                
                &lt;j:Label text=&quot;This example loads its source code in the text code panel:&quot;/&gt;

                 &lt;html:Pre height=&quot;300&quot; percentWidth=&quot;100&quot; style=&quot;background-color: white&quot;&gt;
                    &lt;html:beads&gt;
                        &lt;j:ScrollingViewport/&gt;
                    &lt;/html:beads&gt;
                    &lt;html:Code id=&quot;sourceCodeMXMLText&quot;/&gt;
                &lt;/html:Pre&gt;
                
                &lt;j:Label id=&quot;jsonData&quot; multiline=&quot;true&quot; html=&quot;This label shows JSON data when loaded.&quot;/&gt;

                &lt;j:Button text=&quot;Retrieve source code from Github&quot; emphasis=&quot;primary&quot; click=&quot;getGithubContent(event)&quot;/&gt;
             &lt;/j:Card&gt;
        &lt;/j:View&gt;
    &lt;/j:initialView&gt;
&lt;/j:Application&gt;
</code></pre>
<p>We create an Apache Royale interface that shows a text code panel to load the source code of this example in it. GitHub doesn't let us load a page from its domain in an iFrame, so this is the only way to embed GitHub content in your application.</p>
<p>The text code panel is made of <em>pre</em> and <em>code</em> html tags with some custom style to make the background white. We provide a Label to show accessing Json data directly with dot notation. Finally we provide a button to trigger the <strong>HTTPService</strong>.</p>
<blockquote>
<p><strong>Tip:</strong> We use the <strong>ScrollingViewport</strong> bead to add scrolling behavior to our text code panel.</p>
</blockquote>
<p>The most important piece in this example is the custom <strong>GitHubService</strong> class that wraps the HTTPService object. We declare it in MXML in our application to pass the Github URL to request and declare an event handler to show the data once it is loaded.</p>
<p>This is the <strong>GitHubService</strong> class:</p>
<pre><code class="language-as3">package services
{
    import org.apache.royale.events.Event;
    import org.apache.royale.events.EventDispatcher;
    import org.apache.royale.net.HTTPConstants;
    import org.apache.royale.net.HTTPService;
    import org.apache.royale.utils.string.Base64;

    [Event(name=&quot;dataReady&quot;, type=&quot;org.apache.royale.events.Event&quot;)]
    /**
     * GitHubService is in charge of getting the source code of some example
     * so we can show the code in a TabBarContentPanel along with the working example
     */
    public class GitHubService extends EventDispatcher
    {
        /**
         * constructor
         */
        public function GitHubService():void
        {    
            service = new HTTPService();
            service.addEventListener(HTTPConstants.COMPLETE, completeHandler);
        }

        /**
         * the service that performs the request to Github
         */
        private var service:HTTPService;

        /**
         * we dispatch an event once we have the source code from github
         */
        private function completeHandler(event:Event):void
        {
            dispatchEvent(new Event(&quot;dataReady&quot;));
        }

        private var _sourceCodeUrl:String = null;
        /**
         * The source code url we want to retrieve
         */
        public function get sourceCodeUrl():String
        {
            return _sourceCodeUrl;
        }
        public function set sourceCodeUrl(value:String):void
        {
            _sourceCodeUrl = value;
            service.url = sourceCodeUrl;
        }

        /**
         * json returns the retrieved GitHub JSON Object
         */
        public function get json():Object
        {
            return service.json;
        }

        /**
         * jsonToString returns the retrieved GitHub JSON Object as String
         */
        public function get jsonToString():String
        {
            return service.data;
        }

        /**
         * decode and return the base 64 content (real source code)
         */
        public function get sourceCode():String
        {
            return Base64.decode(service.json.content);
        }
        
        /**
         * trigger the HTTPService to retrieve the GitHub data
         */
        public function getContent():void
        {
            service.send();
        }
    }
}
</code></pre>
<p>We instantiate the HTTPService in the constructor, and declare an event listener for the <strong>HTTPConstants.COMPLETE</strong> event, so we perform actions when the data finishes loading. The action we do from this class is throw a new event &quot;<strong>dataReady</strong>&quot; to consume in our application.</p>
<p><strong>sourceCodeUrl</strong> will pass the GitHub url to be called by our service class, and fills <strong>HTTPService.url</strong> so HTTPService knows what url to target.</p>
<p>As we get the data loaded, we can manage it with <strong>HTTPService.data</strong>, and we have a convenient <strong>HTTPService.json</strong> getter to access the JSON Object that HTTPService already parses for us. We exposed this data in our json class as <strong>jsonToString</strong> and <strong>json</strong> getters respectively.</p>
<p>Finally, the source code is in the <strong>json.content</strong> variable, but comes encoded in <strong>base64</strong>, so we can use Apache Royale's <strong>decode</strong> function in the <strong>Base64</strong> class to get the decoded xml string to use in our example App. We exposed this in a convenient getter function in our service called <strong>sourceCode</strong>.</p>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/working-with-data/loading-external-data">Apache Royale documentation page about loading external data</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/label">Jewel Label Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/button">Jewel Button Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/card">Jewel Card Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="650" src="https://royale.apache.org/blog-examples/BE0011_Loading_external_data_through_HTTPService/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0011_Loading_external_data_through_HTTPService/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0011_Loading_external_data_through_HTTPService">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0011_Loading_external_data_through_HTTPService"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Customization through the Royale API</title>
            <link>https://royale.apache.org/blog/customization-through-the-royale-api/</link>
            <pubDate>Wed, 01 Aug 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/customization-through-the-royale-api/</guid>
            <description><![CDATA[<p>This example shows you how to use the powerful Royale API to get access to the internal workings of components and customize them to suit your needs. As you can see, although Royale does a lot for you to simplify development, you always have full control of your code.</p>
<p>It uses the new Jewel UI set that supports themes and is available in <a href="https://royale.apache.org/download/">the 0.9.4 release or later</a>.</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;j:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
              xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;
              xmlns:js=&quot;library://ns.apache.org/royale/basic&quot;
              xmlns:html=&quot;library://ns.apache.org/royale/html&quot;
              xmlns:models=&quot;models.*&quot;&gt;

    &lt;fx:Script&gt;
        &lt;![CDATA[
            import org.apache.royale.core.IBeadLayout;
            import org.apache.royale.core.IBeadView;
            import org.apache.royale.events.CloseEvent;
            import org.apache.royale.events.Event;
            import org.apache.royale.events.MouseEvent;
            import org.apache.royale.jewel.Alert;
            import org.apache.royale.jewel.CheckBox;
            import org.apache.royale.jewel.beads.layouts.HorizontalLayout;
            import org.apache.royale.jewel.beads.layouts.VerticalLayout;
            import org.apache.royale.jewel.beads.views.AlertView;

           private var alert:Alert;
           private var check:CheckBox;

           // Adding content to the Alert component and changing the ControlBar's Buttons Layout
           private function clickHandler(event:MouseEvent):void {
               alert = Alert.show(&quot;This example shows access to AlertView and ControlBar to add a CheckBox to the Alert's content area, expand the Button layout and change its defaults. The height of the alert is changed to 300px, too.&quot;, &quot;Customized Alert Example&quot;, 3);
               alert.addEventListener(CloseEvent.CLOSE, alertClickHandler);
                alert.height = 300;

               check = new CheckBox();
               check.selected = true;
               check.text = &quot;Buttons must fill the ControlBar's available space&quot;;
               check.addEventListener(Event.CHANGE, expandButtons);

               expandButtons();
           }
           
           private function expandButtons(event:Event = null):void {
               var alertView:AlertView = alert.getBeadByType(IBeadView) as AlertView;

               if(event == null)
               {
                   var verticalLayout:VerticalLayout = new VerticalLayout();
                   verticalLayout.gap = 9;
                   alertView.content.addBead(verticalLayout);

                   alertView.content.addElement(check);
               }

               var layout:HorizontalLayout = alertView.controlBar.getBeadByType(IBeadLayout) as HorizontalLayout;
               layout.itemsExpand = check.selected;
           }

           // Event handler function for displaying the selected Alert button.
           private function alertClickHandler(event:CloseEvent):void {
               alert.removeEventListener(CloseEvent.CLOSE, alertClickHandler);

               if (event.detail == Alert.YES)
                   status.text=&quot;You answered Yes&quot;;
               else
                   status.text=&quot;You answered No&quot;;
           }
        ]]&gt;
    &lt;/fx:Script&gt;

    &lt;j:initialView&gt;
        &lt;j:View&gt;
            &lt;j:beads&gt;
                &lt;j:HorizontalCenteredLayout/&gt;
            &lt;/j:beads&gt;

            &lt;j:Card width=&quot;350&quot;&gt;
                &lt;html:H3 text=&quot;Customization through Royale API&quot;/&gt;
                
                &lt;j:Label text=&quot;This is a complex example that adds and retrieves beads at runtime. Click the button below to display an Alert window that adds content and makes changes in some parts of the default layout.&quot;
                       multiline=&quot;true&quot;/&gt;
                &lt;j:Button text=&quot;Click Me&quot; click=&quot;clickHandler(event)&quot;/&gt;
                &lt;j:Label id=&quot;status&quot;/&gt;
            &lt;/j:Card&gt;
        &lt;/j:View&gt;
    &lt;/j:initialView&gt;

&lt;/j:Application&gt;
</code></pre>
<p>This example takes the <a href="https://royale.apache.org/using-jewel-alert-control/">Using the Jewel Alert Control</a> example and uses the Royale API to add content and customize some parts of the Alert.</p>
<p>The code is more complex than in some of our other examples, for teaching purposes:</p>
<ul>
<li>In the <strong>clickHandler</strong> method, we create an Alert control and create a CheckBox to add to the Alert's content zone. Then we call the <strong>expandButtons</strong> method to end initial customization.</li>
<li>The <strong>expandButtons</strong> method is where the heavy work of the Royale API happens:
<ul>
<li>Since all components in Royale are &quot;composed&quot; through the Strand/Bead API, we want to access the view part of the Alert; in this case we're talking about AlertView.</li>
<li>We can access AlertView with <strong>getBeadByType</strong> that retrieves a bead by its type.</li>
<li>Then, for learning purposes, we create a VerticalLayout bead and add it to the Alert's content using the <strong>addBead</strong> method (you can investigate other methods in the API like <strong>removeBead</strong> as well).</li>
<li>We add the CheckBox created in the previous method to the Alert's content. Since this involves a call-back method and an initialization method, we only want to add the checkbox at initialization time and not each time the user clicks the CheckBox.</li>
<li>Finally, we retrieve the ControlBar's default HorizontalLayout and customize it to expand its items (the buttons) to fill all the available space in the control bar. We use <strong>getBeadByType</strong> again to reference the layout, and then use a method available in most Jewel Layouts called <strong>itemsExpand</strong> that expect a Boolean. When this method is set to &quot;true&quot; all items in the layout expand to use all available space.</li>
</ul>
</li>
</ul>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/alert">Jewel Alert Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/button">Jewel Button Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/checkbox">Jewel CheckBox Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/label">Jewel Label Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/card">Jewel Card Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="400" src="https://royale.apache.org/blog-examples/BE0010_Customization_through_the_Royale_API/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0010_Customization_through_the_Royale_API/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0010_Customization_through_the_Royale_API">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0010_Customization_through_the_Royale_API"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Using an Item Renderer with a List</title>
            <link>https://royale.apache.org/blog/using-an-item-renderer-with-a-list/</link>
            <pubDate>Fri, 13 Jul 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/using-an-item-renderer-with-a-list/</guid>
            <description><![CDATA[<p>This example shows how to use an <strong>ItemRenderer</strong> to display the items in a List in your Royale application. It uses the new Jewel UI set that supports themes and is available in <a href="https://royale.apache.org/download/">the 0.9.4 release or later</a>.</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;j:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
              xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;
              xmlns:js=&quot;library://ns.apache.org/royale/basic&quot;
              xmlns:html=&quot;library://ns.apache.org/royale/html&quot;
              xmlns:models=&quot;models.*&quot;&gt;

    &lt;fx:Style&gt;
        @namespace &quot;http://www.w3.org/1999/xhtml&quot;;
        @namespace j &quot;library://ns.apache.org/royale/jewel&quot;;

        .iconListItemRenderer
        {
            IItemRenderer: ClassReference(&quot;itemRenderers.IconListItemRenderer&quot;);
        }
        .iconListItemRenderer .fonticon
        {
            margin-right: 24px;
        }
    &lt;/fx:Style&gt;

    &lt;j:model&gt;
        &lt;models:ListsModel id=&quot;listModel&quot;/&gt;
    &lt;/j:model&gt;

    &lt;j:initialView&gt;
        &lt;j:View&gt;
            &lt;j:beads&gt;
                &lt;j:VerticalCenteredLayout/&gt;
            &lt;/j:beads&gt;

            &lt;j:Card width=&quot;340&quot;&gt;
                &lt;j:CardHeader&gt;
                    &lt;html:H3 text=&quot;Jewel List With ItemRenderer&quot; className=&quot;primary-normal&quot;/&gt;
                &lt;/j:CardHeader&gt;
                &lt;j:CardPrimaryContent&gt;
                
                    &lt;j:List width=&quot;100%&quot; height=&quot;300&quot; className=&quot;iconListItemRenderer&quot;&gt;
                        &lt;j:beads&gt;
                            &lt;js:ConstantBinding
                               sourceID=&quot;listModel&quot;
                               sourcePropertyName=&quot;iconListData&quot;
                               destinationPropertyName=&quot;dataProvider&quot;/&gt;
                        &lt;/j:beads&gt;
                    &lt;/j:List&gt;
                    
                &lt;/j:CardPrimaryContent&gt;
            &lt;/j:Card&gt;
        &lt;/j:View&gt;
    &lt;/j:initialView&gt;

&lt;/j:Application&gt;
</code></pre>
<p>By default, Apache Royale Jewel List-based controls display their data as plain text using <strong>ListItemRenderer</strong>. But Royale is capable of much more, and you can extend ListItemRenderer to display the items in your list in a pleasing and user-friendly way.</p>
<p>In this example we created an <strong>IconListItemRenderer</strong> in mxml that extends ListItemRenderer:</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;j:ListItemRenderer xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
                    xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;
                    xmlns:js=&quot;library://ns.apache.org/royale/basic&quot;
                    xmlns:html=&quot;library://ns.apache.org/royale/html&quot;&gt;

    &lt;fx:Script&gt;
        &lt;![CDATA[
            import vos.IconListVO;
            
            [Bindable(&quot;dataChange&quot;)]
            public function get iconList():IconListVO
            {
                return data as IconListVO;
            }
        ]]&gt;
    &lt;/fx:Script&gt;

    &lt;j:beads&gt;
        &lt;js:ItemRendererDataBinding /&gt;
        &lt;j:HorizontalLayout gap=&quot;3&quot; itemsVerticalAlign=&quot;itemsCenter&quot;/&gt;
    &lt;/j:beads&gt;
    
    &lt;js:MaterialIcon text=&quot;{iconList ? iconList.icon : ''}&quot; visible=&quot;{iconList ? iconList.icon != null : false}&quot;/&gt;

    &lt;html:Span text=&quot;{iconList ? iconList.label : ''}&quot;/&gt;
    
&lt;/j:ListItemRenderer&gt;
</code></pre>
<p>The list gets its items from the data provider and passes them through the item renderer. The item renderer models each item in a consistent way: it adds a <strong>FontIcon</strong> to display an appropriate icon (selected, in this case, from the Google Material Icons font) at the left, and the text of the item in a Label to the right. To manage the components for each list item, you can use absolute positioning, layout classes or CSS. We used CSS in the <strong>fx:Style</strong> section in the main file for simplicity. As you see, the item renderer is declared in CSS as well, and is located in the <em>itemRenderers</em> package.</p>
<p>Note that we use Data Binding, deploying <strong>ItemRendererDataBinding</strong>. Data binding in Royale is not available by default to reduce code size. You add it where you need it, following the <strong>PAYG</strong> principle in Royale: <strong>Pay As You Go</strong>. We add a data binding bead here since we need the function, and not anywhere we don't need it.</p>
<p>The data used in the List control <strong>dataProvider</strong> is declared in the ActionScript 3 <strong>ListsModel</strong> class:</p>
<pre><code class="language-mxml">package models
{
    import org.apache.royale.collections.ArrayList;
    import vos.IconListVO;

    public class ListsModel 
    {
        /**
         * this is the dataProvider for the List
         */
        private var _iconListData:ArrayList = new ArrayList([
            new IconListVO(&quot;Alert&quot;, MaterialIconType.WEB_ASSET),
            new IconListVO(&quot;Button&quot;, MaterialIconType.CROP_7_5),
            new IconListVO(&quot;DropDownList&quot;, MaterialIconType.CREDIT_CARD),
            new IconListVO(&quot;CheckBox&quot;, MaterialIconType.CHECK_BOX),
            new IconListVO(&quot;Label&quot;, MaterialIconType.LABEL),
            new IconListVO(&quot;List&quot;, MaterialIconType.LIST_ALT),
            new IconListVO(&quot;RadioButton&quot;, MaterialIconType.RADIO_BUTTON_CHECKED),
            new IconListVO(&quot;Slider&quot;, MaterialIconType.STORAGE),
            new IconListVO(&quot;Text&quot;, MaterialIconType.SUBJECT),
            new IconListVO(&quot;TextInput&quot;, MaterialIconType.TEXT_FIELDS)            
        ]);

        public function get iconListData():ArrayList
        {
            return _iconListData;
        }
    }
}
</code></pre>
<p>The <strong>MaterialIconType</strong> class uses the icon names as they appear in the Material Icons font for convenience and to avoid typos. One additional benefit of using MaterialIconType in your code is that it injects the font into your html directly, without you having to deal with that step.</p>
<p>This class uses a data object (DOT, or POJO, depending on how you name this kind of code), called <strong>IconListVO</strong> to instance each piece of data that will appear in the List control.</p>
<p>Here's the result of this code snippet:</p>
<pre><code class="language-as3">package vos
{
    [Bindable]
    public class IconListVO
    {
        public var label:String;
        public var icon:String;

        public function IconListVO(label:String, icon:String = null)
        {
            this.label = label;
            this.icon = icon;
        }
    }
}
</code></pre>
<p>In the main file, note how we link the <strong>ListsModel</strong> class through the <strong>model</strong> variable accessible throughout Royale to make it easy to link a model as a bead.</p>
<p>Finally, we link the model data to the list dataProvider using data binding, with <strong>ApplicationDataBinding</strong> (since we are at the Application level) and the <strong>ConstantBinding</strong> class that knows where the data is located (<em>sourceID</em>), what property holds it (<em>iconListData</em>) and where to inject the data (<em>destinationPropertyName</em>).</p>
<p>Hope you like this example 🙂</p>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/features/item-renderers">ItemRenderers Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/list">Jewel List Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/card">Jewel Card Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="500" src="https://royale.apache.org/blog-examples/BE0009_Using_an_Item_Renderer_with_a_List/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0009_Using_an_Item_Renderer_with_a_List/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0009_Using_an_Item_%20Renderer_with_a_List">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0009_Using_an_Item_%20Renderer_with_a_List"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Using View States to show or hide content</title>
            <link>https://royale.apache.org/blog/using-view-states-to-show-or-hide-content/</link>
            <pubDate>Wed, 06 Jun 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/using-view-states-to-show-or-hide-content/</guid>
            <description><![CDATA[<p>This example shows you how to display or hide content in your Royale application, thanks to the <strong>View States</strong> feature. It uses the new Jewel UI set that supports themes and is available in <a href="https://royale.apache.org/download/">the 0.9.4 release or later</a>.</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;j:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
              xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;
              xmlns:js=&quot;library://ns.apache.org/royale/basic&quot;
              xmlns:html=&quot;library://ns.apache.org/royale/html&quot;&gt;
    
    &lt;j:initialView&gt;
        &lt;j:View id=&quot;view&quot;&gt;
            &lt;j:states&gt;
                &lt;js:State name=&quot;login&quot; /&gt;        
                &lt;js:State name=&quot;loggedIn&quot; /&gt;        
            &lt;/j:states&gt;
            
            &lt;j:beads&gt;
                &lt;js:SimpleStatesImpl/&gt;
            &lt;/j:beads&gt;

            &lt;j:Card id=&quot;loginForm&quot; includeIn=&quot;login&quot;&gt;
                &lt;html:H1 text=&quot;Royale login&quot;/&gt;
                &lt;j:TextInput id=&quot;username&quot; text=&quot;someuser&quot;/&gt;
                &lt;j:TextInput id=&quot;password&quot; text=&quot;somepass&quot;&gt;
                    &lt;j:beads&gt;
                        &lt;j:PasswordInput/&gt;
                    &lt;/j:beads&gt;
                &lt;/j:TextInput&gt;
                &lt;j:Button text=&quot;Login&quot; emphasis=&quot;primary&quot; click=&quot;view.currentState = 'loggedIn'&quot; /&gt;
            &lt;/j:Card&gt;

            &lt;j:Card id=&quot;loggedInForm&quot; includeIn=&quot;loggedIn&quot;&gt;
                &lt;html:H1 text=&quot;You are logged in!! :)&quot;/&gt;
                &lt;j:Button text=&quot;Logout&quot; click=&quot;view.currentState = 'login'&quot;/&gt;
            &lt;/j:Card&gt;
        &lt;/j:View&gt;
    &lt;/j:initialView&gt;

&lt;/j:Application&gt;
</code></pre>
<p>The View States feature is a way of putting different filters over part of the application so that different things appear depending on what the app is doing, what permissions the user has, what the user has just done, or some other condition. You create a series of &quot;states&quot; and associate components of your application with one or more of the states. The way you associate a component with a state is to add the includeIn attribute to the component and set the attribute equal to one or more of the available states. Once you have associated a parent component to a state, all of its children (the things &quot;inside&quot; it) are also associated to the state.</p>
<p>Using states gives you a lightweight and quick way of updating what the user sees, without having to provide all sorts of modules that have to be loaded and unloaded.</p>
<p>The example shows using states to switch between two Card components, what you see before logging in and what you see once you have logged in. To make this work you need to add the SimpleStatesImpl bead. Then define the states you need in the State class. Here, our two states are login and loggedIn. Finally, add an &quot;includeIn&quot; attribute to each Card component and associate it with a state.</p>
<p>When you first see the app, the currentState in the view is the first state listed in the State class: login.</p>
<p>When you click the button, the &quot;click&quot; function assigns a new state as the currentState. Anything that is not associated with the new state magically disappears, and anything that is associated with it is suddenly visible.</p>
<p>Instead of using includeIn, you have another way via dot notation in attributes, in this case notice the notation visible=&quot;true&quot; and <code>visible.&lt;state&gt;=&quot;false&quot;</code> in the following code:</p>
<pre><code class="language-mxml">&lt;j:Card id=&quot;loginForm&quot; visible=&quot;true&quot; visible.loggedIn=&quot;false&quot;&gt;
    &lt;html:H1 text=&quot;Royale login&quot;/&gt;
    &lt;j:TextInput id=&quot;username&quot; text=&quot;someuser&quot;/&gt;
    &lt;j:TextInput id=&quot;password&quot; text=&quot;somepass&quot;&gt;
        &lt;j:beads&gt;
            &lt;j:PasswordInput/&gt;
        &lt;/j:beads&gt;
    &lt;/j:TextInput&gt;
    &lt;j:Button text=&quot;Login&quot; emphasis=&quot;primary&quot; click=&quot;view.currentState = 'loggedIn'&quot; /&gt;
&lt;/j:Card&gt;

&lt;j:Card id=&quot;loggedInForm&quot; visible=&quot;false&quot; visible.loggedIn=&quot;true&quot;&gt;
    &lt;html:H1 text=&quot;You are logged in!! :)&quot;/&gt;
    &lt;j:Button text=&quot;Logout&quot; click=&quot;view.currentState = 'login'&quot;/&gt;
&lt;/j:Card&gt;
</code></pre>
<p>You can use it in almost any attribute you want, not only visible.</p>
<p>Another way to set SimpleStatesImpl is vía CSS. You can do this in MXML or in an external CSS file:</p>
<pre><code class="language-css">@namespace &quot;//www.w3.org/1999/xhtml&quot;;
@namespace js &quot;library://ns.apache.org/royale/basic&quot;;
    
global {
    IStatesImpl: ClassReference(&quot;org.apache.royale.core.SimpleStatesImpl&quot;);
}
</code></pre>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/features/view-states">View States Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/textinput">Jewel TextInput Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/button">Jewel Button Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/card">Jewel Card Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="300" src="https://royale.apache.org/blog-examples/BE0008_Using_View_States_to_show_or_hide_content/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0008_Using_View_States_to_show_or_hide_content/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0008_Using_View_States_to_show_or_hide_content">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0008_Using_View_States_to_show_or_hide_content"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Selecting options from a group of Jewel CheckBox controls</title>
            <link>https://royale.apache.org/blog/selecting-options-from-a-group-of-jewel-checkbox-controls/</link>
            <pubDate>Tue, 22 May 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/selecting-options-from-a-group-of-jewel-checkbox-controls/</guid>
            <description><![CDATA[<p>In this example we'll show a set of Jewel <strong>CheckBox</strong> controls that let the user select one or more options in a Royale application. It uses the new Jewel UI set that supports themes and is available in <a href="https://royale.apache.org/download/">the 0.9.4 release or later</a>.</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;j:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
              xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;
              xmlns:html=&quot;library://ns.apache.org/royale/html&quot;&gt;

    &lt;fx:Script&gt;
        &lt;![CDATA[
           private function checkboxChanged(event:Event):void
            {
               result.text = &quot;The options selected are: &quot;;
               
               if(chk1.selected)
                   result.text += chk1.value + &quot; &quot;;
               if(chk2.selected)
                   result.text += chk2.value + &quot; &quot;;
               if(chk3.selected)
                   result.text += chk3.value;
            }
        ]]&gt;
    &lt;/fx:Script&gt;

    &lt;j:initialView&gt;
        &lt;j:View&gt;
            &lt;j:beads&gt;
                &lt;j:VerticalLayout gap=&quot;10&quot;/&gt;
            &lt;/j:beads&gt;

            &lt;html:H2 text=&quot;Selecting options from a group of Jewel Checkbox controls&quot;/&gt;
            
            &lt;j:Label text=&quot;Which option(s) do you prefer?&quot;/&gt;
    
            &lt;j:CheckBox id=&quot;chk1&quot; text=&quot;Option 1&quot; value=&quot;1&quot; change=&quot;checkboxChanged(event)&quot;/&gt;
            &lt;j:CheckBox id=&quot;chk2&quot; text=&quot;Option 2&quot; value=&quot;2&quot; change=&quot;checkboxChanged(event)&quot;/&gt;
            &lt;j:CheckBox id=&quot;chk3&quot; text=&quot;Option 3&quot; value=&quot;3&quot; change=&quot;checkboxChanged(event)&quot;&gt;
                &lt;j:beads&gt;
                    &lt;j:Disabled id=&quot;opt3disable&quot; disabled=&quot;false&quot;/&gt;
                &lt;/j:beads&gt;
            &lt;/j:CheckBox&gt;

            &lt;j:Label id=&quot;result&quot; text=&quot;The options selected are:&quot;/&gt;

            &lt;j:Button text=&quot;disable/enable option 3&quot; emphasis=&quot;primary&quot; click=&quot;opt3disable.disabled = !opt3disable.disabled&quot;/&gt;
        &lt;/j:View&gt;
    &lt;/j:initialView&gt;

&lt;/j:Application&gt;
</code></pre>
<p>The CheckBox is a two-state button control with the following properties available:</p>
<ul>
<li><strong>text</strong>: The label description for the CheckBox</li>
<li><strong>value</strong>: The internal value of the CheckBox</li>
<li><strong>selected</strong>: If this is true it means that the CheckBox is selected; it is false otherwise</li>
</ul>
<p>Each checkbox has <strong>CLICK</strong> and <strong>CHANGE</strong> events. <strong>CLICK</strong> is dispatched when the user clicks the CheckBox, either to select it or to remove the selection. <strong>CHANGE</strong> is dispatched when the CheckBox is selected/unselected, and is used in this example to update a label with the value properties of all selected check boxes.</p>
<p>As a bonus, you can provide the ability to disable/enable any of the check boxes (and any other Jewel control) by adding the <strong>Disabled bead</strong> to it. In the example, see if you can have Option 3 both selected and disabled!</p>
<p>Adding beads lets you extend what controls can do by composition, rather than being limited to what the control inherits. The Disabled bead lets you enable or disable the control programmatically, depending on whatever you find important for your application (for instance, whether the user is logged in or has made a selection in another control that is required before selecting one of these options). We'll be talking more about beads in future posts.</p>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/checkbox">Jewel CheckBox Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/label">Jewel Label Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="300" src="https://royale.apache.org/blog-examples/BE0007_Selecting_options_from_a_group_of_jewel_checkbox_controls/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0007_Selecting_options_from_a_group_of_jewel_checkbox_controls/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0007_Selecting_options_from_a_group_of_jewel_checkbox_controls">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0007_Selecting_options_from_a_group_of_jewel_checkbox_controls"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Binding the text property of a Jewel TextInput to update a text Label</title>
            <link>https://royale.apache.org/blog/binding-the-text-property-of-a-jewel-textinput-to-update-a-text-label/</link>
            <pubDate>Wed, 09 May 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/binding-the-text-property-of-a-jewel-textinput-to-update-a-text-label/</guid>
            <description><![CDATA[<p>In this example we'll cover how to use the data binding feature with a Jewel <strong>TextInput</strong> field in a Royale application. It uses the new Jewel UI set that supports themes and is available in <a href="https://royale.apache.org/download/">the 0.9.4 release or later</a>.</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;j:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
              xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;
              xmlns:js=&quot;library://ns.apache.org/royale/basic&quot;&gt;
    &lt;fx:Script&gt;
        &lt;![CDATA[
           private function textChanged(event:Event):void
            {
                result.text = &quot;The textinput text value is: &quot; + textinput.text;
            }
        ]]&gt;
    &lt;/fx:Script&gt;

    &lt;j:beads&gt;
        &lt;js:ApplicationDataBinding /&gt;
    &lt;/j:beads&gt;

    &lt;j:initialView&gt;
        &lt;j:View&gt;
            &lt;j:beads&gt;
                &lt;j:VerticalLayout gap=&quot;10&quot;/&gt;
            &lt;/j:beads&gt;

            &lt;j:Label text=&quot;Binding the text property of a Jewel TextInput field to update a text Label&quot;/&gt;

            &lt;j:TextInput id=&quot;textinput&quot; change=&quot;textChanged(event)&quot;&gt;
                &lt;j:beads&gt;
                    &lt;j:TextPrompt prompt=&quot;Using change event&quot;/&gt;
                &lt;/j:beads&gt;
            &lt;/j:TextInput&gt;

            &lt;j:Label id=&quot;result&quot; text=&quot;The TextInput field text value is: &quot;/&gt;

            &lt;j:TextInput id=&quot;databinding_ti&quot;&gt;
                &lt;j:beads&gt;
                    &lt;j:TextPrompt prompt=&quot;Using databinding&quot;/&gt;
                &lt;/j:beads&gt;
            &lt;/j:TextInput&gt;

            &lt;j:Label text=&quot;The TextInput field text value is: {databinding_ti.text}&quot;/&gt;
        &lt;/j:View&gt;
    &lt;/j:initialView&gt;

&lt;/j:Application&gt;
</code></pre>
<p><strong>Data binding</strong> is a general technique that binds together and synchonizes data from a provider, or source (in this case the contents of the text property of a TextInput field), and a consumer (in this case the text property of a Label). You can use data binding with many controls, variables and components to provide a powerful user experience. You can bind a List as the data provider for an ArrayList variable so the ArrayList displays details of the item the user selects in the List. Changing a Slider's value can change the width of a control or container the Slider is bound to.</p>
<p>In Apache Royale, you can configure data binding at different levels: Application, View, Container, ItemRenderer, and more. This follows the <strong>PAYG</strong> (Pay As You Go) philosophy that is key to the global design of Apache Royale. PAYG keeps an application as lightweight as possible, since you only add many features and functions to the components that actually need them. Other front-end technologies follow a &quot;just in case&quot; model of providing every possible function to each component even though most of those features, and the weight of that code, will serve no good use. In Royale you stay light and agile by declaring features like data binding only if the application, or some part of it, needs them.</p>
<p>In this example, we use data binding at the application level, since the whole example is only a few lines of code. So we use the <strong>ApplicationDataBinding</strong> bead. This bead adheres to the Application <em>strand</em>, &quot;composing&quot; or &quot;adding&quot; the binding functionality at the application level. In a more complex application, you might decide you only need data binding in a particular <strong>View</strong> or <strong>Container</strong>. Then you could use a <strong>ViewDataBinding</strong> bead, or a <strong>ContainerDataBinding</strong> bead. PAYG ensures features like data binding are only present where you really need them, and not using up system resources by sitting around in parts of the application where they will never be used.</p>
<p>In our example the first <strong>TextInput</strong> control uses a normal <strong>CHANGE</strong> event handler to update the text property of the Label field below it. The second TextInput control uses data binding to update the Label below it. You get the same result, but in different ways.</p>
<p>Notice that both TextInput controls use a <strong>TextPrompt</strong> bead that adds the prompt functionality to the control. We wanted that feature for this example; but since not every TextInput control in every application has to have a prompt, you &quot;pay&quot; for the function by adding the TextPrompt bead only where you need it: PAYG!</p>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/features/data-binding">Data Binding Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/textinput">Jewel TextInput Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/label">Jewel Label Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="300" src="https://royale.apache.org/blog-examples/BE0006_Binding_the_text_property_of_a_Jewel_Textinput_to_update_a_text_label/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0006_Binding_the_text_property_of_a_Jewel_Textinput_to_update_a_text_label/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0006_Binding_the_text_property_of_a_Jewel_Textinput_to_update_a_text_label">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0006_Binding_the_text_property_of_a_Jewel_Textinput_to_update_a_text_label"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Creating a group of Jewel radio buttons</title>
            <link>https://royale.apache.org/blog/creating-a-group-of-jewel-radiobuttons/</link>
            <pubDate>Wed, 02 May 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/creating-a-group-of-jewel-radiobuttons/</guid>
            <description><![CDATA[<p>In this example we'll cover how to show a list of options in a Royale application with a group of Jewel <strong>RadioButton</strong> controls. It uses the new Jewel UI set that supports themes and is available in <a href="https://royale.apache.org/download/">the 0.9.4 release or later</a>.</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;j:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
              xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;
              xmlns:html=&quot;library://ns.apache.org/royale/html&quot;&gt;
    
    &lt;fx:Script&gt;
        &lt;![CDATA[
           private function radioChanged(event:Event):void
            {
                result.text = &quot;The radio button selected has the value: &quot; + RadioButton(event.target).value;
            }
        ]]&gt;
    &lt;/fx:Script&gt;

    &lt;j:initialView&gt;
        &lt;j:View&gt;
            &lt;j:beads&gt;
                &lt;j:VerticalLayout gap=&quot;10&quot;/&gt;
            &lt;/j:beads&gt;

            &lt;html:H2 text=&quot;Creating a group of Jewel RadioButtons&quot;/&gt;
            
            &lt;j:Label text=&quot;Which option do you prefer?&quot;/&gt;
    
            &lt;j:RadioButton text=&quot;Option 1&quot; groupName=&quot;radios&quot; value=&quot;1&quot; change=&quot;radioChanged(event)&quot;/&gt;
            &lt;j:RadioButton text=&quot;Option 2&quot; groupName=&quot;radios&quot; value=&quot;2&quot; change=&quot;radioChanged(event)&quot;/&gt;
            &lt;j:RadioButton text=&quot;Option 3&quot; groupName=&quot;radios&quot; value=&quot;3&quot; change=&quot;radioChanged(event)&quot;&gt;
                &lt;j:beads&gt;
                    &lt;j:Disabled id=&quot;opt3disable&quot; disabled=&quot;false&quot;/&gt;
                &lt;/j:beads&gt;
            &lt;/j:RadioButton&gt;

            &lt;j:Label id=&quot;result&quot; text=&quot;The radio button selected has the value:&quot;/&gt;

            &lt;j:Button text=&quot;disable/enable option 3&quot; emphasis=&quot;primary&quot; click=&quot;opt3disable.disabled = !opt3disable.disabled&quot;/&gt;
        &lt;/j:View&gt;
    &lt;/j:initialView&gt;

&lt;/j:Application&gt;
</code></pre>
<p>The radio buttons have these properties available:</p>
<ul>
<li><strong>text</strong>: The label description for the radio button</li>
<li><strong>value</strong>: The internal value of the radio button</li>
<li><strong>selected</strong>: If this is true it means that the radio button is selected; it is false otherwise</li>
<li><strong>groupName</strong>: All radio buttons with the same group name are related, so the user can change which radio button is selected but can never select more than one member of the group at a time</li>
</ul>
<p>Each radio button has <strong>CLICK</strong> and <strong>CHANGE</strong> events. <strong>CLICK</strong> is dispatched when the user clicks the RadioButton. <strong>CHANGE</strong> is dispatched when the RadioButton is selected/unselected, and is used in this example to update a label with the value property of the selected radio button.</p>
<p>As a bonus, you can provide the ability to disable/enable any of the radio buttons (and any other Jewel control) by adding the <strong>Disabled bead</strong> to it. Adding beads lets you change what controls can do by composition, rather than being limited to what the control inherits. The Disabled bead lets you enable or disable the control programmatically, depending on whatever you find important for your application (for instance, whether the user is logged in or has made a selection in another control that is required before selecting one of these options). We'll be talking more about beads in future posts.</p>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/radiobutton">Jewel RadioButton Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/button">Jewel Button Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/label">Jewel Label Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="300" src="https://royale.apache.org/blog-examples/BE0005_Creating_a_group_of_Jewel_RadioButtons/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0005_Creating_a_group_of_Jewel_RadioButtons/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0005_Creating_a_group_of_Jewel_RadioButtons">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0005_Creating_a_group_of_Jewel_RadioButtons"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Adding an item to a Jewel List</title>
            <link>https://royale.apache.org/blog/adding-an-item-to-a-jewel-list/</link>
            <pubDate>Mon, 16 Apr 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/adding-an-item-to-a-jewel-list/</guid>
            <description><![CDATA[<p>In this example we'll cover how to set up a Jewel <strong>List</strong> control that shows a list of basic string data in a Royale application, and then add an item to the list. It uses the new Jewel UI set that supports themes and is available in <a href="https://royale.apache.org/download/">the 0.9.4 release or later</a>.</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;j:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
              xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;
              xmlns:js=&quot;library://ns.apache.org/royale/basic&quot;
              xmlns:html=&quot;library://ns.apache.org/royale/html&quot;&gt;
    
    &lt;fx:Script&gt;
        &lt;![CDATA[
           private function changeHandler(event:Event):void {
               selected.text = &quot;Selected: &quot; + list.selectedItem;
           }
           
           private function clickHandler(event:Event):void {
               avengersCharacters.addItem(&quot;Hawkeye&quot;);
           }
        ]]&gt;
    &lt;/fx:Script&gt;

    &lt;j:initialView&gt;
        &lt;j:View&gt;
            &lt;j:beads&gt;
                &lt;j:VerticalLayout gap=&quot;10&quot;/&gt;
            &lt;/j:beads&gt;
            
            &lt;html:H3 text=&quot;Avengers Character List&quot;/&gt;
    
            &lt;j:List id=&quot;list&quot; width=&quot;200&quot; height=&quot;300&quot; change=&quot;changeHandler(event)&quot;&gt;
                &lt;j:beads&gt;
                    &lt;j:AddListItemRendererForArrayListData/&gt;
                &lt;/j:beads&gt;
                &lt;j:dataProvider&gt;
                    &lt;js:ArrayList id=&quot;avengersCharacters&quot; source=&quot;[Iron Man, Hulk, Thor, Captain America, Black Widow]&quot; /&gt;
                &lt;/j:dataProvider&gt;
            &lt;/j:List&gt;
            &lt;j:Label id=&quot;selected&quot;/&gt;

            &lt;j:Button width=&quot;200&quot; emphasis=&quot;primary&quot; text=&quot;who is missing?&quot; click=&quot;clickHandler(event)&quot;/&gt;
        &lt;/j:View&gt;
    &lt;/j:initialView&gt;

&lt;/j:Application&gt;
</code></pre>
<p>In this example, the List is populated from an ArrayList object that holds a basic array of the data. The ArrayList has all collection methods to manage internal data, like addItem and addItemAt. We used Avengers character names to showcase this example, but you'll see one character is missing ;).
For this example we used the Amethyst Jewel Theme to match movie colors better.</p>
<p>When you select a row in the List a CHANGE event is fired. We have the event call an event handler that shows the data for the selected item in a label.</p>
<p>Finally you can click the &quot;Who's missing?&quot; button to add the missing Avenger to the list. The List will update to reflect the addition. For this to happen you'll need to use a bead that encapsulates the code responsible of adding the item to the data provider and create the corresponding item renderer called <strong>AddListItemRendererForArrayListData</strong>.</p>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/list">Jewel List Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/button">Jewel Button Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="500" src="https://royale.apache.org/blog-examples/BE0004_Adding_an_item_to_a_Jewel_List/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0004_Adding_an_item_to_a_Jewel_List/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0004_Adding_an_item_to_a_Jewel_List">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0004_Adding_an_item_to_a_Jewel_List"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Using the Jewel Slider Control</title>
            <link>https://royale.apache.org/blog/using-the-jewel-slider-control/</link>
            <pubDate>Thu, 12 Apr 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/using-the-jewel-slider-control/</guid>
            <description><![CDATA[<p>In this example we'll see the basic use of the Jewel <strong>Slider</strong> control in a Royale application. It uses the new Jewel UI set that supports themes and is available in <a href="https://royale.apache.org/download/">the 0.9.4 release or later</a>.</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;j:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
              xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;&gt;
    
    &lt;fx:Script&gt;
        &lt;![CDATA[
        
        private function clickHandler(event:MouseEvent):void
        {
            slider_w.value = 400;
            slider_h.value = 200;
        }

        private function onValueChange(event:Event):void
       {
            button.width = slider_w.value;
            button.height = slider_h.value;
            button.text = slider_w.value + &quot;x&quot; + slider_h.value;
        }
        ]]&gt;
    &lt;/fx:Script&gt;

    &lt;j:initialView&gt;
        &lt;j:View&gt;
            &lt;j:beads&gt;
                &lt;j:VerticalLayout gap=&quot;10&quot;/&gt;
            &lt;/j:beads&gt;

            &lt;j:Slider id=&quot;slider_w&quot; width=&quot;250&quot; value=&quot;250&quot; minimum=&quot;100&quot; maximum=&quot;500&quot;
               valueChange=&quot;onValueChange(event)&quot;/&gt;

            &lt;j:Slider id=&quot;slider_h&quot; width=&quot;250&quot; value=&quot;80&quot; minimum=&quot;40&quot; maximum=&quot;300&quot;
               valueChange=&quot;onValueChange(event)&quot;/&gt;

            &lt;j:Button id=&quot;button&quot; text=&quot;Slider to 400x200&quot; width=&quot;250&quot; height=&quot;80&quot; emphasis=&quot;secondary&quot;
               click=&quot;clickHandler(event)&quot;/&gt;
        &lt;/j:View&gt;
    &lt;/j:initialView&gt;
    
&lt;/j:Application&gt;
</code></pre>
<p>In this example, you can click the Jewel button to set up slider values. When you do this the <strong>ValueChangeEvent.VALUE_CHANGE</strong> will fire, calling the <strong>onValueChange</strong> event handler and setting width, height and text in the <strong>Button</strong>.</p>
<p>On the other hand, you can drag each <strong>slider</strong> to change width and height in the Button, and function to update value in <em>&quot;onValueChange&quot;</em> will be called continuously as you drag the slider controls.</p>
<p>You can click in the track at any place to change the value immediately to the value at that point in the track. And if you need them, you have available <em>&quot;input&quot;</em> and <em>&quot;change&quot;</em> events in Slider. The first fires each time you move the slider thumb from one position to another, and the second fires when Slider ends its change from one position to another.</p>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/slider">Jewel Slider Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/button">Jewel Button Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="450" src="https://royale.apache.org/blog-examples/BE0003_Using_Jewel_Slider_Control/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0003_Using_Jewel_Slider_Control/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0003_Using_Jewel_Slider_Control">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0003_Using_Jewel_Slider_Control"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Using the Jewel Alert Control</title>
            <link>https://royale.apache.org/blog/using-jewel-alert-control/</link>
            <pubDate>Fri, 06 Apr 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/using-jewel-alert-control/</guid>
            <description><![CDATA[<p>The following code shows the basic method for displaying an <strong>Alert</strong> dialog in a Royale application. It uses the new Jewel UI set that supports themes and is available in <a href="https://royale.apache.org/download/">the 0.9.4 release or later</a>.</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;j:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
              xmlns:j=&quot;library://ns.apache.org/royale/jewel&quot;&gt;
    
    &lt;fx:Script&gt;
        &lt;![CDATA[
           import org.apache.royale.jewel.Alert;
           import org.apache.royale.events.CloseEvent;

          private function clickHandler(event:MouseEvent):void {
              var alert:Alert = Alert.show(&quot;Do you want to save your changes?&quot;, &quot;Save Changes&quot;, Alert.YES | Alert.NO);
              alert.addEventListener(CloseEvent.CLOSE, alertClickHandler);
          }
      
          private function alertClickHandler(event:CloseEvent):void {
              if (event.detail == Alert.YES)
                  button.text=&quot;You answered Yes&quot;;
              else
                  button.text=&quot;You answered No&quot;;
          }
       ]]&gt;
    &lt;/fx:Script&gt;

    &lt;j:initialView&gt;
        &lt;j:View&gt;
            &lt;j:Button id=&quot;button&quot; text=&quot;Click Me&quot; emphasis=&quot;primary&quot; click=&quot;clickHandler(event)&quot;/&gt;
        &lt;/j:View&gt;
    &lt;/j:initialView&gt;
    
&lt;/j:Application&gt;
</code></pre>
<p>In this example, the Jewel button adds a click handler that will be in charge of showing the Alert control. When the user clicks the button the Alert.show() static method is called. You can add a custom message, a custom title and choose which buttons will be created for that instance of the Alert.</p>
<p>Finally, the Alert instance adds an event listener to manage the alert response when the dialog is closed. In this example we're changing the label of the button according to the button the user clicks in the Alert.</p>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/alert">Jewel Alert Royale Docs page</a></li>
<li><a href="https://apache.github.io/royale-docs/component-sets/jewel/button">Jewel Button Royale Docs page</a></li>
</ul>
<p>The result of this code snippet is the following:</p>
<iframe width="100%" height="300" src="https://royale.apache.org/blog-examples/BE0002_Using_Jewel_Alert_Control/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0002_Using_Jewel_Alert_Control/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0002_Using_Jewel_Alert_Control">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0002_Using_Jewel_Alert_Control"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Apache Royale v0.9.2 released!</title>
            <link>https://royale.apache.org/blog/apache-royale-v0-9-2-released/</link>
            <pubDate>Mon, 19 Mar 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/apache-royale-v0-9-2-released/</guid>
            <description><![CDATA[<p>The Apache Royale community is pleased to announce the release of Apache Royale 0.9.2.</p>
<p><img src="https://royale.apache.org/img/blog/release-0.9.2.png" alt=""></p>
<p>The Apache Royale project is a continuation of the previous effort called FlexJS to produce a next-generation of the Apache Flex SDK that enables developers to use MXML and ActionScript to generate HTML/JS/CSS applications which can run natively in browsers. The cross-compiled code can also be used in Apache Cordova (Adobe PhoneGap) mobile applications.</p>
<p>This release should be considered 'beta' quality. The purpose of this release is to gather feedback about the features and implementation strategies, and to recruit new contributors. We hope to grow the code base into an SDK and tool chain that delivers the highest productivity when developing applications that can run on many platforms. Beta releases may not handle production needs.</p>
<h2>Changes in 0.9.2:</h2>
<ul>
<li>Added <a href="https://github.com/apache/royale-asjs/issues/129">ApplicationParametersBead and ApplicationParametersCaseInsensitiveBead</a></li>
<li>Added virtual item renderer management for fixed row height vertical lists.</li>
<li>Added Menu and MenuBar</li>
<li>Added DividedBox</li>
<li>Many CSS default values are now in the basic.css theme.</li>
<li>Theme support. Now compiler will copy all resources in &quot;assets&quot; folder to target</li>
<li>Added JSON2ASVO, a utility that creates AS classes from a JSON result</li>
<li>Added JSONReviver, a class that converts JSON to AS classes sort of like AMF</li>
<li>Added HScrollViewport</li>
<li>Added VScrollViewport</li>
<li>Fixed bugs in XML parsing and converting back to strings
<ul>
<li>https://github.com/apache/royale-asjs/issues/120</li>
<li>https://github.com/apache/royale-asjs/issues/121</li>
<li>https://github.com/apache/royale-asjs/issues/122</li>
<li>https://github.com/apache/royale-asjs/issues/123</li>
</ul>
</li>
<li>Fixed Maven distribution so you can use in IDEs like VSCode, Moonshine and more.
<ul>
<li>https://github.com/apache/royale-asjs/issues/125</li>
</ul>
</li>
</ul>
<p>You can see more <a href="https://github.com/apache/royale-asjs/blob/develop/RELEASE_NOTES.md">here</a>.</p>
<p>You can download a <a href="https://royale.apache.org/download/">binary distribution</a>, the <a href="https://royale.apache.org/source-code/">source code</a> or browse our <a href="https://github.com/apache/royale-asjs/wiki/Apache-Royale-Source-Code-Repositories">GitHub repositories</a>. If you're a NPM user you can check <a href="https://www.npmjs.com/org/apache-royale">Apache Royale at NPM</a>.</p>
<p>As well, you can help us <a href="https://github.com/apache/royale-asjs/issues">filing bugs in the framework</a> or <a href="https://github.com/apache/royale-compiler/issues">compiler</a>.</p>
<p>For questions about how to use Royale, send email to <a href="https://royale.apache.org/blog/apache-royale-v0-9-2-released/users@royale.apache.org">mailto:users@royale.apache.org</a>.  For questions and feedback on the development of the source code in the release, send email to <a href="mailto:dev@royale.apache.org">dev@royale.apache.org</a>.</p>
<p>Enjoy! 🙂</p>
]]></description>
        </item>
    
        
        <item>
            <title>Apache Royale v0.9.1 released!</title>
            <link>https://royale.apache.org/blog/apache-royale-v0-9-1-released/</link>
            <pubDate>Wed, 14 Feb 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/apache-royale-v0-9-1-released/</guid>
            <description><![CDATA[<p>The Apache Royale community is pleased to announce the release of Apache Royale 0.9.1.</p>
<p><img src="https://royale.apache.org/img/blog/release-0.9.1.png" alt=""></p>
<p>The Apache Royale project is a continuation of the previous effort called FlexJS to produce a next-generation of the Apache Flex SDK that enables developers to use MXML and ActionScript to generate HTML/JS/CSS applications which can run natively in browsers. The cross-compiled code can also be used in Apache Cordova (Adobe PhoneGap) mobile applications.</p>
<p>This release should be considered 'beta' quality. The purpose of this release is to gather feedback about the features and implementation strategies, and to recruit new contributors. We hope to grow the code base into an SDK and tool chain that delivers the highest productivity when developing applications that can run on many platforms. Beta releases may not handle production needs.</p>
<p>You can download a <a href="https://royale.apache.org/download/">binary distribution</a>, the <a href="https://royale.apache.org/source-code/">source code</a> or browse our <a href="https://github.com/apache/royale-asjs/wiki/Apache-Royale-Source-Code-Repositories">GitHub repositories</a>. If you're a NPM user you can check <a href="https://www.npmjs.com/org/apache-royale">Apache Royale at NPM</a>.</p>
<p>As well, you can help us <a href="https://github.com/apache/royale-asjs/issues">filing bugs in the framework</a> or <a href="https://github.com/apache/royale-compiler/issues">compiler</a>.</p>
<p>For questions about how to use Royale, send email to <a href="https://royale.apache.org/blog/apache-royale-v0-9-1-released/users@royale.apache.org">mailto:users@royale.apache.org</a>.  For questions and feedback on the development of the source code in the release, send email to <a href="mailto:dev@royale.apache.org">dev@royale.apache.org</a>.</p>
<p>Enjoy! 🙂</p>
]]></description>
        </item>
    
        
        <item>
            <title>Creating a Hello World in Apache Royale</title>
            <link>https://royale.apache.org/blog/creating-a-hello-world-in-apache-royale/</link>
            <pubDate>Mon, 12 Feb 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/creating-a-hello-world-in-apache-royale/</guid>
            <description><![CDATA[<p>This section will try to bring simple code examples that should help to develop with Apache Royale more quickly. This is in part a tribute to Peter deHaan blogs he did for <a href="http://blog.flexexamples.com/">Apache Flex</a>, <a href="http://actionscriptexamples.com/">ActionScript 3</a> and <a href="http://airexamples.com/">Adobe AIR</a> some years ago. Hope you like it and want to contribute to get a huge library of Royale code snippets well organized and searchable.</p>
<p>So lets begin with our first code snippet: Hello World.</p>
<pre><code class="language-mxml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;js:Application xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
            xmlns:js=&quot;library://ns.apache.org/royale/basic&quot;&gt;

    &lt;js:valuesImpl&gt;
        &lt;js:SimpleCSSValuesImpl /&gt;
    &lt;/js:valuesImpl&gt;

    &lt;js:initialView&gt;
        &lt;js:View&gt;
            &lt;js:Label text=&quot;Hello World&quot; /&gt;
        &lt;/js:View&gt;
    &lt;/js:initialView&gt;
&lt;/js:Application&gt;
</code></pre>
<p>In this example you can see the use of the following MXML tags:</p>
<ul>
<li><strong>Application</strong>: Is the main tag in your application. All content in Apache Royale is added inside this tag.</li>
<li><strong>SimpleCSSValuesImpl</strong>: This class implements a minimal set of CSS rules that is sufficient for most applications.</li>
<li><strong>View</strong>: This is the class for most views in a Royale application.</li>
<li><strong>Label</strong>: Implements the basic control for show a label with text.</li>
</ul>
<h2>Where to go from here</h2>
<ul>
<li><a href="https://apache.github.io/royale-docs/get-started">Apache Royale documentation &quot;Get Started&quot; page</a></li>
<li><a href="https://apache.github.io/royale-docs/get-started/hello-world">Apache Royale documentation &quot;Hello World&quot; page</a></li>
</ul>
<p>The result of this &quot;Hello World&quot; code snippet is the following:</p>
<iframe width="100%" height="300" src="https://royale.apache.org/blog-examples/BE0001_Hello_World/index.html"></iframe>
<p>(We're using an iframe to host the actual results of this example compilation. To see the example in a separate window click <a href="https://royale.apache.org/blog-examples/BE0001_Hello_World/index.html" target="_blank">this link</a>.)</p>
<p>Full project with source code can be found <a href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0001_Hello_World">here</a>:</p>
<p><a class="btn btn-download" href="https://github.com/apache/royale-asjs/tree/develop/examples/blog/BE0001_Hello_World"><i class="fa fa-download"></i> Project Source Code</a></p>
]]></description>
        </item>
    
        
        <item>
            <title>Apache Royale v0.9.0 released!</title>
            <link>https://royale.apache.org/blog/apache-royale-v0-9-0-released/</link>
            <pubDate>Tue, 30 Jan 2018 24:00:00 GMT</pubDate>
            <dc:creator><![CDATA[Carlos Rovira]]></dc:creator>
            <guid isPermaLink="false">https://royale.apache.org/blog/apache-royale-v0-9-0-released/</guid>
            <description><![CDATA[<p>The Apache Royale community is pleased to announce the release of Apache Royale 0.9.0.</p>
<p><img src="https://royale.apache.org/img/blog/release-0.9.0.png" alt=""></p>
<p>The Apache Royale project is a continuation of the previous effort called FlexJS to produce a next-generation of the Apache Flex SDK that enables developers to use MXML and ActionScript to generate HTML/JS/CSS applications which can run natively in browsers. The cross-compiled code can also be used in Apache Cordova (Adobe PhoneGap) mobile applications.</p>
<p>This release should be considered 'beta' quality. The purpose of this release is to gather feedback about the features and implementation strategies, and to recruit new contributors. We hope to grow the code base into an SDK and tool chain that delivers the highest productivity when developing applications that can run on many platforms. Beta releases may not handle production needs.</p>
<p>You can download a <a href="https://royale.apache.org/download/">binary distribution</a>, the <a href="https://royale.apache.org/source-code/">source code</a> or browse our <a href="https://github.com/apache/royale-asjs/wiki/Apache-Royale-Source-Code-Repositories">GitHub repositories</a>. If you're a NPM user you can check <a href="https://www.npmjs.com/org/apache-royale">Apache Royale at NPM</a>.</p>
<p>As well, you can help us <a href="https://github.com/apache/royale-asjs/issues">filing bugs in the framework</a> or <a href="https://github.com/apache/royale-compiler/issues">compiler</a>.</p>
<p>For questions about how to use Royale, send email to <a href="https://royale.apache.org/blog/apache-royale-v0-9-0-released/users@royale.apache.org">mailto:users@royale.apache.org</a>.  For questions and feedback on the development of the source code in the release, send email to <a href="mailto:dev@royale.apache.org">dev@royale.apache.org</a>.</p>
<p>Enjoy! 🙂</p>
]]></description>
        </item>
    
  </channel>
</rss>