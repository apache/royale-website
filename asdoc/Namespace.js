/**
 * Generated by Apache Royale Compiler from Namespace.as
 * Namespace
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Namespace');
/* Royale Dependency List: isXMLName,org.apache.royale.utils.Language*/




/**
 * @constructor
 * @param {*=} prefixValue
 * @param {*=} uriValue
 */
Namespace = function(prefixValue, uriValue) {
  prefixValue = typeof prefixValue !== 'undefined' ? prefixValue : undefined;
  uriValue = typeof uriValue !== 'undefined' ? uriValue : undefined;
  var /** @type {boolean} */ isObj;
  var /** @type {number} */ argCount = (arguments.length) >>> 0;
  if (argCount) {
    if (argCount == 1) {
      uriValue = prefixValue;
      isObj = !!(uriValue && typeof(uriValue) == 'object');
      if (!isObj) {
        this.Namespace__uri = uriValue + '';
        this.Namespace__prefix = this.Namespace__uri == '' ? '' : undefined;
      } else {
        if (uriValue['className'] == 'Namespace') {
          this.Namespace__prefix = uriValue.prefix;
          this.Namespace__uri = org.apache.royale.utils.Language.string(uriValue.uri);
        } else if (uriValue['className'] == 'QName' && uriValue.uri != null) {
          this.Namespace__uri = org.apache.royale.utils.Language.string(uriValue.uri);
          org.apache.royale.utils.Language.trace('check');
        } else {
          this.Namespace__uri = uriValue.toString();
          this.Namespace__prefix = this.Namespace__uri == '' ? '' : undefined;
        }
      }
    } else {
      isObj = !!(uriValue && typeof(uriValue) == 'object');
      if (isObj) {
        if (uriValue['className'] == 'QName' && uriValue.uri != null) {
          this.Namespace__uri = org.apache.royale.utils.Language.string(uriValue.uri);
        }
        else
          this.Namespace__uri = uriValue.toString();
      } else {
        this.Namespace__uri = uriValue + '';
      }
      if (this.Namespace__uri == '') {
        if (prefixValue === undefined || (prefixValue + '' == '')) {
          this.Namespace__prefix = '';
        } else {
          throw new TypeError('Error #1098: Illegal prefix undefined for no namespace.');
        }
      } else if (prefixValue !== undefined) {
        var /** @type {string} */ prfx = '' + prefixValue;
        if (prfx == '')
          this.Namespace__prefix = ''; else if (isXMLName(prfx)) {
          this.Namespace__prefix = prfx;
        }
      }
    }
  } else {
    this.Namespace__uri = '';
    this.Namespace__prefix = '';
  }
};


Namespace.get__xmlNameCheck = function() {
  var value = isXMLName;
  Object.defineProperties(Namespace, { xmlNameCheck: { value: value, writable: false }});
  return value;
};
/**
 * @private
 * @const
 * @type {Function}
 */
Namespace.xmlNameCheck;

Object.defineProperties(Namespace, /** @lends {Namespace} */ {
/**
 * @private
 * @const
 * @type {Function}
 */
xmlNameCheck: {
  get: Namespace.get__xmlNameCheck,
  configurable: true}});


/**
 * @private
 * @type {string}
 */
Namespace.prototype.Namespace__uri = "";


/**
 * @private
 * @type {*}
 */
Namespace.prototype.Namespace__prefix;


/**
 * @asprivate
 * @royalesuppressexport
 * intended for internal use only
 * @param {string} value
 */
Namespace.prototype.setPrefix = function(value) {
  this.Namespace__prefix = value;
};


/**
 * @return {string}
 */
Namespace.prototype.toString = function() {
  return this.uri;
};


/**
 * @override
 */
Namespace.prototype.valueOf = function() {
  return this;
};


Namespace.get__forceLanguageDependency = function() {
  var value = org.apache.royale.utils.Language;
  Object.defineProperties(Namespace, { forceLanguageDependency: { value: value, writable: true }});
  return value;
};
Namespace.set__forceLanguageDependency = function(value) {
  Object.defineProperties(Namespace, { forceLanguageDependency: { value: value, writable: true }});
};
/**
 * @private
 * @type {Object}
 */
Namespace.forceLanguageDependency;

Object.defineProperties(Namespace, /** @lends {Namespace} */ {
/**
 * @private
 * @type {Object}
 */
forceLanguageDependency: {
  get: Namespace.get__forceLanguageDependency,
  set: Namespace.set__forceLanguageDependency,
  configurable: true}});


/**
 * @nocollapse
 * @export
 * @type {string}
 */
Namespace.prototype.uri;


Namespace.prototype.get__uri = function() {
  return this.Namespace__uri;
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
Namespace.prototype.prefix;


Namespace.prototype.get__prefix = function() {
  return this.Namespace__prefix;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
Namespace.prototype.className;


Namespace.prototype.get__className = function() {
  return 'Namespace';
};


Object.defineProperties(Namespace.prototype, /** @lends {Namespace.prototype} */ {
/**
 * @type {string}
 */
uri: {
get: Namespace.prototype.get__uri},
/**
 * @type {*}
 */
prefix: {
get: Namespace.prototype.get__prefix},
/**
 * @type {string}
 */
className: {
get: Namespace.prototype.get__className}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Namespace.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Namespace', qName: 'Namespace', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Namespace.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'uri': { type: 'String', access: 'readonly', declaredBy: 'Namespace'},
        'prefix': { type: '*', access: 'readonly', declaredBy: 'Namespace'},
        'className': { type: 'String', access: 'readonly', declaredBy: 'Namespace'}
      };
    },
    methods: function () {
      return {
        'Namespace': { type: '', declaredBy: 'Namespace', parameters: function () { return [ '*', true ,'*', true ]; }},
        'toString': { type: 'String', declaredBy: 'Namespace'},
        'valueOf': { type: '*', declaredBy: 'Namespace'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Namespace.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./Namespace.js.map
