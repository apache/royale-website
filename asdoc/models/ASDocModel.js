/**
 * Generated by Apache Royale Compiler from models/ASDocModel.as
 * models.ASDocModel
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('models.ASDocModel');
/* Royale Dependency List: ASDoc,ASDocClass,ASDocClassAccessor,ASDocClassAttribute,ASDocClassData,ASDocClassEvents,ASDocClassField,ASDocClassFunction,ASDocClassMembers,ASDocClassTags,ASDocInterface,org.apache.royale.core.IStrand,org.apache.royale.events.Event,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.events.EventDispatcher');
goog.require('org.apache.royale.core.IBeadModel');



/**
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {org.apache.royale.core.IBeadModel}
 */
models.ASDocModel = function() {
  models.ASDocModel.base(this, 'constructor');

this.models_ASDocModel__platforms = ["js", "swf"];
};
goog.inherits(models.ASDocModel, org.apache.royale.events.EventDispatcher);


/**
 * @nocollapse
 * @const
 * @type {string}
 */
models.ASDocModel.DELIMITER = "/";


/**
 * @private
 * @type {ASDoc}
 */
models.ASDocModel.prototype.models_ASDocModel_app = null;


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.models_ASDocModel_initializeHandler = function(event) {
  this.models_ASDocModel_app.service.addEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_configIOErrorHandler, this, 'models_ASDocModel_configIOErrorHandler'));
  this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_configCompleteHandler, this, 'models_ASDocModel_configCompleteHandler'));
  this.models_ASDocModel_app.service.url = "config.json";
  this.models_ASDocModel_app.service.send();
};


/**
 * @private
 * @type {Object}
 */
models.ASDocModel.prototype.models_ASDocModel_tagNameMap = null;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel__platforms = null;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel__knownTags = null;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel_platformList = null;


/**
 * @private
 * @type {string}
 */
models.ASDocModel.prototype.models_ASDocModel_currentPlatform = null;


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.models_ASDocModel_configIOErrorHandler = function(event) {
  this.models_ASDocModel_app.service.removeEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_configIOErrorHandler, this, 'models_ASDocModel_configIOErrorHandler'));
  this.models_ASDocModel_app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_configCompleteHandler, this, 'models_ASDocModel_configCompleteHandler'));
  org.apache.royale.utils.Language.trace("[ASDoc] failed to load URL: " + this.models_ASDocModel_app.service.url);
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.models_ASDocModel_configCompleteHandler = function(event) {
  this.models_ASDocModel_app.service.removeEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_configIOErrorHandler, this, 'models_ASDocModel_configIOErrorHandler'));
  this.models_ASDocModel_app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_configCompleteHandler, this, 'models_ASDocModel_configCompleteHandler'));
  var /** @type {Object} */ config = JSON.parse(this.models_ASDocModel_app.service.data);
  this.models_ASDocModel_tagNameMap = config["tagNames"];
  this.models_ASDocModel_platformList = this.platforms.slice();
  this.models_ASDocModel_currentPlatform = org.apache.royale.utils.Language.string(this.models_ASDocModel_platformList.shift());
  var /** @type {string} */ middle = "." + this.models_ASDocModel_currentPlatform;
  this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_tagsCompleteHandler, this, 'models_ASDocModel_tagsCompleteHandler'));
  this.models_ASDocModel_app.service.url = "tags" + middle + ".json";
  this.models_ASDocModel_app.service.send();
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.models_ASDocModel_tagsCompleteHandler = function(event) {
  var /** @type {string} */ middle = null;
  this.models_ASDocModel_app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_tagsCompleteHandler, this, 'models_ASDocModel_tagsCompleteHandler'));
  var /** @type {Object} */ config = JSON.parse(this.models_ASDocModel_app.service.data);
  if (!this.models_ASDocModel__knownTags)
    this.models_ASDocModel__knownTags = /* implicit cast */ org.apache.royale.utils.Language.as(config["tags"], Array, true); else {
    var /** @type {Array} */ arr = /* implicit cast */ org.apache.royale.utils.Language.as(config["tags"], Array, true);
    var /** @type {number} */ n = (arr.length) >> 0;
    for (var /** @type {number} */ i = 0; i < n; i++) {
      var /** @type {string} */ tag = org.apache.royale.utils.Language.string(arr[i]);
      if (this.models_ASDocModel__knownTags.indexOf(tag) == -1)
        this.models_ASDocModel__knownTags.push(tag);
    }
  }
  //var /** @type {string} */ middle = null;
  if (this.models_ASDocModel_platformList.length) {
    this.models_ASDocModel_currentPlatform = org.apache.royale.utils.Language.string(this.models_ASDocModel_platformList.shift());
    middle = "." + this.models_ASDocModel_currentPlatform;
    this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_tagsCompleteHandler, this, 'models_ASDocModel_tagsCompleteHandler'));
    this.models_ASDocModel_app.service.url = "tags" + middle + ".json";
    this.models_ASDocModel_app.service.send();
  } else {
    this.models_ASDocModel_platformList = this.platforms.slice();
    this.models_ASDocModel_currentPlatform = org.apache.royale.utils.Language.string(this.models_ASDocModel_platformList.shift());
    middle = "." + this.models_ASDocModel_currentPlatform;
    this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classListCompleteHandler, this, 'models_ASDocModel_classListCompleteHandler'));
    this.models_ASDocModel_app.service.url = "classlist" + middle + ".json";
    this.models_ASDocModel_app.service.send();
  }
};


/**
 * @private
 * @type {Object}
 */
models.ASDocModel.prototype.models_ASDocModel_masterData = null;


/**
 * @royaleignorecoercion ASDocClassData 
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.models_ASDocModel_classListCompleteHandler = function(event) {
  var /** @type {ASDocClassData} */ item = null;
  this.models_ASDocModel_app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classListCompleteHandler, this, 'models_ASDocModel_classListCompleteHandler'));
  if (!this.models_ASDocModel_masterData)
    this.models_ASDocModel_masterData = {"classnames":[], "data":[]};
  var /** @type {Array} */ allNames = this.allClasses;
  var /** @type {Object} */ moreData = JSON.parse(this.models_ASDocModel_app.service.data);
  var /** @type {Array} */ arr = /* implicit cast */ org.apache.royale.utils.Language.as(moreData["classnames"], Array, true);
  var /** @type {number} */ n = (arr.length) >> 0;
  //var /** @type {ASDocClassData} */ item = null;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {string} */ cname = org.apache.royale.utils.Language.string(arr[i]);
    var /** @type {number} */ j = (allNames.indexOf(cname)) >> 0;
    if (j != -1) {
      item = this.models_ASDocModel_masterData["data"][i];
      item.platforms.push(this.models_ASDocModel_currentPlatform);
    } else {
      item = new ASDocClassData(cname, this.models_ASDocModel_currentPlatform);
      this.models_ASDocModel_masterData["data"]["push"](item);
      this.models_ASDocModel_masterData["classnames"]["push"](cname);
    }
  }
  if (this.models_ASDocModel_platformList.length) {
    this.models_ASDocModel_currentPlatform = org.apache.royale.utils.Language.string(this.models_ASDocModel_platformList.shift());
    var /** @type {string} */ middle = "." + this.models_ASDocModel_currentPlatform;
    this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classListCompleteHandler, this, 'models_ASDocModel_classListCompleteHandler'));
    this.models_ASDocModel_app.service.url = "classlist" + middle + ".json";
    this.models_ASDocModel_app.service.send();
  } else {
    this.models_ASDocModel_platformList = this.platforms.slice();
    this.models_ASDocModel_currentPlatform = org.apache.royale.utils.Language.string(this.models_ASDocModel_platformList.shift());
    middle = "." + this.models_ASDocModel_currentPlatform;
    this.models_ASDocModel_app.service.addEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classesIOErrorHandler, this, 'models_ASDocModel_classesIOErrorHandler'));
    this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classesCompleteHandler, this, 'models_ASDocModel_classesCompleteHandler'));
    this.models_ASDocModel_app.service.url = "classes" + middle + ".json";
    this.models_ASDocModel_app.service.send();
  }
};


/**
 * @private
 */
models.ASDocModel.prototype.models_ASDocModel_loadClassesForNextPlatform = function() {
  if (this.models_ASDocModel_platformList.length) {
    this.models_ASDocModel_currentPlatform = org.apache.royale.utils.Language.string(this.models_ASDocModel_platformList.shift());
    var /** @type {string} */ middle = "." + this.models_ASDocModel_currentPlatform;
    this.models_ASDocModel_app.service.addEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classesIOErrorHandler, this, 'models_ASDocModel_classesIOErrorHandler'));
    this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classesCompleteHandler, this, 'models_ASDocModel_classesCompleteHandler'));
    this.models_ASDocModel_app.service.url = "classes" + middle + ".json";
    this.models_ASDocModel_app.service.send();
  } else {
    this.models_ASDocModel_filterPackageList();
  }
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.models_ASDocModel_classesIOErrorHandler = function(event) {
  this.models_ASDocModel_app.service.removeEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classesIOErrorHandler, this, 'models_ASDocModel_classesIOErrorHandler'));
  this.models_ASDocModel_app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classesCompleteHandler, this, 'models_ASDocModel_classesCompleteHandler'));
  org.apache.royale.utils.Language.trace("[ASDoc] failed to load URL: " + this.models_ASDocModel_app.service.url);
  this.models_ASDocModel_loadClassesForNextPlatform();
};


/**
 * @royaleignorecoercion ASDocClass 
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.models_ASDocModel_classesCompleteHandler = function(event) {
  var /** @type {ASDocClass} */ item = null;
  this.models_ASDocModel_app.service.removeEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classesIOErrorHandler, this, 'models_ASDocModel_classesIOErrorHandler'));
  this.models_ASDocModel_app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classesCompleteHandler, this, 'models_ASDocModel_classesCompleteHandler'));
  if (!this.models_ASDocModel_masterData["filterData"])
    this.models_ASDocModel_masterData["filterData"] = {};
  var /** @type {Array} */ allNames = this.allClasses;
  var /** @type {Object} */ moreData = JSON.parse(this.models_ASDocModel_app.service.data);
  var /** @type {Array} */ arr = /* implicit cast */ org.apache.royale.utils.Language.as(moreData["classes"], Array, true);
  var /** @type {number} */ n = (arr.length) >> 0;
  //var /** @type {ASDocClass} */ item = null;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {string} */ cname = org.apache.royale.utils.Language.string(arr[i]["name"]);
    item = this.models_ASDocModel_masterData["filterData"][cname];
    if (item) {
      this.models_ASDocModel_addTags(item, /* implicit cast */ org.apache.royale.utils.Language.as(arr[i]["tags"], Array, true));
    } else {
      item = new ASDocClass();
      item.qname = cname;
      item.description = org.apache.royale.utils.Language.string(arr[i]["description"]);
      this.models_ASDocModel_addTags(item, /* implicit cast */ org.apache.royale.utils.Language.as(arr[i]["tags"], Array, true));
      this.models_ASDocModel_masterData["filterData"][cname] = item;
    }
  }
  this.models_ASDocModel_loadClassesForNextPlatform();
};


/**
 * @private
 * @param {ASDocClass} item
 * @param {Array} tags
 */
models.ASDocModel.prototype.models_ASDocModel_addTags = function(item, tags) {
  var /** @type {Object} */ tag = null;
  //var /** @type {Object} */ tag = null;
  if (!tags)
    return;
  if (!item.tags) {
    item.tags = tags;
  } else {
    var foreachiter0_target = tags;
    for (var foreachiter0 in foreachiter0_target) 
    {
    tag = foreachiter0_target[foreachiter0];
    {
      var /** @type {boolean} */ foundit = false;
      var foreachiter1_target = item.tags;
      for (var foreachiter1 in foreachiter1_target) 
      {
      var t = foreachiter1_target[foreachiter1];
      {
        if (t["tagName"] == tag["tagName"]) {
          foundit = true;
          break;
        }
      }}
      
      if (!foundit)
        item.tags.push(tag);
    }}
    
  }
};


/**
 * @private
 */
models.ASDocModel.prototype.models_ASDocModel_filterPackageList = function() {
  var /** @type {string} */ packageName = null;
  var /** @type {Object} */ packages = {};
  var foreachiter2_target = this.models_ASDocModel_masterData["data"];
  for (var foreachiter2 in foreachiter2_target) 
  {
  var cdata = foreachiter2_target[foreachiter2];
  {
    var /** @type {string} */ qname = cdata.label;
    //var /** @type {string} */ packageName = null;
    var /** @type {number} */ c = (qname.lastIndexOf(".")) >> 0;
    if (c == -1)
      packageName = "Top Level"; else {
      packageName = qname.substr(0, c);
      qname = qname.substr(c + 1);
    }
    if (packages[packageName] == null) {
      packages[packageName] = {};
    }
    packages[packageName][qname] = {};
  }}
  
  var /** @type {Array} */ arr = [];
  for (var /** @type {string} */ p in packages) {
    if (this.models_ASDocModel_filter == null)
      arr.push(p);
    else if (this.filterPackage(p))
      arr.push(p);
  }
  arr.sort();
  this.models_ASDocModel__packageList = arr;
  this.models_ASDocModel_allPackages = packages;
  this.dispatchEvent(new org.apache.royale.events.Event("packageListChanged"));
};


/**
 * @private
 * @type {Object}
 */
models.ASDocModel.prototype.models_ASDocModel_allPackages = null;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel__packageList = null;


/**
 * @private
 * @type {string}
 */
models.ASDocModel.prototype.models_ASDocModel__currentPackage = null;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel__classList = null;


/**
 * @private
 * @type {string}
 */
models.ASDocModel.prototype.models_ASDocModel__currentClass = null;


/**
 * @private
 * @type {Object}
 */
models.ASDocModel.prototype.models_ASDocModel__currentClassData = null;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel__baseClassList = null;


/**
 * @private
 * @type {Object}
 */
models.ASDocModel.prototype.models_ASDocModel__attributesMap = null;


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.models_ASDocModel_classIOErrorHandler = function(event) {
  this.models_ASDocModel_app.service.removeEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classIOErrorHandler, this, 'models_ASDocModel_classIOErrorHandler'));
  this.models_ASDocModel_app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classCompleteHandler, this, 'models_ASDocModel_classCompleteHandler'));
  this.models_ASDocModel_loadClassForNextPlatform();
};


/**
 * @royaleignorecoercion ASDocClass
 * @royaleignorecoercion ASDocClassMembers
 * @royaleignorecoercion ASDocClassFunction
 * @royaleignorecoercion ASDocClassField
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.models_ASDocModel_classCompleteHandler = function(event) {
  this.models_ASDocModel_app.service.removeEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classIOErrorHandler, this, 'models_ASDocModel_classIOErrorHandler'));
  this.models_ASDocModel_app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classCompleteHandler, this, 'models_ASDocModel_classCompleteHandler'));
  var /** @type {ASDocClass} */ data = this.models_ASDocModel_app.reviver.parse(this.models_ASDocModel_app.service.data);
  if (this.models_ASDocModel__currentClassData == null) {
    this.models_ASDocModel__currentClassData = data;
    this.models_ASDocModel__publicProperties = [];
    this.models_ASDocModel__publicMethods = [];
    this.models_ASDocModel__publicEvents = [];
    this.models_ASDocModel__constructorList = [];
    this.models_ASDocModel__baseClassList = [];
    this.models_ASDocModel__inheritance = null;
    this.models_ASDocModel__attributesMap = {};
    this.models_ASDocModel__attributes = null;
  }
  else if (this.models_ASDocModel_currentPlatform == this.platforms[0])
    this.models_ASDocModel__baseClassList.push(data.qname);
  var foreachiter3_target = data.members;
  for (var foreachiter3 in foreachiter3_target) 
  {
  var m = foreachiter3_target[foreachiter3];
  {
    if (!m.platforms)
      m.platforms = [];
    m.platforms.push(this.models_ASDocModel_currentPlatform);
    m.shortDescription = this.models_ASDocModel_makeShortDescription(m.description);
    if (m.type == "method") {
      if (m.qname == this.models_ASDocModel__currentPackage + "." + this.models_ASDocModel__currentClass) {
        var /** @type {boolean} */ foundMatch = false;
        var /** @type {number} */ n = (this.models_ASDocModel__constructorList.length) >> 0;
        for (var /** @type {number} */ i = 0; i < n; i++) {
          var /** @type {ASDocClassMembers} */ q = this.models_ASDocModel__constructorList[i];
          var /** @type {ASDocClassMembers} */ mm = m;
          if (q.params.length == mm.params.length) {
            foundMatch = true;
            if (q.platforms.indexOf(mm.platforms[0]) == -1)
              q.platforms.push(mm.platforms[0]);
            break;
          }
        }
        if (!foundMatch)
          this.models_ASDocModel__constructorList.push(m);
      }
      else if (m.qname != data.qname)
        this.models_ASDocModel_addIfNeededAndMakeAttributes(this.models_ASDocModel__publicMethods, m);
    } else if (m.type == "accessor") {
      var /** @type {ASDocClassAccessor} */ a = m;
      this.models_ASDocModel_addIfNeededAndMakeAttributes(this.models_ASDocModel__publicProperties, a);
    } else if (m.type == "field") {
      var /** @type {ASDocClassField} */ f = m;
      this.models_ASDocModel_addIfNeededAndMakeAttributes(this.models_ASDocModel__publicProperties, f);
    }
    if (this.models_ASDocModel_masterData["classnames"]["indexOf"](m.return) != -1) {
      var /** @type {string} */ href = m.return;
      var /** @type {number} */ c = (href.lastIndexOf(".")) >> 0;
      if (c != -1) {
        m.return = href.substr(c + 1);
        href = href.substr(0, c) + models.ASDocModel.DELIMITER + href.substr(c + 1);
      }
      m.returnhref = "#!" + href;
    }
  }}
  
  var foreachiter4_target = data.events;
  for (var foreachiter4 in foreachiter4_target) 
  {
  var e = foreachiter4_target[foreachiter4];
  {
    if (!e.platforms)
      e.platforms = [];
    e.platforms.push(this.models_ASDocModel_currentPlatform);
    e.shortDescription = this.models_ASDocModel_makeShortDescription(e.description);
    this.models_ASDocModel_addIfNeededAndMakeAttributes(this.models_ASDocModel__publicEvents, e);
    if (this.models_ASDocModel_masterData["classnames"]["indexOf"](e.type) != -1) {
      href = e.type;
      c = (href.lastIndexOf(".")) >> 0;
      if (c != -1) {
        e.type = href.substr(c + 1);
        href = href.substr(0, c) + models.ASDocModel.DELIMITER + href.substr(c + 1);
      }
      e.typehref = "#!" + href;
    }
  }}
  
  var foreachiter5_target = data.tags;
  for (var foreachiter5 in foreachiter5_target) 
  {
  var t = foreachiter5_target[foreachiter5];
  {
    if (!this.models_ASDocModel__attributesMap[t.tagName]) {
      this.models_ASDocModel__attributesMap[t.tagName] = t.values;
    }
  }}
  
  if (data.type == "class" && data.baseClassname && data.baseClassname.indexOf("flash.") != 0 && data.baseClassname.indexOf("goog.") != 0) {
    this.models_ASDocModel_app.service.addEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classIOErrorHandler, this, 'models_ASDocModel_classIOErrorHandler'));
    this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classCompleteHandler, this, 'models_ASDocModel_classCompleteHandler'));
    this.models_ASDocModel_app.service.url = this.models_ASDocModel_computeFileName(data.baseClassname);
    this.models_ASDocModel_app.service.send();
  } else if (data.type == "interface" && data.baseInterfaceNames && data.baseInterfaceNames[0]["indexOf"]("flash.") != 0 && data.baseInterfaceNames[0]["indexOf"]("goog.") != 0) {
    this.models_ASDocModel_app.service.addEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classIOErrorHandler, this, 'models_ASDocModel_classIOErrorHandler'));
    this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_completeInterfaceHandler, this, 'models_ASDocModel_completeInterfaceHandler'));
    this.models_ASDocModel_extensions = data.baseInterfaceNames;
    this.models_ASDocModel_app.service.url = this.models_ASDocModel_computeFileName(org.apache.royale.utils.Language.string(data.baseInterfaceNames[0]));
    this.models_ASDocModel_app.service.send();
  } else {
    this.models_ASDocModel_loadClassForNextPlatform();
  }
};


/**
 * @private
 */
models.ASDocModel.prototype.models_ASDocModel_loadClassForNextPlatform = function() {
  if (this.models_ASDocModel_platformList.length) {
    this.models_ASDocModel_currentPlatform = org.apache.royale.utils.Language.string(this.models_ASDocModel_platformList.shift());
    this.models_ASDocModel_app.service.addEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classIOErrorHandler, this, 'models_ASDocModel_classIOErrorHandler'));
    this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classCompleteHandler, this, 'models_ASDocModel_classCompleteHandler'));
    this.models_ASDocModel_app.service.url = this.models_ASDocModel_computeFileName(this.models_ASDocModel__currentPackage + "." + this.models_ASDocModel__currentClass);
    this.models_ASDocModel_app.service.send();
  } else {
    org.apache.royale.utils.Language.sortOn(this.models_ASDocModel__publicMethods, "qname");
    org.apache.royale.utils.Language.sortOn(this.models_ASDocModel__publicEvents, "qname");
    org.apache.royale.utils.Language.sortOn(this.models_ASDocModel__publicProperties, "qname");
    this.dispatchEvent(new org.apache.royale.events.Event("currentDataChanged"));
  }
};


/**
 * @royalesuppresscompleximplicitcoercion true
 * @private
 * @param {Array} arr
 * @param {ASDocClassEvents} data
 */
models.ASDocModel.prototype.models_ASDocModel_addIfNeededAndMakeAttributes = function(arr, data) {
  var /** @type {number} */ n = (arr.length) >> 0;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {ASDocClassEvents} */ obj = arr[i];
    if (obj.qname == data.qname) {
      var /** @type {string} */ platform = org.apache.royale.utils.Language.string(data.platforms[0]);
      if (obj.platforms.indexOf(platform) == -1)
        obj.platforms.push(platform);
      if (obj.description == "" && data.description != "") {
        this.models_ASDocModel_addAttributes(data, data);
        arr.splice(i, 1, data);
        data.ownerhref = this.currentPackage + models.ASDocModel.DELIMITER + this.currentClass;
      } else {
        this.models_ASDocModel_addAttributes(obj, data);
      }
      return;
    }
  }
  this.models_ASDocModel_addAttributes(data, data);
  if (data.type == "method") {
    this.models_ASDocModel_processParams(data);
  }
  data.ownerhref = this.currentPackage + models.ASDocModel.DELIMITER + this.currentClass;
  arr.push(data);
};


/**
 * @royalesuppresscompleximplicitcoercion true
 * @private
 * @param {ASDocClassEvents} dest
 * @param {ASDocClassEvents} src
 */
models.ASDocModel.prototype.models_ASDocModel_addAttributes = function(dest, src) {
  var /** @type {Array} */ arr = null;
  var /** @type {ASDocClassTags} */ tag = null;
  var /** @type {ASDocClassAttribute} */ attr = null;
  if (!src.tags)
    return;
  //var /** @type {Array} */ arr = null;
  if (!dest.attributes) {
    dest.attributes = [];
  }
  arr = dest.attributes;
  var /** @type {Object} */ map = {};
  //var /** @type {ASDocClassAttribute} */ attr = null;
  //var /** @type {ASDocClassTags} */ tag = null;
  var /** @type {number} */ n = (arr.length) >> 0;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    attr = arr[i];
    map[attr.name] = attr.value;
  }
  n = (src.tags.length) >> 0;
  for (i = 0; i < n; i++) {
    tag = src.tags[i];
    if (map[tag.tagName])
      continue;
    var /** @type {ASDocClassAttribute} */ obj = new ASDocClassAttribute();
    var /** @type {string} */ k = org.apache.royale.utils.Language.string(this.models_ASDocModel_tagNameMap[tag.tagName]);
    if (k != null)
      obj.name = k;
    else
      obj.name = tag.tagName;
    var /** @type {string} */ s = "";
    var /** @type {boolean} */ firstOne = true;
    var /** @type {Array} */ o = tag.values;
    var foreachiter6_target = o;
    for (var foreachiter6 in foreachiter6_target) 
    {
    var q = foreachiter6_target[foreachiter6];
    {
      if (!firstOne)
        s += ", ";
      firstOne = false;
      s += q;
    }}
    
    if (map[obj.name]) {
      map[obj.name]["value"] += "," + s;
    } else {
      obj.value = s;
      arr.push(obj);
    }
  }
};


/**
 * @private
 * @param {ASDocClassMembers} data
 */
models.ASDocModel.prototype.models_ASDocModel_processParams = function(data) {
  var /** @type {number} */ n = (data.params.length) >> 0;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {Object} */ param = data.params[i];
    if (this.models_ASDocModel_masterData["classnames"]["indexOf"](param["type"]) != -1) {
      var /** @type {string} */ href = org.apache.royale.utils.Language.string(param["type"]);
      var /** @type {number} */ c = (href.lastIndexOf(".")) >> 0;
      if (c != -1) {
        param["type"] = href.substr(c + 1);
        href = href.substr(0, c) + models.ASDocModel.DELIMITER + href.substr(c + 1);
      }
      param["typehref"] = "#!" + href;
    }
  }
};


/**
 * @private
 * @param {string} input
 * @return {string}
 */
models.ASDocModel.prototype.models_ASDocModel_computeFileName = function(input) {
  return input.replace(new RegExp("\\.", "g"), "/") + "." + this.models_ASDocModel_currentPlatform + ".json";
};


/**
 * @private
 * @param {string} input
 * @return {string}
 */
models.ASDocModel.prototype.models_ASDocModel_makeShortDescription = function(input) {
  if (!input)
    return "";
  var /** @type {number} */ c = (input.indexOf(".")) >> 0;
  if (c == -1)
    return input;
  return input.substr(0, c + 1);
};


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel_extensions = null;


/**
 * @private
 */
models.ASDocModel.prototype.models_ASDocModel_loadInterfaceForNextPlatform = function() {
  if (this.models_ASDocModel_platformList.length) {
    this.models_ASDocModel_currentPlatform = org.apache.royale.utils.Language.string(this.models_ASDocModel_platformList.shift());
    this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_completeInterfaceHandler, this, 'models_ASDocModel_completeInterfaceHandler'));
    this.models_ASDocModel_app.service.url = this.models_ASDocModel_computeFileName(this.models_ASDocModel__currentPackage + "." + this.models_ASDocModel__currentClass);
    this.models_ASDocModel_app.service.send();
  } else {
    org.apache.royale.utils.Language.sortOn(this.models_ASDocModel__publicMethods, "qname");
    org.apache.royale.utils.Language.sortOn(this.models_ASDocModel__publicEvents, "qname");
    org.apache.royale.utils.Language.sortOn(this.models_ASDocModel__publicProperties, "qname");
    this.dispatchEvent(new org.apache.royale.events.Event("currentDataChanged"));
  }
};


/**
 * @royaleignorecoercion ASDocInterface 
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.models_ASDocModel_completeInterfaceHandler = function(event) {
  this.models_ASDocModel_app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_completeInterfaceHandler, this, 'models_ASDocModel_completeInterfaceHandler'));
  var /** @type {ASDocInterface} */ data = this.models_ASDocModel_app.reviver.parse(this.models_ASDocModel_app.service.data);
  if (this.models_ASDocModel__currentClassData == null) {
    this.models_ASDocModel__currentClassData = data;
    this.models_ASDocModel__publicProperties = [];
    this.models_ASDocModel__publicMethods = [];
    this.models_ASDocModel__publicEvents = [];
    this.models_ASDocModel__constructorList = [];
    this.models_ASDocModel__baseClassList = [];
    this.models_ASDocModel__inheritance = null;
    this.models_ASDocModel__attributesMap = {};
    this.models_ASDocModel__attributes = null;
  }
  else if (this.models_ASDocModel_currentPlatform == this.platforms[0])
    this.models_ASDocModel__baseClassList.push(data.qname);
  var foreachiter7_target = data.members;
  for (var foreachiter7 in foreachiter7_target) 
  {
  var m = foreachiter7_target[foreachiter7];
  {
    if (!m.platforms)
      m.platforms = [];
    m.platforms.push(this.models_ASDocModel_currentPlatform);
    m.shortDescription = this.models_ASDocModel_makeShortDescription(m.description);
    if (m.type == "method") {
      if (m.qname == this.models_ASDocModel__currentPackage + "." + this.models_ASDocModel__currentClass) {
        var /** @type {boolean} */ foundMatch = false;
        var /** @type {number} */ n = (this.models_ASDocModel__constructorList.length) >> 0;
        for (var /** @type {number} */ i = 0; i < n; i++) {
          var /** @type {ASDocClassMembers} */ q = this.models_ASDocModel__constructorList[i];
          if (q.params.length == m.params.length) {
            foundMatch = true;
            if (q.platforms.indexOf(m.platforms[0]) == -1)
              q.platforms.push(m.platforms[0]);
            break;
          }
        }
        if (!foundMatch)
          this.models_ASDocModel__constructorList.push(m);
      }
      else if (m.qname != data.qname)
        this.models_ASDocModel_addIfNeededAndMakeAttributes(this.models_ASDocModel__publicMethods, m);
    } else {
      this.models_ASDocModel_addIfNeededAndMakeAttributes(this.models_ASDocModel__publicProperties, m);
    }
  }}
  
  var foreachiter8_target = data.events;
  for (var foreachiter8 in foreachiter8_target) 
  {
  var e = foreachiter8_target[foreachiter8];
  {
    if (!e.platforms)
      e.platforms = [];
    e.platforms.push(this.models_ASDocModel_currentPlatform);
    e.shortDescription = this.models_ASDocModel_makeShortDescription(e.description);
    this.models_ASDocModel_addIfNeededAndMakeAttributes(this.models_ASDocModel__publicEvents, e);
    if (this.models_ASDocModel_masterData["classnames"]["indexOf"](e.type) != -1) {
      var /** @type {string} */ href = e.type;
      var /** @type {number} */ c = (href.lastIndexOf(".")) >> 0;
      if (c != -1) {
        e.type = href.substr(c + 1);
        href = href.substr(0, c) + models.ASDocModel.DELIMITER + href.substr(c + 1);
      }
      e.typehref = "#!" + href;
    }
  }}
  
  var foreachiter9_target = data.tags;
  for (var foreachiter9 in foreachiter9_target) 
  {
  var t = foreachiter9_target[foreachiter9];
  {
    if (!this.models_ASDocModel__attributesMap[t.tagName]) {
      this.models_ASDocModel__attributesMap[t.tagName] = t.values;
    }
  }}
  
  if (data.baseInterfaceNames)
    this.models_ASDocModel_extensions = this.models_ASDocModel_extensions.concat(data.baseInterfaceNames);
  while (this.models_ASDocModel_extensions.length && this.models_ASDocModel_extensions[0]["indexOf"]("flash.") == 0)
    this.models_ASDocModel_extensions.shift();
  if (this.models_ASDocModel_extensions.length) {
    this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_completeInterfaceHandler, this, 'models_ASDocModel_completeInterfaceHandler'));
    this.models_ASDocModel_app.service.url = this.models_ASDocModel_computeFileName(org.apache.royale.utils.Language.string(this.models_ASDocModel_extensions.shift()));
    this.models_ASDocModel_app.service.send();
  } else {
    this.models_ASDocModel_loadInterfaceForNextPlatform();
  }
};


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel__publicProperties = null;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel__publicMethods = null;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel__constructorList = null;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel__publicEvents = null;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel__inheritance = null;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel__attributes = null;


/**
 * @param {string} p
 * @return {boolean}
 */
models.ASDocModel.prototype.filterPackage = function(p) {
  var /** @type {Object} */ packageData = this.models_ASDocModel_allPackages[p];
  for (var /** @type {string} */ pd in packageData) {
    if (this.models_ASDocModel_filter(p == "Top Level" ? pd : p + "." + pd))
      return true;
  }
  return false;
};


/**
 * @private
 * @type {Function}
 */
models.ASDocModel.prototype.models_ASDocModel_filter = null;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.models_ASDocModel__filterTags = null;


/**
 * @royalesuppresscompleximplicitcoercion true
 * @param {string} className
 * @return {boolean}
 */
models.ASDocModel.prototype.filterByTags = function(className) {
  var /** @type {ASDocClass} */ classData = this.models_ASDocModel_masterData["filterData"][className];
  var /** @type {Array} */ tags = classData.tags;
  if (!tags)
    return false;
  var foreachiter10_target = tags;
  for (var foreachiter10 in foreachiter10_target) 
  {
  var tag = foreachiter10_target[foreachiter10];
  {
    var foreachiter11_target = this.filterTags;
    for (var foreachiter11 in foreachiter11_target) 
    {
    var obj = foreachiter11_target[foreachiter11];
    {
      if (obj["name"] == tag["tagName"]) {
        if (tag["values"] == null || tag["values"]["length"] == 0)
          return true;
        var foreachiter12_target = tag["values"];
        for (var foreachiter12 in foreachiter12_target) 
        {
        var v = foreachiter12_target[foreachiter12];
        {
          if (v == obj["value"])
            return true;
        }}
        
      }
    }}
    
  }}
  
  return false;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.core.IStrand}
 */
models.ASDocModel.prototype.strand;


models.ASDocModel.prototype.set__strand = function(value) {
  this.models_ASDocModel_app = value;
  this.models_ASDocModel_app.addEventListener("initialize", org.apache.royale.utils.Language.closure(this.models_ASDocModel_initializeHandler, this, 'models_ASDocModel_initializeHandler'));
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
models.ASDocModel.prototype.platforms;


models.ASDocModel.prototype.get__platforms = function() {
  return this.models_ASDocModel__platforms;
};


models.ASDocModel.prototype.set__platforms = function(value) {
  this.models_ASDocModel__platforms = value;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
models.ASDocModel.prototype.knownTags;


models.ASDocModel.prototype.get__knownTags = function() {
  return this.models_ASDocModel__knownTags;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
models.ASDocModel.prototype.allClasses;


models.ASDocModel.prototype.get__allClasses = function() {
  return this.models_ASDocModel_masterData["classnames"];
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
models.ASDocModel.prototype.packageList;


models.ASDocModel.prototype.get__packageList = function() {
  return this.models_ASDocModel__packageList;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
models.ASDocModel.prototype.currentPackage;


models.ASDocModel.prototype.get__currentPackage = function() {
  return this.models_ASDocModel__currentPackage;
};


models.ASDocModel.prototype.set__currentPackage = function(value) {
  if (value != this.models_ASDocModel__currentPackage) {
    this.models_ASDocModel__currentPackage = value;
    var /** @type {Object} */ packageData = this.models_ASDocModel_allPackages[value];
    var /** @type {Array} */ arr = [];
    for (var /** @type {string} */ p in packageData) {
      if (this.models_ASDocModel_filter == null)
        arr.push({"label":p, "href":value + models.ASDocModel.DELIMITER + p});
      else if (this.models_ASDocModel_filter(value == "Top Level" ? p : value + "." + p))
        arr.push({"label":p, "href":value + models.ASDocModel.DELIMITER + p});
    }
    arr.sort();
    this.models_ASDocModel__classList = arr;
    this.dispatchEvent(new org.apache.royale.events.Event("currentPackageChanged"));
  }
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
models.ASDocModel.prototype.classList;


models.ASDocModel.prototype.get__classList = function() {
  return this.models_ASDocModel__classList;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
models.ASDocModel.prototype.currentClass;


models.ASDocModel.prototype.get__currentClass = function() {
  return this.models_ASDocModel__currentClass;
};


models.ASDocModel.prototype.set__currentClass = function(value) {
  if (value != this.models_ASDocModel__currentClass) {
    this.models_ASDocModel__currentClass = value;
    var /** @type {Object} */ packageData = this.models_ASDocModel_allPackages[this.models_ASDocModel__currentPackage];
    this.dispatchEvent(new org.apache.royale.events.Event("currentClassChanged"));
    this.models_ASDocModel_platformList = this.platforms.slice();
    this.models_ASDocModel_currentPlatform = org.apache.royale.utils.Language.string(this.models_ASDocModel_platformList.shift());
    this.models_ASDocModel_app.service.addEventListener("ioError", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classIOErrorHandler, this, 'models_ASDocModel_classIOErrorHandler'));
    this.models_ASDocModel_app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.models_ASDocModel_classCompleteHandler, this, 'models_ASDocModel_classCompleteHandler'));
    this.models_ASDocModel_app.service.url = this.models_ASDocModel_computeFileName(this.models_ASDocModel__currentPackage + "." + this.models_ASDocModel__currentClass);
    this.models_ASDocModel_app.service.send();
    this.models_ASDocModel__currentClassData = null;
  }
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
models.ASDocModel.prototype.publicProperties;


models.ASDocModel.prototype.get__publicProperties = function() {
  return this.models_ASDocModel__publicProperties;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
models.ASDocModel.prototype.publicMethods;


models.ASDocModel.prototype.get__publicMethods = function() {
  return this.models_ASDocModel__publicMethods;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
models.ASDocModel.prototype.constructorList;


models.ASDocModel.prototype.get__constructorList = function() {
  return this.models_ASDocModel__constructorList;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
models.ASDocModel.prototype.publicEvents;


models.ASDocModel.prototype.get__publicEvents = function() {
  return this.models_ASDocModel__publicEvents;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
models.ASDocModel.prototype.description;


models.ASDocModel.prototype.get__description = function() {
  return org.apache.royale.utils.Language.string(this.models_ASDocModel__currentClassData["description"]);
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
models.ASDocModel.prototype.inheritance;


models.ASDocModel.prototype.get__inheritance = function() {
  var /** @type {Array} */ s = null;
  if (!this.models_ASDocModel__inheritance) {
    //var /** @type {Array} */ s = null;
    if (this.models_ASDocModel__baseClassList.length == 0)
      s = [{"label":this.currentClass}, {"label":"Object"}]; else {
      s = [{"label":this.currentClass}];
      var foreachiter13_target = this.models_ASDocModel__baseClassList;
      for (var foreachiter13 in foreachiter13_target) 
      {
      var p = foreachiter13_target[foreachiter13];
      {
        var /** @type {string} */ end = p;
        var /** @type {number} */ c = (end.lastIndexOf(".")) >> 0;
        if (c != -1)
          end = end.substr(c + 1);
        var /** @type {Object} */ data = {"label":end};
        if (this.models_ASDocModel_masterData["classnames"]["indexOf"](p) != -1) {
          c = (p.lastIndexOf(".")) >> 0;
          if (c != -1) {
            p = p.substr(0, c) + models.ASDocModel.DELIMITER + p.substr(c + 1);
          } else {
            p = models.ASDocModel.DELIMITER + p;
          }
          data["href"] = p;
        }
        s.push(data);
      }}
      
    }
    this.models_ASDocModel__inheritance = s;
  }
  return this.models_ASDocModel__inheritance;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
models.ASDocModel.prototype.attributes;


models.ASDocModel.prototype.get__attributes = function() {
  if (!this.models_ASDocModel__attributes) {
    this.models_ASDocModel__attributes = [];
    for (var /** @type {string} */ p in this.models_ASDocModel__attributesMap) {
      var /** @type {Object} */ obj = {};
      var /** @type {Array} */ o = this.models_ASDocModel__attributesMap[p];
      var /** @type {string} */ k = org.apache.royale.utils.Language.string(this.models_ASDocModel_tagNameMap[p]);
      if (k != null)
        obj["name"] = k;
      else
        obj["name"] = p;
      var /** @type {string} */ s = "";
      var /** @type {boolean} */ firstOne = true;
      var /** @type {string} */ joiner = ", ";
      if (p == "commentary")
        joiner = "  ";
      if (p == "example") {
        joiner = "<br/>";
        firstOne = false;
      }
      var foreachiter14_target = o;
      for (var foreachiter14 in foreachiter14_target) 
      {
      var q = foreachiter14_target[foreachiter14];
      {
        if (!firstOne)
          s += joiner;
        firstOne = false;
        s += q;
      }}
      
      obj["value"] = s;
      this.models_ASDocModel__attributes.push(obj);
    }
  }
  return this.models_ASDocModel__attributes;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
models.ASDocModel.prototype.filterTags;


models.ASDocModel.prototype.get__filterTags = function() {
  return this.models_ASDocModel__filterTags;
};


models.ASDocModel.prototype.set__filterTags = function(value) {
  this.models_ASDocModel__filterTags = value;
  if (this.models_ASDocModel__filterTags)
    this.models_ASDocModel_filter = org.apache.royale.utils.Language.closure(this.filterByTags, this, 'filterByTags');
  else
    this.models_ASDocModel_filter = null;
  this.models_ASDocModel_filterPackageList();
};


Object.defineProperties(models.ASDocModel.prototype, /** @lends {models.ASDocModel.prototype} */ {
/**
 * @type {org.apache.royale.core.IStrand}
 */
strand: {
set: models.ASDocModel.prototype.set__strand},
/**
 * @type {Array}
 */
platforms: {
get: models.ASDocModel.prototype.get__platforms,
set: models.ASDocModel.prototype.set__platforms},
/**
 * @type {Array}
 */
knownTags: {
get: models.ASDocModel.prototype.get__knownTags},
/**
 * @type {Array}
 */
allClasses: {
get: models.ASDocModel.prototype.get__allClasses},
/**
 * @type {Array}
 */
packageList: {
get: models.ASDocModel.prototype.get__packageList},
/**
 * @type {string}
 */
currentPackage: {
get: models.ASDocModel.prototype.get__currentPackage,
set: models.ASDocModel.prototype.set__currentPackage},
/**
 * @type {Array}
 */
classList: {
get: models.ASDocModel.prototype.get__classList},
/**
 * @type {string}
 */
currentClass: {
get: models.ASDocModel.prototype.get__currentClass,
set: models.ASDocModel.prototype.set__currentClass},
/**
 * @type {Array}
 */
publicProperties: {
get: models.ASDocModel.prototype.get__publicProperties},
/**
 * @type {Array}
 */
publicMethods: {
get: models.ASDocModel.prototype.get__publicMethods},
/**
 * @type {Array}
 */
constructorList: {
get: models.ASDocModel.prototype.get__constructorList},
/**
 * @type {Array}
 */
publicEvents: {
get: models.ASDocModel.prototype.get__publicEvents},
/**
 * @type {string}
 */
description: {
get: models.ASDocModel.prototype.get__description},
/**
 * @type {Array}
 */
inheritance: {
get: models.ASDocModel.prototype.get__inheritance},
/**
 * @type {Array}
 */
attributes: {
get: models.ASDocModel.prototype.get__attributes},
/**
 * @type {Array}
 */
filterTags: {
get: models.ASDocModel.prototype.get__filterTags,
set: models.ASDocModel.prototype.set__filterTags}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
models.ASDocModel.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ASDocModel', qName: 'models.ASDocModel', kind: 'class' }], interfaces: [org.apache.royale.core.IBeadModel] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
models.ASDocModel.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'strand': { type: 'org.apache.royale.core.IStrand', access: 'writeonly', declaredBy: 'models.ASDocModel'},
        'platforms': { type: 'Array', access: 'readwrite', declaredBy: 'models.ASDocModel'},
        'knownTags': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel'},
        'allClasses': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel'},
        'packageList': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel'},
        'currentPackage': { type: 'String', access: 'readwrite', declaredBy: 'models.ASDocModel'},
        'classList': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel'},
        'currentClass': { type: 'String', access: 'readwrite', declaredBy: 'models.ASDocModel'},
        'publicProperties': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel'},
        'publicMethods': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel'},
        'constructorList': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel'},
        'publicEvents': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel'},
        'description': { type: 'String', access: 'readonly', declaredBy: 'models.ASDocModel'},
        'inheritance': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel'},
        'attributes': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel'},
        'filterTags': { type: 'Array', access: 'readwrite', declaredBy: 'models.ASDocModel'}
      };
    },
    methods: function () {
      return {
        'ASDocModel': { type: '', declaredBy: 'models.ASDocModel'},
        'filterPackage': { type: 'Boolean', declaredBy: 'models.ASDocModel', parameters: function () { return [ 'String', false ]; }},
        'filterByTags': { type: 'Boolean', declaredBy: 'models.ASDocModel', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
models.ASDocModel.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
models.ASDocModel.prototype.ROYALE_INITIAL_STATICS = Object.keys(models.ASDocModel);
