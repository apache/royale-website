/**
 * Generated by Apache Royale Compiler from org/apache/royale/core/CallLaterBead.as
 * org.apache.royale.core.CallLaterBead
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.core.CallLaterBead');
/* Royale Dependency List: org.apache.royale.utils.Language*/

goog.require('org.apache.royale.core.Bead');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @constructor
 * @extends {org.apache.royale.core.Bead}
 */
org.apache.royale.core.CallLaterBead = function() {
  org.apache.royale.core.CallLaterBead.base(this, 'constructor');
};
goog.inherits(org.apache.royale.core.CallLaterBead, org.apache.royale.core.Bead);


/**
 * @private
 * @type {Array}
 */
org.apache.royale.core.CallLaterBead.prototype.org_apache_royale_core_CallLaterBead_calls;


/**
 *  Calls a function after some amount of time.
 * 
 *  CallLater works a bit differently than in
 *  the Flex SDK.  The Flex SDK version was
 *  could use the Flash Player's RENDER event 
 *  to try to run code before the scren was
 *  updated.  Since there is no deferred rendering
 *  in HTML/JS/CSS, this version of callLater
 *  is almost always going to run after the
 *  screen is updated.
 *  
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @param {Function} fn
 * @param {Array=} args
 * @param {Object=} thisArg
 */
org.apache.royale.core.CallLaterBead.prototype.callLater = function(fn, args, thisArg) {
  args = typeof args !== 'undefined' ? args : null;
  thisArg = typeof thisArg !== 'undefined' ? thisArg : null;
  
  if (this.org_apache_royale_core_CallLaterBead_calls == null)
    this.org_apache_royale_core_CallLaterBead_calls = [{thisArg:thisArg, fn:fn, args:args}];
  else
    this.org_apache_royale_core_CallLaterBead_calls.push({thisArg:thisArg, fn:fn, args:args});
  setTimeout(org.apache.royale.utils.Language.closure(this.org_apache_royale_core_CallLaterBead_makeCalls, this, 'org_apache_royale_core_CallLaterBead_makeCalls'), 0);
};


/**
 * @private
 */
org.apache.royale.core.CallLaterBead.prototype.org_apache_royale_core_CallLaterBead_makeCalls = function() {
  var /** @type {Array} */ list = this.org_apache_royale_core_CallLaterBead_calls;
  var /** @type {number} */ n = (list.length) >> 0;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {Object} */ call = list.shift();
    var /** @type {Function} */ fn = call.fn;
    fn.apply(call.thisArg, call.args);
  }
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.core.CallLaterBead.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CallLaterBead', qName: 'org.apache.royale.core.CallLaterBead', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.core.CallLaterBead.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'CallLaterBead': { type: '', declaredBy: 'org.apache.royale.core.CallLaterBead'},
        'callLater': { type: 'void', declaredBy: 'org.apache.royale.core.CallLaterBead', parameters: function () { return [ 'Function', false ,'Array', true ,'Object', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.core.CallLaterBead.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./CallLaterBead.js.map
