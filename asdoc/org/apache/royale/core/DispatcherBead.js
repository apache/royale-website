/**
 * Generated by Apache Royale Compiler from org/apache/royale/core/DispatcherBead.as
 * org.apache.royale.core.DispatcherBead
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.core.DispatcherBead');
/* Royale Dependency List: org.apache.royale.core.IStrand,org.apache.royale.events.IEventDispatcher*/

goog.require('org.apache.royale.events.EventDispatcher');
goog.require('org.apache.royale.core.IBead');



/**
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {org.apache.royale.core.IBead}
 * @param {org.apache.royale.events.IEventDispatcher=} target
 */
org.apache.royale.core.DispatcherBead = function(target) {
  target = typeof target !== 'undefined' ? target : null;
  org.apache.royale.core.DispatcherBead.base(this, 'constructor', target);
};
goog.inherits(org.apache.royale.core.DispatcherBead, org.apache.royale.events.EventDispatcher);


/**
 * @protected
 * @type {org.apache.royale.core.IStrand}
 */
org.apache.royale.core.DispatcherBead.prototype._strand;


/**
 * Helper function to attach event listener without the need for casting
 * @royaleignorecoercion org.apache.royale.events.IEventDispatcher
 * @protected
 * @param {string} eventType
 * @param {Function} handler
 * @param {boolean=} capture
 */
org.apache.royale.core.DispatcherBead.prototype.listenOnStrand = function(eventType, handler, capture) {
  capture = typeof capture !== 'undefined' ? capture : false;
  this._strand.addEventListener(eventType, handler, capture);
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.core.IStrand}
 */
org.apache.royale.core.DispatcherBead.prototype.strand;


org.apache.royale.core.DispatcherBead.prototype.set__strand = function(value) {
  this._strand = value;
};


Object.defineProperties(org.apache.royale.core.DispatcherBead.prototype, /** @lends {org.apache.royale.core.DispatcherBead.prototype} */ {
/**
 * @type {org.apache.royale.core.IStrand}
 */
strand: {
set: org.apache.royale.core.DispatcherBead.prototype.set__strand}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.core.DispatcherBead.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'DispatcherBead', qName: 'org.apache.royale.core.DispatcherBead', kind: 'class' }], interfaces: [org.apache.royale.core.IBead] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.core.DispatcherBead.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'strand': { type: 'org.apache.royale.core.IStrand', access: 'writeonly', declaredBy: 'org.apache.royale.core.DispatcherBead'}
      };
    },
    methods: function () {
      return {
        'DispatcherBead': { type: '', declaredBy: 'org.apache.royale.core.DispatcherBead', parameters: function () { return [ 'org.apache.royale.events.IEventDispatcher', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.core.DispatcherBead.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./DispatcherBead.js.map
