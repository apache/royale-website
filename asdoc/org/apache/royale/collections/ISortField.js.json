{ "type": "interface",
  "qname": "org.apache.royale.collections.ISortField",
"baseInterfaceNames": [
]
,
    "description": "The <code>ISortField</code> interface defines the interface for classes that are used with <code>ISort</code> classes, to provide the sorting information required to sort the specific fields or property in a collection view.",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 10.2", "AIR 2.6"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.0"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
    "access": "read-only",
    "return": "int",
    "qname": "arraySortOnOptions",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "This helper property is used internally by the <code>findItem()</code> and <code>sort()</code> methods. Other uses of this property are not supported. Returns -1 if this ISortField shouldn't be used by the <code>Sort</code> class to sort the field (there is no compareFunction or no name). Otherwise, returns a bitmask of sort options.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10.2", "AIR 2.6"]},
        {  "tagName": "productversion",
           "values": ["Royale 0.0"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "Function",
    "qname": "compareFunction",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The function that compares two items during a sort of items for the associated collection. If you specify a <code>compareFunction</code> property in an ISort object, Royale ignores any <code>compareFunction</code> properties of the ISort's ISortField objects. <p>The compare function must have the following signature:</p>  <p><code>function myCompare(a:Object, b:Object):int</code></p>  <p>This function returns the following values:</p>  <ul> <li>-1, if <code>a</code> should appear before <code>b</code> in the sorted sequence</li> <li>0, if <code>a</code> equals <code>b</code></li> <li>1, if <code>a</code> should appear after <code>b</code> in the sorted sequence</li> </ul>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10.2", "AIR 2.6"]},
        {  "tagName": "productversion",
           "values": ["Royale 0.0"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "Boolean",
    "qname": "descending",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Specifies whether this field should be sorted in descending order.  <p>The default value is <code>false</code> (ascending).</p>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10.2", "AIR 2.6"]},
        {  "tagName": "productversion",
           "values": ["Royale 0.0"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "String",
    "qname": "name",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The name of the field to be sorted.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10.2", "AIR 2.6"]},
        {  "tagName": "productversion",
           "values": ["Royale 0.0"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "Object",
    "qname": "numeric",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Specifies that if the field being sorted contains numeric (<code>number/int/uint</code>) values, or string representations of numeric values, the comparator use a numeric comparison. <p> This property is used by <code>SortField</code> class in case custom compare function is not provided. </p> <p> If this property is <code>true</code>, the built-in numeric compare function is used. Each of data items is cast to a <code>Number()</code> function before the comparison. </p> <p> If this property is <code>false</code>, the built-in string compare function is used. Each of data items is cast to a <code>String()</code> function before the comparison. </p> <p> If this property is <code>null</code>, the first data item is introspected to see if it is a number or string and the sort proceeds based on that introspection. </p>",
    "tags": [
    {  "tagName": "default",
           "values": ["null"]},
        {  "tagName": "playerversion",
           "values": ["Flash 10.2", "AIR 2.6"]},
        {  "tagName": "productversion",
           "values": ["Royale 0.0"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "String",
    "qname": "sortCompareType",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Specifies what compare type will be used for the sortField. This overrides the default behavior.",
    "tags": [
    {  "tagName": "default",
           "values": ["null"]},
        {  "tagName": "playerversion",
           "values": ["Flash 11.8", "AIR 3.8"]},
        {  "tagName": "productversion",
           "values": ["Royale 4.11"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "Boolean",
    "qname": "usingCustomCompareFunction",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "True if this <code>ISortField</code> uses a custom comparator function.",
    "tags": [
    {  "tagName": "see",
           "values": ["@compareFunction"]},
        {  "tagName": "playerversion",
           "values": ["Flash 10.2", "AIR 2.6"]},
        {  "tagName": "productversion",
           "values": ["Royale 0.0"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "method",
    "qname": "initializeDefaultCompareFunction",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "A helper function called by the <code>Sort</code> class to set the default comparison function to perform a comparison based on one of three things: whether or not a custom compare function has been set, the data type for the specified field or the the value of the numeric property. If the the <code>numeric</code> property is true, then a numeric comparison will be performed when sorting.  been set with the name property, then the name will be used to access the data value from this object. Otherwise the object itself will be used as the data value.",
    "tags": [
    {  "tagName": "param",
           "values": ["obj The object that contains the data. If the field name has"]},
        {  "tagName": "playerversion",
           "values": ["Flash 10.2", "AIR 2.6"]},
        {  "tagName": "productversion",
           "values": ["Royale 0.0"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "obj", "type": "Object"}]}
  ,
  { "type": "method",
    "qname": "reverse",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Reverse the criteria for this sort field. If the field was sorted in descending order, for example, sort it in ascending order.  <p>NOTE: An <code>ICollectionView</code> does not automatically update when the <code>ISortFields</code> are modified; call its <code>refresh()</code> method to update the view.</p>  <p>Note: a future release of Apache Royale SDK will change the signature of this function to return a reversed clone of this SortField instance. See FLEX-34853 for more details.</p>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10.2", "AIR 2.6"]},
        {  "tagName": "productversion",
           "values": ["Royale 0.0"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": []}
  ,
  { "type": "method",
    "qname": "objectHasSortField",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Returns true if the object has the field required by this <code>ISortField</code> instance. In  the case of <code>ComplexSortField</code>, returns true if the object has a field with an identical name to the first part of the <code>namePath</code>.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 11.8", "AIR 3.8"]},
        {  "tagName": "productversion",
           "values": ["Royale 0.0"]},
        {  "tagName": "return",
           "values": ["true if the object has the field required by this <code>ISortField</code> instance."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Boolean",
      "params": [{ "name": "object", "type": "Object"}]}
  ]
  }
