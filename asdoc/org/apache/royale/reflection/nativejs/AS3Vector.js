/**
 * Generated by Apache Royale Compiler from org/apache/royale/reflection/nativejs/AS3Vector.as
 * org.apache.royale.reflection.nativejs.AS3Vector
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.reflection.nativejs.AS3Vector');
/* Royale Dependency List: org.apache.royale.utils.Language*/
goog.provide('org.apache.royale.reflection.nativejs.AS3Vector.singletons');




/**
 * Provides data for a stand-in TypeDefinition of the native as3 type for javascript
 * @royaleignorecoercion Class
 * @param {string=} typeName
 * @param {Object=} nativeBase
 * @return {Object}
 */
org.apache.royale.reflection.nativejs.AS3Vector = function(typeName, nativeBase) {
  typeName = typeof typeName !== 'undefined' ? typeName : 'Vector.<*>';
  nativeBase = typeof nativeBase !== 'undefined' ? nativeBase : null;
  if (org.apache.royale.reflection.nativejs.AS3Vector.singletons) {
    if (org.apache.royale.reflection.nativejs.AS3Vector.singletons[typeName])
      return org.apache.royale.reflection.nativejs.AS3Vector.singletons[typeName];
  } else {
    org.apache.royale.reflection.nativejs.AS3Vector.singletons = {};
  }
  var /** @type {Object} */ ret = {};
  ret['classRef'] = org.apache.royale.utils.Language.synthVector(typeName.substring(8, typeName.length - 1));
  ret['name'] = typeName;
  ret['SYNTHETIC_TYPE'] = true;
  ret['NATIVE_BASE'] = nativeBase || Object;
  ret['ROYALE_CLASS_INFO'] = {names:[{name:typeName, qName:typeName, kind:'class'}]};
  ret['ROYALE_REFLECTION_INFO'] = function() {
    return {'accessors':function() {
      return {'length':{'access':'readwrite', 'type':'uint', 'declaredBy':typeName}, 'fixed':{'access':'readwrite', 'type':'Boolean', 'declaredBy':typeName}};
    }, 'methods':function() {
      var /** @type {Object} */ ret = {};
      ret[typeName] = {'parameters':function() {
        return ['uint', true, 'Boolean', true];
      }, 'type':'', 'declaredBy':typeName};
      return ret;
    }};
  };
  if (typeName == 'Vector.<*>') {
    var /** @type {Object} */ wildCardBase =  /** @type {Object|null} */ (ret['classRef']);
    ret['variant'] = function(subType) {
      var /** @type {string} */ ofType = subType.substring(7, subType.length);
      var /** @type {Object} */ baseClassRef = '<int><uint><Number>'.indexOf(ofType) == -1 ? wildCardBase : Object;
      return org.apache.royale.reflection.nativejs.AS3Vector(subType, baseClassRef);
    };
  }
  org.apache.royale.reflection.nativejs.AS3Vector.singletons[typeName] = ret;
  return ret;
}


/**
 * @package
 * @type {*}
 */
org.apache.royale.reflection.nativejs.AS3Vector.singletons = null
