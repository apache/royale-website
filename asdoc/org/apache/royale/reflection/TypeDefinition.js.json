{ "type": "class",
  "qname": "org.apache.royale.reflection.TypeDefinition",
  "baseClassname": "org.apache.royale.reflection.DefinitionWithMetaData"
  ,
    "description": "The description of a Class or Interface",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 10.2", "AIR 2.6"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.0"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "useCache",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "method",
        "qname": "getDefinition",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The static getDefinition method is the primary access to TypeDefinitions. Although the constructor does not have a lock to prevent use (for performance reasons), using it directly is discouraged.",
        "tags": [
        {  "tagName": "param",
               "values": ["name the qualified name of the definition,", "rawData (optional) the reflection data if already available", "clazz (optional) a class reference to store internally for performance of getClass method"]},
            {  "tagName": "return",
               "values": ["a TypeDefinition representing the class or interface represented by the parameters"]}  ],
          "return": "org.apache.royale.reflection.TypeDefinition",
          "params": [{ "name": "name", "type": "String"},
        { "name": "rawData", "type": "Object"},
        { "name": "clazz", "type": "Class"}]}
      ,
      { "type": "method",
        "qname": "getNativeDefinition",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The static getNativeDefinition method is a way to get a TypeDefinition for non-Royale types like String, etc.",
        "tags": [
        {  "tagName": "param",
               "values": ["name the qualified name of the definition,"]},
            {  "tagName": "return",
               "values": ["a TypeDefinition representing the class or interface represented by the parameters"]}  ],
          "return": "org.apache.royale.reflection.TypeDefinition",
          "params": [{ "name": "name", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "internalGetDefinition",
        "namespace": "internal",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "org.apache.royale.reflection.TypeDefinition",
          "params": [{ "name": "name", "type": "String"},
        { "name": "rawData", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "org.apache.royale.reflection.TypeDefinition",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The static TypeDefinitions.getDefinition method is the primary access to TypeDefinitions. Although the constructor does not have a lock to prevent use (for performance reasons), using it directly is discouraged. Most of the time you should retrieve TypeDefinitions with org.apache.royale.reflection.describeType()",
        "tags": [
          ],
          "return": "",
          "params": [{ "name": "name", "type": "String"},
        { "name": "rawData", "type": "Object"}]}
      ,
      { "type": "field",
        "qname": "_kind",
        "return": "String",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "String",
        "qname": "kind",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The type of definition this TypeDefinition describes values can be &quot;class&quot;, &quot;interface&quot;, &quot;unknown&quot; This can sometimes be different between swf and js targets.",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "isClass",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "convenience check for whether this definition represents a Class or instance of a Class",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "isInterface",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "convenience check for whether this definition represents an interface",
        "tags": [
          ]},
      { "type": "field",
        "qname": "_packageName",
        "return": "String",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "String",
        "qname": "packageName",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The package name for this TypeDefinition",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "String",
        "qname": "qualifiedName",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The qualified name for this TypeDefinition",
        "tags": [
          ]},
      { "type": "method",
        "qname": "getClass",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "convenience method to access the class definition from this TypeDefinition",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["Class"]},
            {  "tagName": "return",
               "values": ["the original class (or interface) described by this TypeDefinition"]}  ],
          "return": "Class",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "Object",
        "qname": "rawData",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "org.apache.royale.reflection.MethodDefinition",
        "qname": "constructorMethod",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A MethodDefinition representing the constructor for a &quot;class&quot; kind TypeDefinition For an interface this returns null.",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "baseClasses",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "For a &quot;class&quot; kind TypeDefinition, this returns the TypeDefinitions of the base classes (inheritance chain). This may differ between javascript and flash platform targets for some classes.",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["XML"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "interfaces",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "returns the full set of interfaces that this class implements or that this interface extends, depending on the 'kind' value (&quot;interface&quot; or &quot;class&quot;)",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "staticVariables",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The static variables associated with a &quot;class&quot; kind TypeDefinition An array of VariableDefinition instances",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "staticAccessors",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The static accessors associated with a &quot;class&quot; kind TypeDefinition An array of AccessorDefinition instances",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "staticMethods",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The static methods associated with a &quot;class&quot; kind TypeDefinition An array of MethodDefinition instances",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "variables",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The instance variables associated with a &quot;class&quot; kind TypeDefinition An array of VariableDefinition instances",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "accessors",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The instance accessors associated with a &quot;class&quot; kind TypeDefinition An array of AccessorDefinition instances",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "methods",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The instance methods associated with a &quot;class&quot; kind TypeDefinition An array of MethodDefinition instances",
        "tags": [
          ]},
      { "type": "method",
        "qname": "getCollection",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Array",
          "params": [{ "name": "collection", "type": "String"},
        { "name": "type", "type": "String"},
        { "name": "resolve", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "toString",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Used primarily for debugging purposes, this provides a string representation of this TypeDefinition",
        "tags": [
        {  "tagName": "param",
               "values": ["includeDetail whether to output member definitions and other detailed information"]},
            {  "tagName": "return",
               "values": ["a stringified representation of this TypeDefinition"]}  ],
          "return": "String",
          "params": [{ "name": "includeDetail", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "stringifyCollections",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "utility method to create friendly output of collections, primarily for debugging purposes - used via toString(includeDetail=true)",
        "tags": [
        {  "tagName": "param",
               "values": ["collections array of alternating collection names and collections"]},
            {  "tagName": "return",
               "values": ["stringified representation of the collections"]}  ],
          "return": "String",
          "params": [{ "name": "collections", "type": "Array"}]}
      ]
  ,
  "events": [
  ]
  }
