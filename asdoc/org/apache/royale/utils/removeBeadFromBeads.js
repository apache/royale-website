/**
 * Generated by Apache Royale Compiler from org/apache/royale/utils/removeBeadFromBeads.as
 * org.apache.royale.utils.removeBeadFromBeads
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.utils.removeBeadFromBeads');
/* Royale Dependency List: org.apache.royale.core.IBead*/




/**
 *  Utility function for internal use in removeBead methods
 *  @asparam beads the implementation's collection of beads to check against
 *  @asparam beadToRemove the bead to remove
 *  @asparam setStrandNull true if the strand setter of the removed bead should be set to null when it is removed
 *
 *  @asreturn the removed Bead (if it was present), with its strand value set to null, otherwise null (no bead was removed).
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.9
 *  @royaleignorecoercion org.apache.royale.core.IBead
 *
 *  @royalesuppressexport
 *  @royaleignorecoercion Array
 * @param {Object} beads
 * @param {Object} beadToRemove
 * @param {boolean} setStrandNull
 * @return {Object}
 */
org.apache.royale.utils.removeBeadFromBeads = function(beads, beadToRemove, setStrandNull) {
  var /** @type {number} */ i = 0;
  var /** @type {number} */ n = 0;
  //var /** @type {number} */ i = 0;
  //var /** @type {number} */ n = 0;
  var /** @type {Array} */ arr = beads;
  n = (arr.length) >>> 0;
  for (i = 0; i < n; i++) {
    if (beadToRemove === arr[i]) {
      arr.splice(i, 1);
      if (setStrandNull)
        beadToRemove.strand = null;
      return beadToRemove;
    }
  }
  return null;
}
