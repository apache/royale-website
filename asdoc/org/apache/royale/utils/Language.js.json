{ "type": "class",
  "qname": "org.apache.royale.utils.Language",
  "baseClassname": ""
  ,
    "description": "",
  "tags": [
  {  "tagName": "royaleignoreimport",
         "values": ["goog.bind", "goog.global"]},
      {  "tagName": "royalesuppressexport",
         "values": []}  ],
  "members": [
  { "type": "method",
        "qname": "as",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "as()  binary as operator in AS3. binary operator in AS3. throw exception if it fails. type of the righthand operand, otherwise null.",
        "tags": [
        {  "tagName": "param",
               "values": ["leftOperand The lefthand operand of the", "rightOperand The righthand operand of the", "coercion The cast is a coercion,"]},
            {  "tagName": "return",
               "values": ["Returns the lefthand operand if it is of the"]}  ],
          "return": "Object",
          "params": [{ "name": "leftOperand", "type": "Object"},
        { "name": "rightOperand", "type": "Object"},
        { "name": "coercion", "type": "*"}]}
      ,
      { "type": "method",
        "qname": "_int",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "int()",
        "tags": [
        {  "tagName": "param",
               "values": ["value The value to be cast."]},
            {  "tagName": "return",
               "values": ["{number}"]}  ],
          "return": "Number",
          "params": [{ "name": "value", "type": "Number"}]}
      ,
      { "type": "method",
        "qname": "string",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "string()",
        "tags": [
        {  "tagName": "param",
               "values": ["value The value to be cast."]},
            {  "tagName": "return",
               "values": ["{string}"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"}]}
      ,
      { "type": "method",
        "qname": "is",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "is()  binary as operator in AS3. binary operator in AS3.",
        "tags": [
        {  "tagName": "param",
               "values": ["leftOperand The lefthand operand of the", "rightOperand The righthand operand of the"]},
            {  "tagName": "return",
               "values": ["{boolean}"]}  ],
          "return": "Boolean",
          "params": [{ "name": "leftOperand", "type": "Object"},
        { "name": "rightOperand", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "trace",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "royaledebug",
               "values": []}  ],
          "return": "void",
          "params": [{ "name": "rest", "type": "Array"}]}
      ,
      { "type": "method",
        "qname": "uint",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "uint()",
        "tags": [
        {  "tagName": "param",
               "values": ["value The value to be cast."]},
            {  "tagName": "return",
               "values": ["{number}"]}  ],
          "return": "Number",
          "params": [{ "name": "value", "type": "Number"}]}
      ,
      { "type": "method",
        "qname": "closure",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "caches closures and returns the one closure  Note: It's important for each instance's methods to be different, but match when comparing two closure references of a single instance method to one another. That's what makes things like addEventListener and removeEventListener behave like you'd expect. That's how it works in Flash and why we have to using caching.",
        "tags": [
        {  "tagName": "param",
               "values": ["fn The method on the instance.", "object The instance.", "boundMethodName The name to use to cache the closure."]},
            {  "tagName": "royaleignorecoercion",
               "values": ["Function"]},
            {  "tagName": "return",
               "values": ["The closure."]}  ],
          "return": "Function",
          "params": [{ "name": "fn", "type": "Function"},
        { "name": "object", "type": "Object"},
        { "name": "boundMethodName", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "sort",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Note this might mean testing for results is not matching across implementations: &quot;The array is modified to reflect the sort order; multiple elements that have identical sort fields are placed consecutively in the sorted array in no particular order.&quot;",
        "tags": [
        {  "tagName": "param",
               "values": ["arr", "names", "opt"]},
            {  "tagName": "royaleignorecoercion",
               "values": ["Function"]}  ],
          "return": "Object",
          "params": [{ "name": "arr", "type": "Array"},
        { "name": "args", "type": "Array"}]}
      ,
      { "type": "method",
        "qname": "sortOn",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Note this might mean testing for results is not matching across implementations: &quot;The array is modified to reflect the sort order; multiple elements that have identical sort fields are placed consecutively in the sorted array in no particular order.&quot;",
        "tags": [
        {  "tagName": "param",
               "values": ["arr", "names", "opt"]},
            {  "tagName": "royaleignorecoercion",
               "values": ["Array"]}  ],
          "return": "Array",
          "params": [{ "name": "arr", "type": "Array"},
        { "name": "names", "type": "Object"},
        { "name": "opt", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "resolveUncertain",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "no export (allow dead code elimination if never used):",
        "tags": [
          ],
          "return": "*",
          "params": [{ "name": "val", "type": "*"}]}
      ,
      { "type": "field",
        "qname": "SYNTH_TAG_FIELD",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "CHECK_INDEX",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "method",
        "qname": "isSynthType",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Boolean",
          "params": [{ "name": "def", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "synthType",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Intended primarily for compiler-generated use only Low level class factory for synthetic types (native AS3 top-level classes that are final and do not have corresponding classes in javascript). Supports very light integration for emulation of related language level features, for construction, type-checking and coercion by default: supports int, uint and Class This Language method is only included in release build if it is used anywhere Supports a 'plugin' style addition of extra types beyond the basic defaults",
        "tags": [
        {  "tagName": "royalesuppressresolveuncertain",
               "values": ["true, _synthType"]},
            {  "tagName": "royalesuppresscompleximplicitcoercion",
               "values": ["true"]}  ],
          "return": "Class",
          "params": [{ "name": "typeName", "type": "String"},
        { "name": "newDefinition", "type": "*"}]}
      ,
      { "type": "method",
        "qname": "synthVector",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Intended primarily for compiler-generated use only Adds Vector support via synthType Acts like a class Factory for Vector subclasses as synthTypes, which provides correct type-checking behaviour Uses cached lookups and 'plugin' style addition of synthTypes for each distinct requested Vector subclass type",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["Array"]},
            {  "tagName": "royalesuppresscompleximplicitcoercion",
               "values": ["true"]}  ],
          "return": "Class",
          "params": [{ "name": "elementType", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "Vector",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "A light wrapper around a Vector constructor call that has an untyped return type (because the resulting type is unknown at compile time) This could be used to create and return a default Vector instance  no export (allow dead code elimination if never used):",
        "tags": [
        {  "tagName": "royalesuppressresolveuncertain",
               "values": []},
            {  "tagName": "royaleignorecoercion",
               "values": ["Array"]}  ],
          "return": "*",
          "params": [{ "name": "size", "type": "int"},
        { "name": "baseType", "type": "String"},
        { "name": "fixed", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "arrayAsVector",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Support for legacy vectorEmulationClass=Array approach.  no export (allow dead code elimination if never used):",
        "tags": [
          ],
          "return": "Array",
          "params": [{ "name": "size", "type": "int"},
        { "name": "baseType", "type": "String"}]}
      ]
  ,
  "events": [
  ]
  }



