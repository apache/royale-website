/**
 * Generated by Apache Royale Compiler from org/apache/royale/utils/CSSUtils.as
 * org.apache.royale.utils.CSSUtils
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.utils.CSSUtils');
/* Royale Dependency List: org.apache.royale.utils.StringPadder,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
org.apache.royale.utils.CSSUtils = function() {
};


/**
 * @asprivate
 * @nocollapse
 * @param {number} value
 * @return {string}
 */
org.apache.royale.utils.CSSUtils.attributeFromColor = function(value) {
  var /** @type {string} */ hexVal = value.toString(16);
  if (value > 16777215) {
    var /** @type {Array} */ rgba = hexVal.match(/.{2}/g);
    for (var /** @type {number} */ i = 0; i < 4; i++) {
      rgba[i] = parseInt(rgba[i], 16);
    }
    rgba[3] = parseInt("" + (rgba[3] / 255) * 1000, 10) / 1000;
    return "rgba(" + rgba.join(",") + ")";
  }
  return "#" + org.apache.royale.utils.StringPadder.pad(hexVal, "0", 6);
};


/**
 *  Converts a String to number.
 *
 *  @asparam str The String. 
 *  @asparam reference A Number that will be used to convert percentages. 
 *
 *  @asreturn Number. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @nocollapse
 * @param {string} str
 * @param {number=} reference
 * @return {number}
 */
org.apache.royale.utils.CSSUtils.toNumber = function(str, reference) {
  reference = typeof reference !== 'undefined' ? reference : 0;
  if (str === "")
    return NaN;
  var /** @type {number} */ c = (str.indexOf("px")) >> 0;
  if (c > -1)
    return Number(str.substr(0, c));
  c = (str.indexOf("%")) >> 0;
  if (c > -1)
    return Number(str.substr(0, c)) * reference / 100;
  return Number(str);
};


/**
 *  Converts a value describing a color to a uint 
 *
 *  @asparam value The value. 
 *
 *  @asreturn uint of the color. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @nocollapse
 * @param {Object} value
 * @return {number}
 */
org.apache.royale.utils.CSSUtils.toColor = function(value) {
  return (org.apache.royale.utils.CSSUtils.toColorWithAlpha(value) & 0xFFFFFF) >>> 0;
};


/**
 *  Converts a value describing a color and alpha in a uint 
 *
 *  @asparam value The value. 
 *
 *  @asreturn uint of the color. If value is "transparent" then uint.MAX_VALUE is returned.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignorecoercion String
 * @nocollapse
 * @param {Object} value
 * @return {number}
 */
org.apache.royale.utils.CSSUtils.toColorWithAlpha = function(value) {
  var /** @type {number} */ c = 0;
  var /** @type {number} */ c2 = 0;
  if (!org.apache.royale.utils.Language.is(value, String))
    return (org.apache.royale.utils.Language.uint(value) | 0xFF000000) >>> 0;
  //var /** @type {number} */ c = 0;
  //var /** @type {number} */ c2 = 0;
  var /** @type {string} */ stringValue = value;
  if (stringValue === "transparent") {
    return 4294967295;
  }
  if (stringValue.charAt(0) === '#') {
    if (stringValue.length === 4)
      return org.apache.royale.utils.Language.uint("0x" + stringValue.charAt(1) + stringValue.charAt(1) + stringValue.charAt(2) + stringValue.charAt(2) + stringValue.charAt(3) + stringValue.charAt(3));
    if (stringValue.length === 7)
      return org.apache.royale.utils.Language.uint("0xFF" + stringValue.substr(1));
    return org.apache.royale.utils.Language.uint("0x" + stringValue.substr(1));
  } else if ((c = (stringValue.indexOf("rgb(")) >> 0) !== -1) {
    c2 = (stringValue.indexOf(")")) >> 0;
    stringValue = stringValue.substring(c + 4, c2);
    var /** @type {Array} */ parts3 = stringValue.split(",");
    return ((0xFF000000 + (org.apache.royale.utils.Language.uint(parts3[0]) << 16) + (org.apache.royale.utils.Language.uint(parts3[1]) << 8) + org.apache.royale.utils.Language.uint(parts3[2]))) >>> 0;
  } else if ((c = (stringValue.indexOf("rgba(")) >> 0) !== -1) {
    c2 = (stringValue.indexOf(")")) >> 0;
    stringValue = stringValue.substring(c + 5, c2);
    var /** @type {Array} */ parts4 = stringValue.split(",");
    parts4[3] *= 255;
    return (((org.apache.royale.utils.Language.uint(parts4[3]) << 24) + (org.apache.royale.utils.Language.uint(parts4[0]) << 16) + (org.apache.royale.utils.Language.uint(parts4[1]) << 8) + org.apache.royale.utils.Language.uint(parts4[2]))) >>> 0;
  }
  if (org.apache.royale.utils.CSSUtils.colorMap.hasOwnProperty(stringValue))
    return (org.apache.royale.utils.CSSUtils.colorMap[stringValue]) >>> 0;
  return org.apache.royale.utils.Language.uint(stringValue);
};


/**
 *  Computes paddingTop or marginTop.
 *
 *  @asparam value The value of padding-top or margin-top. 
 *  @asparam values The value of padding or margin. 
 *  @asparam reference A Number that will be used to convert percentages. 
 *
 *  @asreturn Number. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignorecoercion String
 * @nocollapse
 * @param {Object} value
 * @param {Object} values
 * @param {number=} reference
 * @return {number}
 */
org.apache.royale.utils.CSSUtils.getTopValue = function(value, values, reference) {
  reference = typeof reference !== 'undefined' ? reference : NaN;
  return org.apache.royale.utils.CSSUtils.getSideValue(value, values, 0, reference);
};


/**
 *  Computes paddingRight or marginRight.
 *
 *  @asparam value The value of padding-right or margin-right. 
 *  @asparam values The value of padding or margin. 
 *  @asparam reference A Number that will be used to convert percentages. 
 *
 *  @asreturn Number. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignorecoercion String
 * @nocollapse
 * @param {Object} value
 * @param {Object} values
 * @param {number=} reference
 * @return {number}
 */
org.apache.royale.utils.CSSUtils.getRightValue = function(value, values, reference) {
  reference = typeof reference !== 'undefined' ? reference : NaN;
  return org.apache.royale.utils.CSSUtils.getSideValue(value, values, 1, reference);
};


/**
 *  Computes paddingBottom or marginBottom.
 *
 *  @asparam value The value of padding-bottom or margin-bottom. 
 *  @asparam values The value of padding or margin. 
 *  @asparam reference A Number that will be used to convert percentages. 
 *
 *  @asreturn Number. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignorecoercion String
 * @nocollapse
 * @param {Object} value
 * @param {Object} values
 * @param {number=} reference
 * @return {number}
 */
org.apache.royale.utils.CSSUtils.getBottomValue = function(value, values, reference) {
  reference = typeof reference !== 'undefined' ? reference : NaN;
  return org.apache.royale.utils.CSSUtils.getSideValue(value, values, 2, reference);
};


/**
 *  Computes paddingLeft or marginLeft.
 *
 *  @asparam value The value of padding-left or margin-left. 
 *  @asparam values The value of padding or margin. 
 *  @asparam reference A Number that will be used to convert percentages. 
 *
 *  @asreturn Number. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignorecoercion String
 * @nocollapse
 * @param {Object} value
 * @param {Object} values
 * @param {number=} reference
 * @return {number}
 */
org.apache.royale.utils.CSSUtils.getLeftValue = function(value, values, reference) {
  reference = typeof reference !== 'undefined' ? reference : NaN;
  return org.apache.royale.utils.CSSUtils.getSideValue(value, values, 3, reference);
};


/**
 *  Computes padding or margin.
 *
 *  @asparam value The value of padding or margin.
 *  @asparam values The value of padding or margin. 
 *  @asparam side Which side we want to get. 0 = top, 1 = right, 2 = bottom, 3 = left
 *  @asparam reference A Number that will be used to convert percentages. 
 *
 *  @asreturn Number. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.9
 *  @royaleignorecoercion Array
 *  @royaleignorecoercion Number
 *  @royaleignorecoercion String
 * @nocollapse
 * @param {Object} value
 * @param {Object} values
 * @param {number} side
 * @param {number=} reference
 * @return {number}
 */
org.apache.royale.utils.CSSUtils.getSideValue = function(value, values, side, reference) {
  reference = typeof reference !== 'undefined' ? reference : NaN;
  if (org.apache.royale.utils.Language.is(value, Number))
    return value;
  if (org.apache.royale.utils.Language.is(values, Number))
    return values;
  if (value != null)
    return org.apache.royale.utils.CSSUtils.toNumber(value, reference);
  if (values == null)
    return 0;
  if (org.apache.royale.utils.Language.is(values, Array)) {
    value = org.apache.royale.utils.CSSUtils.getArrayValue(values, side);
    if (org.apache.royale.utils.Language.is(value, String))
      return org.apache.royale.utils.CSSUtils.toNumber(value, reference);
    return value;
  }
  return org.apache.royale.utils.CSSUtils.toNumber(values, reference);
};


/**
 *  @asprivate
 *  
 *  side should be an int 0 = top, 1 = right, 2 = bottom, 3 = left
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @private
 * @param {Array} arr
 * @param {number} side
 * @return {Object}
 */
org.apache.royale.utils.CSSUtils.getArrayValue = function(arr, side) {
  var /** @type {number} */ n = (arr.length) >> 0;
  switch (side) {
    case 2:
      side = (n === 2 ? 0 : 2) >> 0;
      break;
    case 3:
      side = (n < 3 ? 1 : 3) >> 0;
      break;
    default:
      break;
  }
  return arr[side];
};


/**
 * @nocollapse
 * @const
 * @type {Object}
 */
org.apache.royale.utils.CSSUtils.colorMap = {transparent:0, white:0xFFFFFFFF, silver:0xFFC0C0C0, gray:0xFF808080, black:0xFF000000, red:0xFFFF0000, maroon:0xFF800000, yellow:0xFFFFFF00, olive:0xFF808000, lime:0xFF00FF00, green:0xFF008000, aqua:0xFF00FFFF, teal:0xFF008080, blue:0xFF0000FF, navy:0xFF000080, fuchsia:0xFFFF00FF, purple:0xFF800080};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.utils.CSSUtils.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CSSUtils', qName: 'org.apache.royale.utils.CSSUtils', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.utils.CSSUtils.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|attributeFromColor': { type: 'String', declaredBy: 'org.apache.royale.utils.CSSUtils', parameters: function () { return [ 'uint', false ]; }},
        '|toNumber': { type: 'Number', declaredBy: 'org.apache.royale.utils.CSSUtils', parameters: function () { return [ 'String', false ,'Number', true ]; }},
        '|toColor': { type: 'uint', declaredBy: 'org.apache.royale.utils.CSSUtils', parameters: function () { return [ 'Object', false ]; }},
        '|toColorWithAlpha': { type: 'uint', declaredBy: 'org.apache.royale.utils.CSSUtils', parameters: function () { return [ 'Object', false ]; }},
        '|getTopValue': { type: 'Number', declaredBy: 'org.apache.royale.utils.CSSUtils', parameters: function () { return [ 'Object', false ,'Object', false ,'Number', true ]; }},
        '|getRightValue': { type: 'Number', declaredBy: 'org.apache.royale.utils.CSSUtils', parameters: function () { return [ 'Object', false ,'Object', false ,'Number', true ]; }},
        '|getBottomValue': { type: 'Number', declaredBy: 'org.apache.royale.utils.CSSUtils', parameters: function () { return [ 'Object', false ,'Object', false ,'Number', true ]; }},
        '|getLeftValue': { type: 'Number', declaredBy: 'org.apache.royale.utils.CSSUtils', parameters: function () { return [ 'Object', false ,'Object', false ,'Number', true ]; }},
        '|getSideValue': { type: 'Number', declaredBy: 'org.apache.royale.utils.CSSUtils', parameters: function () { return [ 'Object', false ,'Object', false ,'int', false ,'Number', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.utils.CSSUtils.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./CSSUtils.js.map
