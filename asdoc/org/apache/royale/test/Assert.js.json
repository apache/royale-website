{ "type": "class",
  "qname": "org.apache.royale.test.Assert",
  "baseClassname": ""
  ,
    "description": "A set of assertion methods. Messages only displayed when an assert fails.",
  "members": [
  { "type": "method",
        "qname": "assertStrictlyEquals",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided values are strictly equal (equivalent to the <code>===</code> operator).",
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "expected", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertNotStrictlyEquals",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided values are not strictly equal (equivalent to the <code>!==</code> operator).",
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "expected", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertEquals",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided values are loosely equal (equivalent to the <code>==</code> operator).  <p>Note: Type coercion may occur. For a strict comparison, without type coercion, use <code>assertStrictlyEquals(actual, expected, message)</code> instead.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["Assert.assertStrictlyEquals()"]}  ],
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "expected", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertNotEquals",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided values are not loosely equal (equivalent to the <code>!=</code> operator).  <p>Note: Type coercion may occur. For a strict comparison, without type coercion, use <code>assertNotStrictlyEquals(actual, expected, message)</code> instead.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["Assert.assertNotStrictlyEquals()"]}  ],
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "expected", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertTrue",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is true (equivalent to testing the value in an <code>if(value)</code> statement).  <p>Note: Type coercion may occur. The assertion will pass for any value that is considered <em>truthy</em>. For strict comparison to true, without type coercion, use <code>assertStrictlyEquals(value, true, message)</code> instead.</p>",
          "return": "void",
          "params": [{ "name": "value", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertFalse",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is false (equivalent to testing the value in an <code>if(!value)</code> statement).  <p>Note: Type coercion may occur. The assertion will pass for any value that is considered <em>falsy</em>. For strict comparison to false, without type coercion, use <code>assertStrictlyEquals(value, false, message)</code> instead.</p>",
          "return": "void",
          "params": [{ "name": "value", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertNull",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is null (equivalent to testing the value in an <code>if(value == null)</code> statement).  <p>Note: Type coercion may occur. The assertion will pass for any value that is considered <em>nullish</em>. For strict comparison to null, without type coercion, use <code>assertStrictlyEquals(value, null, message)</code> instead.</p>",
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertNotNull",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is not null (equivalent to testing the value in an <code>if(value != null)</code> statement).  <p>Note: Type coercion may occur. The assertion will fail for any value that is considered <em>nullish</em>. For strict comparison to null, without type coercion, use <code>assertNotStrictlyEquals(value, null, message)</code> instead.</p>",
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertNaN",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is NaN (equivalent to testing the value in an <code>if(isNaN(value))</code> statement).",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertWithin",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is between a minimum and maximum value (inclusive). Equivalent to testing the value in an <code>if(value >= minimum && value <= maximum)</code> statement.",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "minimum", "type": "Number"},
        { "name": "maximum", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertNotWithin",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is not between a minimum and maximum value (inclusive). Equivalent to testing the value in an <code>if(value < minimum || value > maximum)</code> statement.",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "minimum", "type": "Number"},
        { "name": "maximum", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertLessThan",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is less than another value. Equivalent to testing the value in an <code>if(value < other)</code> statement.",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "other", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertGreaterThan",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is greater than another value. Equivalent to testing the value in an <code>if(value > other)</code> statement.",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "other", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertLessThanOrEqual",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is less or equal to than another value. Equivalent to testing the value in an <code>if(value <= other)</code> statement.",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "other", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertGreaterThanOrEqual",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is greater than or equal to another value. Equivalent to testing the value in an <code>if(value >= other)</code> statement.",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "other", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertType",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is of a type. Equivalent to testing the value in an <code>if(value is type)</code> statement.",
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "type", "type": "Class"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertNotType",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value is not of a type. Equivalent to testing the value in an <code>if(!(value is type))</code> statement.",
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "type", "type": "Class"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertMatch",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value matches a regular expression. Equivalent to testing the value in an <code>if(regExp.test(value))</code> statement.",
          "return": "void",
          "params": [{ "name": "actual", "type": "String"},
        { "name": "regExp", "type": "RegExp"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertNotMatch",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided value does not match a regular expression. Equivalent to testing the value in an <code>if(!regExp.test(value))</code> statement.",
          "return": "void",
          "params": [{ "name": "actual", "type": "String"},
        { "name": "regExp", "type": "RegExp"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "assertThrows",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Asserts that the provided function throws.  <p>Equivalent to <code>[Test(expected=&quot;RangeError&quot;)]</code></p>",
          "return": "void",
          "params": [{ "name": "fn", "type": "Function"},
        { "name": "type", "type": "Class"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "fail",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails.",
          "return": "void",
          "params": [{ "name": "message", "type": "String"},
        { "name": "sourceError", "type": "Error"}]}
      ,
      { "type": "method",
        "qname": "failTrue",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the condition is true.  <p>Note: Type coercion may occur. The assertion will fail for any value that is considered <em>truthy</em>. For strict comparison to true, without type coercion, use <code>failStrictlyEquals(value, true, message)</code> instead.</p>",
          "return": "void",
          "params": [{ "name": "condition", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failFalse",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the condition is false.  <p>Note: Type coercion may occur. The assertion will fail for any value that is considered <em>falsy</em>. For strict comparison to false, without type coercion, use <code>failStrictlyEquals(value, false, message)</code> instead.</p>",
          "return": "void",
          "params": [{ "name": "condition", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failEquals",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the values are loosely equal.  <p>Note: Type coercion may occur. For a strict comparison without type coercion, use <code>failStrictlyEquals(actual, expected, message)</code> instead.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["Assert.failStrictlyEquals()"]}  ],
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "expected", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failNotEquals",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the values are not loosely equal.  <p>Note: Type coercion may occur. For a strict comparison without type coercion, use <code>failNotStrictlyEquals(actual, expected, message)</code> instead.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["Assert.failNotStrictlyEquals()"]}  ],
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "expected", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failStrictlyEquals",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the values are strictly equal.",
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "expected", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failNotStrictlyEquals",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the values are not strictly equal.",
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "expected", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failNull",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the value is null.  <p>Note: Type coercion may occur. The assertion will fail for any value that is considered <em>nullish</em>. For strict comparison to null, without type coercion, use <code>failStrictlyEquals(value, null, message)</code> instead.</p>",
          "return": "void",
          "params": [{ "name": "object", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failNotNull",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the value is not null.  <p>Note: Type coercion may occur. The assertion will pass for any value that is considered <em>nullish</em>. For strict comparison to null, without type coercion, use <code>failNotStrictlyEquals(value, null, message)</code> instead.</p>",
          "return": "void",
          "params": [{ "name": "object", "type": "*"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failNaN",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the value is NaN.",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failWithin",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the provided value is between a minimum and maximum value (inclusive).",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "minimum", "type": "Number"},
        { "name": "maximum", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failNotWithin",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the provided value is not between a minimum and maximum value (inclusive).",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "minimum", "type": "Number"},
        { "name": "maximum", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failLessThan",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the provided value is less than another value.",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "other", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failGreaterThan",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the provided value is greater than another value.",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "other", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failLessThanOrEqual",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the provided value is less than or equal to another value.",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "other", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failGreaterThanOrEqual",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the provided value is greater than or equal to another value.",
          "return": "void",
          "params": [{ "name": "actual", "type": "Number"},
        { "name": "other", "type": "Number"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failType",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the provided value is of a type.",
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "type", "type": "Class"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failNotType",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the provided value is not of a type.",
          "return": "void",
          "params": [{ "name": "actual", "type": "*"},
        { "name": "type", "type": "Class"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failMatch",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the provided value matches a regular expression.",
          "return": "void",
          "params": [{ "name": "actual", "type": "String"},
        { "name": "regExp", "type": "RegExp"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failNotMatch",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the provided value does not match a regular expression.",
          "return": "void",
          "params": [{ "name": "actual", "type": "String"},
        { "name": "regExp", "type": "RegExp"},
        { "name": "message", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "failThrows",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Fails if the provided function throws.",
          "return": "void",
          "params": [{ "name": "fn", "type": "Function"},
        { "name": "type", "type": "Class"},
        { "name": "message", "type": "String"}]}
      ]
  }
