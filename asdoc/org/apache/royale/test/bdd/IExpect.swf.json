{ "type": "interface",
  "qname": "org.apache.royale.test.bdd.IExpect",
"baseInterfaceNames": [
]
,
    "description": "Interface for BDD-style natural language assertions that may be chained together.",
  "tags": [
    ],
  "members": [
  { "type": "method",
    "qname": "equal",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided values are loosely equal (equivalent to the <code>==</code> operator).",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertEquals", "#equals"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "value", "type": "*"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "equals",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Alias for <code>equal()</code>.",
    "tags": [
    {  "tagName": "see",
           "values": ["#equal"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "value", "type": "*"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "eq",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Alias for <code>equal()</code>.",
    "tags": [
    {  "tagName": "see",
           "values": ["#equal"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "value", "type": "*"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "strictlyEqual",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided values are strictly equal (equivalent to the <code>===</code> operator).",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertStrictlyEquals"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "value", "type": "*"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "strictlyEquals",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Alias for <code>strictlyEqual()</code>.",
    "tags": [
    {  "tagName": "see",
           "values": ["#equal"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "value", "type": "*"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "within",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided value is between a minimum and maximum value (inclusive). Equivalent to testing the value in an <code>if(value >= minimum && value <= maximum)</code> statement.",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertWithin"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "minimum", "type": "Number"},
    { "name": "maximum", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "lessThan",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided value is less than another value. Equivalent to testing the value in an <code>if(value < other)</code> statement.",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertLessThan"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "other", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "lessThanOrEqual",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided value is less or equal to than another value. Equivalent to testing the value in an <code>if(value <= other)</code> statement.",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertLessThanOrEqual"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "other", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "greaterThan",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided value is greater than another value. Equivalent to testing the value in an <code>if(value > other)</code> statement.",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertGreaterThan"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "other", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "greaterThanOrEqual",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided value is greater than or equal to another value. Equivalent to testing the value in an <code>if(value >= other)</code> statement.",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertGreaterThanOrEqual"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "other", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "lt",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Alias for <code>lessThan()</code>.",
    "tags": [
    {  "tagName": "see",
           "values": ["#lessThan"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "other", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "below",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Alias for <code>lessThan()</code>.",
    "tags": [
    {  "tagName": "see",
           "values": ["#lessThan"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "other", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "gt",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Alias for <code>greaterThan()</code>.",
    "tags": [
    {  "tagName": "see",
           "values": ["#greaterThan"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "other", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "above",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Alias for <code>greaterThan()</code>.",
    "tags": [
    {  "tagName": "see",
           "values": ["#greaterThan"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "other", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "lte",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Alias for <code>lessThanOrEqual()</code>.",
    "tags": [
    {  "tagName": "see",
           "values": ["#lessThanOrEqual"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "other", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "most",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Alias for <code>lessThanOrEqual()</code>.",
    "tags": [
    {  "tagName": "see",
           "values": ["#lessThanOrEqual"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "other", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "gte",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Alias for <code>greaterThanOrEqual()</code>.",
    "tags": [
    {  "tagName": "see",
           "values": ["#greaterThanOrEqual"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "other", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "least",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Alias for <code>greaterThanOrEqual()</code>.",
    "tags": [
    {  "tagName": "see",
           "values": ["#greaterThanOrEqual"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "other", "type": "Number"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "type",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided value is of a type. Equivalent to testing the value in an <code>if(value is type)</code> statement.",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertType"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "type", "type": "Class"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "match",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided value matches a regular expression. Equivalent to testing the value in an <code>if(regExp.test(value))</code> statement.",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertMatch"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "regExp", "type": "RegExp"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "throw",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided function throws.",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertThrows"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "type", "type": "Class"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "throws",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Alias for <code>throw()</code>.",
    "tags": [
    {  "tagName": "see",
           "values": ["#throw"]}  ],
      "return": "org.apache.royale.test.bdd.IExpect",
      "params": [{ "name": "type", "type": "Class"},
    { "name": "message", "type": "String"}]}
  ,
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "not",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Negates all assertions that follow in the chain.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "true",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided value is true (equivalent to testing the value in an <code>if(value)</code> statement).",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertTrue"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "false",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided value is false (equivalent to testing the value in an <code>if(!value)</code> statement).",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertFalse"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "NaN",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided value is NaN (equivalent to testing the value in an <code>if(isNaN(value))</code> statement).",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertNaN"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "null",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Asserts that the provided value is null (equivalent to testing the value in an <code>if(value == null)</code> statement).",
    "tags": [
    {  "tagName": "see",
           "values": ["Assert#assertNull"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "to",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "be",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "been",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "is",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "that",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "which",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "and",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "has",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "have",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "with",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "at",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "of",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "same",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "but",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "org.apache.royale.test.bdd.IExpect",
    "qname": "does",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Chainable getter to improve readability without altering the assertion.",
    "tags": [
      ]}]
  }
