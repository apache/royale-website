/**
 * Generated by Apache Royale Compiler from org/apache/royale/events/EventDispatcher.as
 * org.apache.royale.events.EventDispatcher
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.events.EventDispatcher');
/* Royale Dependency List: org.apache.royale.debugging.alreadyRecorded,org.apache.royale.events.Event,org.apache.royale.events.IRoyaleEvent,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.events.IEventDispatcher');



/**
 * @constructor
 * @extends {goog.events.EventTarget}
 * @implements {org.apache.royale.events.IEventDispatcher}
 * @param {org.apache.royale.events.IEventDispatcher=} target
 */
org.apache.royale.events.EventDispatcher = function(target) {
  org.apache.royale.events.EventDispatcher.base(this, 'constructor');
  target = typeof target !== 'undefined' ? target : null;
  this.org_apache_royale_events_EventDispatcher__dispatcher = target || this;
};
goog.inherits(org.apache.royale.events.EventDispatcher, goog.events.EventTarget);


/**
 * @private
 * @type {org.apache.royale.events.IEventDispatcher}
 */
org.apache.royale.events.EventDispatcher.prototype.org_apache_royale_events_EventDispatcher__dispatcher;


/**
 * @param {string} type
 * @return {boolean}
 */
org.apache.royale.events.EventDispatcher.prototype.hasEventListener = function(type) {
  return goog.events.hasListener(this, type);
};


/**
 *
 * @royaleignorecoercion org.apache.royale.events.IRoyaleEvent
 * @override
 */
org.apache.royale.events.EventDispatcher.prototype.dispatchEvent = function(event1) {
  if (event1) {
    if (typeof(event1) == "string") {
      event1 = new org.apache.royale.events.Event("" + event1);
      event1.target = this.org_apache_royale_events_EventDispatcher__dispatcher;
    } else if ("target" in event1) {
      if (event1.target && org.apache.royale.utils.Language.is(event1, org.apache.royale.events.IRoyaleEvent)) {
        if (goog.DEBUG) {
          var /** @type {Object} */ original = event1;
        }
        event1 = event1.cloneEvent();
        if (goog.DEBUG) {
          if (event1.constructor != original.constructor) {
            var /** @type {boolean} */ notAlreadyRecorded = !org.apache.royale.debugging.alreadyRecorded(original.constructor);
            if (notAlreadyRecorded) {
              console.warn(original.constructor.prototype.ROYALE_CLASS_INFO.names[0].qName + ' is missing a cloneEvent method override, this should be implemented, otherwise it is being cloned as :' + event1.constructor.prototype.ROYALE_CLASS_INFO.names[0].qName);
            }
          }
        }
      }
      event1.target = this.org_apache_royale_events_EventDispatcher__dispatcher;
    }
  }
  else
    return false;
  var /** @type {Array} */ ancestorsTree = null;
  if (event1.bubbles) {
    var /** @type {Object} */ ancestor = this.getParentEventTarget();
    if (ancestor) {
      ancestorsTree = [];
      var /** @type {number} */ ancestorCount = 1;
      for (; ancestor; ancestor = ancestor.getParentEventTarget()) {
        ancestorsTree.push(ancestor);
      }
    }
  }
  return !!(goog.events.EventTarget.dispatchEventInternal_(this, event1, ancestorsTree));
};


/**
 * @override
 */
org.apache.royale.events.EventDispatcher.prototype.fireListeners = function(type, capture, eventObject) {
  var /** @type {Array} */ listenerArray = this.getListeners(type, capture);
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var /** @type {boolean} */ rv = true;
  for (var /** @type {number} */ i = 0; i < listenerArray.length; ++i) {
    if (eventObject.immediatePropogationStopped) {
      break;
    }
    var /** @type {goog.events.Listener} */ listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var /** @type {Object} */ listenerFn = listener.listener;
      var /** @type {Object} */ listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};


/**
 * @return {string}
 */
org.apache.royale.events.EventDispatcher.prototype.toString = function() {
  return "[object Object]";
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.events.EventDispatcher.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'EventDispatcher', qName: 'org.apache.royale.events.EventDispatcher', kind: 'class' }], interfaces: [org.apache.royale.events.IEventDispatcher] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.events.EventDispatcher.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'EventDispatcher': { type: '', declaredBy: 'org.apache.royale.events.EventDispatcher', parameters: function () { return [ 'org.apache.royale.events.IEventDispatcher', true ]; }},
        'hasEventListener': { type: 'Boolean', declaredBy: 'org.apache.royale.events.EventDispatcher', parameters: function () { return [ 'String', false ]; }},
        'dispatchEvent': { type: 'Boolean', declaredBy: 'org.apache.royale.events.EventDispatcher', parameters: function () { return [ 'Object', false ]; }},
        'fireListeners': { type: 'Boolean', declaredBy: 'org.apache.royale.events.EventDispatcher', parameters: function () { return [ 'Object', false ,'Boolean', false ,'Object', false ]; }},
        'toString': { type: 'String', declaredBy: 'org.apache.royale.events.EventDispatcher'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.events.EventDispatcher.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./EventDispatcher.js.map
