/**
 * Generated by Apache Royale Compiler from org/apache/royale/events/utils/EventUtils.as
 * org.apache.royale.events.utils.EventUtils
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.events.utils.EventUtils');
/* Royale Dependency List: org.apache.royale.conversions.createEventInit,org.apache.royale.events.getTargetWrapper*/




/**
 * @constructor
 */
org.apache.royale.events.utils.EventUtils = function() {
};


/**
 * @nocollapse
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @return {Object}
 */
org.apache.royale.events.utils.EventUtils.createEvent = function(type, bubbles, cancelable) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  var /** @type {Object} */ customEvent = null;
  try {
    customEvent = new Event(type, org.apache.royale.conversions.createEventInit(bubbles, cancelable));
    return customEvent;
  } catch (e) {
  }
  if (!customEvent) {
    customEvent = document.createEvent("Event");
    customEvent.initEvent(type, bubbles, cancelable);
  }
  return customEvent;
};


/**
 * A way to let a Royale Event 'hitch a ride' on a native browser event.
 *  Encapsulates the tagging/untagging support in this Utils class
 * @asparam nativeEvent the native event to tag with the Royale Event
 * @asparam royaleEvent the Royale Event to accompany the native event (expected as a org.apache.royale.events.Event here)
 * @asreturn the native event passed it
 * @nocollapse
 * @param {Object} nativeEvent
 * @param {Object} royaleEvent
 * @return {Object}
 */
org.apache.royale.events.utils.EventUtils.tagNativeEvent = function(nativeEvent, royaleEvent) {
  nativeEvent['_RYL_ORIG'] = royaleEvent;
  return nativeEvent;
};


/**
 * A way to retrieve a RoyaleEvent from a native browser event,
 * if present. Encapsulates the tagging/untagging support in this Utils class
 * @asparam nativeEvent
 * @asreturn the resolved event instance
 *
 * @royaleignorecoercion goog.events.Event
 * @nocollapse
 * @param {Object} nativeEvent
 * @return {Object}
 */
org.apache.royale.events.utils.EventUtils.retrieveEvent = function(nativeEvent) {
  if (nativeEvent['_RYL_ORIG']) {
    var /** @type {goog.events.Event} */ rylEvt = nativeEvent['_RYL_ORIG'];
    rylEvt.currentTarget = org.apache.royale.events.getTargetWrapper(nativeEvent.currentTarget);
    return rylEvt;
  }
  return nativeEvent;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.events.utils.EventUtils.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'EventUtils', qName: 'org.apache.royale.events.utils.EventUtils', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.events.utils.EventUtils.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|createEvent': { type: 'Object', declaredBy: 'org.apache.royale.events.utils.EventUtils', parameters: function () { return [ 'String', false ,'Boolean', true ,'Boolean', true ]; }},
        '|tagNativeEvent': { type: 'Object', declaredBy: 'org.apache.royale.events.utils.EventUtils', parameters: function () { return [ 'Object', false ,'Object', false ]; }},
        '|retrieveEvent': { type: 'Object', declaredBy: 'org.apache.royale.events.utils.EventUtils', parameters: function () { return [ 'Object', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.events.utils.EventUtils.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./EventUtils.js.map
