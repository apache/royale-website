{ "type": "class",
  "qname": "org.apache.royale.html.beads.SmoothDataLoader",
  "baseClassname": "org.apache.royale.core.Bead"
  ,
    "description": "The SmoothDataLoader class is a bead that can be used with a List or DataGrid to load data in a smooth way.  It is useful when loading large amounts of data, and the UI needs to be responsive while the data is being loaded.  It can be used with any component that implements IHasDataProvider.  It requires that the dataProvider is an ICollectionView. If the strand does not have a dataProvider, it will create a new ArrayList and set it as the dataProvider.  The data is added to the dataProvider in batches, so that the UI is not blocked while the data is being loaded.  The component must have a strand which listens for changes to the dataProvider and a factory which works with collections.  The number of items to be added in each frame can be adjusted with the batchLength property.  The data can be set with the setData() method, or appended with the appendData() method.  The number of items that are pending to be added to the dataProvider can be obtained with the itemsPending property.",
  "tags": [
  {  "tagName": "see",
         "values": ["org.apache.royale.html.beads.DataItemRendererFactoryForCollectionView", "org.apache.royale.html.beads.DataItemRendererFactoryForArrayList", "org.apache.royale.html.beads.CollectionChangeUpdateForArrayListData", "org.apache.royale.html.beads.DynamicRemoveAllItemRendererForArrayListData"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.10"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "org.apache.royale.html.beads.SmoothDataLoader",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "write-only",
        "return": "org.apache.royale.core.IStrand",
        "qname": "strand",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "batchLength",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The number of data items to be added in each frame. The default is 20.  Depending on the complexity of the item renderers, the number can be adjusted to optimize speed and responsiveness."},
      { "type": "method",
        "qname": "setData",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Sets the dataProvider to the data of specified array.",
          "return": "void",
          "params": [{ "name": "data", "type": "Array"}]}
      ,
      { "type": "method",
        "qname": "appendData",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Appends data to the end of the dataProvider.",
          "return": "void",
          "params": [{ "name": "data", "type": "Array"}]}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "itemsPending",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The number of items that are pending to be added to the dataProvider."}]
  }
