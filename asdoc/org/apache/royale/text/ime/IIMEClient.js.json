{ "type": "interface",
  "qname": "org.apache.royale.text.ime.IIMEClient",
"baseInterfaceNames": [
]
,
    "description": "Interface for IME (input method editor) clients.  Components based on the org.apache.royale.text.engine package must implement this interface to support editing text inline using an IME. This interface is not used with TextField objects. TextLayoutFramework (TLF) uses this interface to support inline IME, so clients using TLF do not need to implement this interface. <p>To support inline IME, set the <code>imeClient</code> property of an <code>ImeEvent.IME_START_COMPOSITION</code> event to an object which implements this interface.</p>",
  "tags": [
  {  "tagName": "see",
         "values": ["org.apache.royale.text.ime.CompositionAttributeRange", "org.apache.royale.events.ImeEvent:imeClient"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10.1", "AIR 1.5"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
    "qname": "updateComposition",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Callback for updating the contents of the inline editing session. This gets called whenever the text being edited with the IME has changed and its contents are used by the client to redraw the entire inline edit session.",
    "tags": [
    {  "tagName": "param",
           "values": ["text  contains the text of the inline edit session from the IME", "attributes  contains an array of composition clauses with adornment info", "relativeSelectionStart  start of the inline session relative to the start of the text object", "relativeSelectionEnd  end of the inline session relative to the start of the text object"]},
        {  "tagName": "playerversion",
           "values": ["Flash 10.1"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "text", "type": "String"},
    { "name": "attributes", "type": "Vector.<org.apache.royale.text.ime.CompositionAttributeRange>"},
    { "name": "compositionStartIndex", "type": "int"},
    { "name": "compositionEndIndex", "type": "int"}]}
  ,
  { "type": "method",
    "qname": "confirmComposition",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Use this callback to end the inline editing session and confirm the text.",
    "tags": [
    {  "tagName": "param",
           "values": ["text  the final state of the text in the inline session (the text that got confirmed).", "preserveSelection  when true, you should not reset the current selection to the end of the confirmed text."]},
        {  "tagName": "playerversion",
           "values": ["Flash 10.1"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "text", "type": "String"},
    { "name": "preserveSelection", "type": "Boolean"}]}
  ,
  { "type": "method",
    "qname": "getTextBounds",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "This callback is used by the IME to query the bounding box of the text being edited with the IME client. Use this method to place the candidate window and set the mouse cursor in the IME client when the mouse is over the text field or other component that supports IME.    The same value should be returned independant of whether <code>startIndex</code> is greater or less than <code>endIndex</code>.",
    "tags": [
    {  "tagName": "param",
           "values": ["startIndex an integer that specifies the starting location of the range of text for which you need to measure the bounding box.", "endIndex Optional; an integer that specifies the ending location of the range of text for which you need to measure the bounding box."]},
        {  "tagName": "playerversion",
           "values": ["Flash 10.1"]},
        {  "tagName": "return",
           "values": ["the bounding box of the specified range of text, or <code>null</code> if either or both of the indexes are invalid."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "org.apache.royale.geom.Rectangle",
      "params": [{ "name": "startIndex", "type": "int"},
    { "name": "endIndex", "type": "int"}]}
  ,
  { "type": "accessor",
    "access": "read-only",
    "return": "int",
    "qname": "compositionStartIndex",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The zero-based character index value of the start of the current edit session text (i.e. all text in the inline session that is still not yet confirmed to the document).",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10.1"]},
        {  "tagName": "return",
           "values": ["the index of the first character of the composition, or <code>-1</code> if there is no active composition."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "int",
    "qname": "compositionEndIndex",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The zero-based character index value of the end of the current edit session text (i.e. all text in the inline session that is still not yet confirmed to the document).",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10.1"]},
        {  "tagName": "return",
           "values": ["the index of the last character of the composition, or <code>-1</code> if there is no active composition."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "Boolean",
    "qname": "verticalTextLayout",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Indicates whether the text in the component is vertical or not.  This will affect the positioning of the candidate window (beside vertical text, below horizontal text).",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10.1"]},
        {  "tagName": "return",
           "values": ["<code>true</code> if the text is vertical, otherwise false."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "int",
    "qname": "selectionAnchorIndex",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The zero-based character index value of the first character in the current selection.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10.1"]},
        {  "tagName": "return",
           "values": ["the index of the character at the anchor end of the selection, or <code>-1</code> if no text is selected."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "int",
    "qname": "selectionActiveIndex",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The zero-based character index value of the last character in the current selection.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10.1"]},
        {  "tagName": "return",
           "values": ["the index of the character at the active end of the selection, or <code>-1</code> if no text is selected."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "method",
    "qname": "selectRange",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Sets the range of selected text in the component. If either of the arguments is out of bounds the selection should not be changed.",
    "tags": [
    {  "tagName": "param",
           "values": ["anchorIndex The zero-based index value of the character at the anchor end of the selection", "activeIndex The zero-based index value of the character at the active end of the selection."]},
        {  "tagName": "playerversion",
           "values": ["Flash 10.1"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "anchorIndex", "type": "int"},
    { "name": "activeIndex", "type": "int"}]}
  ,
  { "type": "method",
    "qname": "getTextInRange",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Gets the specified range of text from the component.  This method is called during IME reconversion.   or if either or both of the indexes are invalid.  The same value should be returned independant of whether <code>startIndex</code> is greater or less than <code>endIndex</code>.",
    "tags": [
    {  "tagName": "param",
           "values": ["startIndex an integer that specifies the starting location of the range of text to be retrieved.", "endIndex an integer that specifies the ending location of the range of text to be retrieved."]},
        {  "tagName": "playerversion",
           "values": ["Flash 10.1"]},
        {  "tagName": "return",
           "values": ["The requested text, or <code>null</code> if no text is available in the requested range"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "String",
      "params": [{ "name": "startIndex", "type": "int"},
    { "name": "endIndex", "type": "int"}]}
  ]
  }
