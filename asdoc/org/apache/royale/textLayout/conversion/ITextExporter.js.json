{ "type": "interface",
  "qname": "org.apache.royale.textLayout.conversion.ITextExporter",
"baseInterfaceNames": [
]
,
    "description": "Interface for exporting text content from a TextFlow instance to a given format, which may for example be String or XML format, or a user-defined format. Exporters support the getting and setting of properties to control the export of data. These properties are implemented as public properties, but the direct access of these properties should be avoided, since a user might replace the converter class in the TextConverter registry, causing a downcast to fail.",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
    "qname": "export",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Export text content from a TextFlow instance in String, or XML, or a user defined format. <p>Set the <code>conversionType</code> parameter to either of the following values, or a user defined format in user-defined exporters. <ul> <li><code>org.apache.royale.textLayout.conversion.ConversionType.STRING_TYPE</code>;</li> <li><code>org.apache.royale.textLayout.conversion.ConversionType.XML_TYPE</code>.</li> </ul> </p>",
    "tags": [
    {  "tagName": "see",
           "values": ["org.apache.royale.textLayout.conversion.ConversionType"]},
        {  "tagName": "param",
           "values": ["source The TextFlow to export", "conversionType  Return a String (STRING_TYPE) or XML (XML_TYPE), or any user defined format."]},
        {  "tagName": "playerversion",
           "values": ["Flash 10", "AIR 1.5"]},
        {  "tagName": "return",
           "values": ["Object The exported content"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Object",
      "params": [{ "name": "source", "type": "org.apache.royale.textLayout.elements.ITextFlow"},
    { "name": "conversionType", "type": "String"}]}
  ,
  { "type": "accessor",
    "access": "read-only",
    "return": "Vector.<String>",
    "qname": "errors",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "This property contains a vector of error messages as strings after a call to an exporter method is the <code>throwOnError</code> property is set to <code>false</code>, which is the default. If there were no errors, the property returns <code>null</code>. The property is reset on each method call.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10.2", "AIR 2.0"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "Boolean",
    "qname": "throwOnError",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The throwOnError property controls how the exporter handles errors. If set to <code>true</code>, methods throw an Error instance on errors. If set to <code>false</code>, which is the default, errors are collected into a vector of strings and stored in the <code>errors</code> property, and the exporter does not throw.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10.2", "AIR 2.0"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "Boolean",
    "qname": "useClipboardAnnotations",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The <code>useClipboardAnnotations</code> property controls whether or not the importer should handle the extra information necessary for the clipboard. When data is in a TextFlow, paragraphs are always complete, and include a terminator character. When a range of text is pasted to the clipboard, it will form paragraphs, but the range may not include in the final terminator. In this case, the paragraph needs to be marked as a partial paragraph if it is intended for the clipboard, so that if it is later pasted it will merge into the new text correctly. If the content is intended for the clipboard, useClipboardAnnotations will be true.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10", "AIR 1.5"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "org.apache.royale.textLayout.conversion.ImportExportConfiguration",
    "qname": "config",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Accesses the config options for the exporter.",
    "tags": [
      ]}]
  }
