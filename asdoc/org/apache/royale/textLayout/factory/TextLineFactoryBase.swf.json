{ "type": "class",
  "qname": "org.apache.royale.textLayout.factory.TextLineFactoryBase",
  "baseClassname": ""
  ,
    "description": "The TextLineFactoryBase class serves as the base class for the Text Layout Framework text line factories.  <p><b>Note:</b> Application code does not typically need to create or use a TextLineFactoryBase object directly. Use one of the derived text factory classes instead.</p>",
  "tags": [
  {  "tagName": "see",
         "values": ["org.apache.royale.textLayout.elements.TextFlow"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "org.apache.royale.textLayout.factory.TextLineFactoryBase",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Base-class constructor for text line factories.  <p><b>Note:</b> Application code does not typically need to create or use a TextLineFactoryBase object directly. Use one of the derived text factory classes instead.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "org.apache.royale.geom.Rectangle",
        "qname": "compositionBounds",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The rectangle within which text lines are created.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "getContentBounds",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The smallest rectangle in which the layed-out content fits.  <p><b>Note:</b> Truncated lines are not included in the size calculation.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "org.apache.royale.geom.Rectangle",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "org.apache.royale.textLayout.compose.ISWFContext",
        "qname": "swfContext",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The ISWFContext instance used to make FTE calls as needed.  <p>By default, the ISWFContext implementation is this FlowComposerBase object. Applications can provide a custom implementation to use fonts embedded in a different SWF file or to cache and reuse text lines.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.textLayout.compose.ISWFContext"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "org.apache.royale.textLayout.factory.TruncationOptions",
        "qname": "truncationOptions",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies the options for truncating the text if it doesn't fit in the composition bounds.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "isTruncated",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Indicates whether text was truncated when lines were last created.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "horizontalScrollPolicy",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies how lines are created when the composition bounds are not large enough.  <p>If set to <code>ScrollPolicy.ON</code> or <code>ScrollPolicy.AUTO</code>, all lines are created. It is the your responsibility to scroll lines in the viewable area (and to mask lines outside this area, if necessary). If set to <code>ScrollPolicy.OFF</code>, then only lines that fit within the composition bounds are created.</p>  <p>If the <code>truncationOptions</code> property is set, the scroll policy is ignored (and treated as <code>ScrollPolicy.OFF</code>).</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.textLayout.compose.StandardFlowComposer", "org.apache.royale.textLayout.container.ScrollPolicy", "#truncationOptions"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "verticalScrollPolicy",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies how lines are created when the composition bounds are not large enough.  <p>If set to <code>ScrollPolicy.ON</code> or <code>ScrollPolicy.AUTO</code>, all lines are created. It is the your responsibility to scroll lines in the viewable area (and to mask lines outside this area, if necessary). If set to <code>ScrollPolicy.OFF</code>, then only lines that fit within the composition bounds are created.</p>  <p>If the <code>truncationOptions</code> property is set, the scroll policy is ignored (and treated as <code>ScrollPolicy.OFF</code>).</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.textLayout.compose.StandardFlowComposer", "org.apache.royale.textLayout.container.ScrollPolicy", "#truncationOptions"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "org.apache.royale.textLayout.container.IContainerController",
        "qname": "containerController",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "method",
        "qname": "callbackWithTextLines",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Sends the created ITextLine objects to the client using the supplied callback function.  <p>This method sets the <code>x</code> and <code>y</code> properties of the line.</p>",
        "tags": [
        {  "tagName": "param",
               "values": ["callback the callback function supplied by the factory user", "delx the horizontal offset", "dely the vertical offset"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "callback", "type": "Function"},
        { "name": "delx", "type": "Number"},
        { "name": "dely", "type": "Number"}]}
      ,
      { "type": "method",
        "qname": "doesComposedTextFit",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Indicates whether the composed text fits in the line count limit and includes all text",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "lineCountLimit", "type": "int"},
        { "name": "textLength", "type": "uint"},
        { "name": "blockProgression", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "getNextTruncationPosition",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Gets the next truncation position by shedding an atom's worth of characters.",
        "tags": [
        {  "tagName": "param",
               "values": ["truncateAtCharPosition the current truncation candidate position.", "multiPara <code>true</code> if text has more than one paragraph."]},
            {  "tagName": "returns",
               "values": ["the next candidate truncation position."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "int",
          "params": [{ "name": "truncateAtCharPosition", "type": "int"},
        { "name": "multiPara", "type": "Boolean"}]}
      ]
  ,
  "events": [
  ]
  }
