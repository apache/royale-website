{ "type": "class",
  "qname": "org.apache.royale.textLayout.compose.TextFlowLine",
  "baseClassname": ""
  ,
    "description": "The TextFlowLine class represents a single line of text in a text flow.  <p>Use this class to access information about how a line of text has been composed: its position, height, width, and so on. When the text flow (TextFlow) is modified, the lines immediately before and at the site of the modification are marked as invalid because they need to be recomposed. Lines after the site of the modification might not be damaged immediately, but they might be regenerated once the text is composed. You can access a TextFlowLine that has been damaged, but any values you access reflect the old state of the TextFlow. When the TextFlow is recomposed, it generates new lines and you can get the new line for a given position by calling <code>TextFlow.flowComposer.findLineAtPosition()</code>.</p>",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "height",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The height of the line in pixels.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "composable",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "_ascent",
        "return": "Number",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "_descent",
        "return": "Number",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "_lineOffset",
        "return": "Number",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "method",
        "qname": "org.apache.royale.textLayout.compose.TextFlowLine",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor - creates a new TextFlowLine instance. <p><strong>Note</strong>: No client should call this. It's exposed for writing your own composer.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.text.engine.ITextLine", "org.apache.royale.textLayout.elements.ParagraphElement", "#absoluteStart"]},
            {  "tagName": "param",
               "values": ["textLine The ITextLine display object to use for this line.", "paragraph The paragraph (ParagraphElement) in which to place the line.", "outerTargetWidth The width the line is composed to, excluding indents.", "lineOffset The line's offset in pixels from the appropriate container inset (as dictated by paragraph direction and container block progression), prior to alignment of lines in the paragraph.", "absoluteStart The character position in the text flow at which the line begins.", "numChars The number of characters in the line."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "textLine", "type": "org.apache.royale.text.engine.ITextLine"},
        { "name": "paragraph", "type": "org.apache.royale.textLayout.elements.IParagraphElement"},
        { "name": "outerTargetWidth", "type": "Number"},
        { "name": "lineOffset", "type": "Number"},
        { "name": "absoluteStart", "type": "int"},
        { "name": "numChars", "type": "int"}]}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "heightTW",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "outerTargetWidthTW",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "ascentTW",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "targetWidthTW",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "textHeightTW",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "lineOffsetTW",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "lineExtentTW",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "hasGraphicElement",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "hasNumberLine",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "numberLinePosition",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "textHeight",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The height of the text line, which is equal to <code>ascent</code> plus <code>descent</code>. The value is calculated based on the difference between the baselines that bound the line, either ideographic top and bottom or ascent and descent depending on whether the baseline at y=0 is ideographic (for example, TextBaseline.IDEOGRAPHIC_TOP) or not.",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.text.engine.TextBaseline TextBaseline"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "x",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The horizontal position of the line relative to its container, expressed as the offset in pixels from the left of the container. <p><strong>Note: </strong>Although this property is technically <code>read-write</code>, you should treat it as <code>read-only</code>. The setter exists only to satisfy the requirements of the IVerticalJustificationLine interface that defines both a getter and setter for this property. Use of the setter, though possible, will lead to unpredictable results. </p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#y"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "xTW",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "y",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The vertical position of the line relative to its container, expressed as the offset in pixels from the top of the container. <p><strong>Note: </strong>Although this property is technically <code>read-write</code>, you should treat it as <code>read-only</code>. The setter exists only to satisfy the requirements of the IVerticalJustificationLine interface that defines both a getter and setter for this property. Use of the setter, though possible, will lead to unpredictable results. </p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#x"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "yTW",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "location",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "One of the values from TextFlowLineLocation for specifying a line's location within a paragraph.",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.textLayout.elements.ParagraphElement", "TextFlowLineLocation"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "org.apache.royale.textLayout.container.IContainerController",
        "qname": "controller",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The controller (ContainerController object) for the container in which the line has been placed.",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.textLayout.container.ContainerController"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "columnIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The number of the column in which the line has been placed, with the first column being 0.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "ascent",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "copy",
               "values": ["org.apache.royale.text.engine.ITextLine#ascent"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "descent",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "copy",
               "values": ["org.apache.royale.text.engine.ITextLine#descent"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "lineOffset",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The line's offset in pixels from the appropriate container inset (as dictated by paragraph direction and container block progression), prior to alignment of lines in the paragraph.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "org.apache.royale.textLayout.elements.IParagraphElement",
        "qname": "paragraph",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The paragraph (ParagraphElement) in which the line resides.",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.textLayout.elements.ParagraphElement"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "absoluteStart",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The location of the line as an absolute character position in the TextFlow object.",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.textLayout.elements.TextFlow"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "return",
               "values": ["the character position in the text flow at which the line begins."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "textBlockStart",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "textLength",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The number of characters to the next line, including trailing spaces.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "spaceBefore",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The amount of space to leave before the line. <p>If the line is the first line of a paragraph that has a space-before applied, the line will have a <code>spaceBefore</code> value. If the line comes at the top of a column, <code>spaceBefore</code> is ignored. Otherwise, the line follows another line in the column, and it is positioned vertically to insure that there is at least this much space left between this line and the last line of the preceding paragraph.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.textLayout.formats.TextLayoutFormat#paragraphSpaceBefore TextLayoutFormat.paragraphSpaceBefore"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "spaceAfter",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The amount of space to leave after the line. <p>If the line is the last line of a paragraph that has a space-after, the line will have a <code>spaceAfter</code> value. If the line comes at the bottom of a column, then the <code>spaceAfter</code> is ignored. Otherwise, the line comes before another line in the column, and the following line must be positioned vertically to insure that there is at least this much space left between this last line of the paragraph and the first line of the following paragraph.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.textLayout.formats.TextLayoutFormat#paragraphSpaceAfter TextLayoutFormat.paragraphSpaceAfter"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "outerTargetWidth",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "targetWidth",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private Amount of space used to break the line <p>The target width is the amount of space allowed for the line, including the space required for indents.</p>",
        "tags": [
          ]},
      { "type": "method",
        "qname": "getBounds",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the bounds of the line as a rectangle.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "return",
               "values": ["a rectangle that represents the boundaries of the line."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "org.apache.royale.geom.Rectangle",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "String",
        "qname": "validity",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The validity of the line. <p>A line can be invalid if the text, the attributes applied to it, or the controller settings have changed since the line was created. An invalid line can still be displayed, and you can use it, but the values used will be the values at the time it was created. The line returned by <code>getTextLine()</code> also will be in an invalid state. </p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#getTextLine()", "org.apache.royale.text.engine.ITextLine#validity ITextLine.validity", "FlowDamageType#GEOMETRY"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "unjustifiedTextWidth",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The width of the line if it was not justified. For unjustified text, this value is the same as <code>textLength</code>. For justified text, this value is what the length would have been without justification, and <code>textLength</code> represents the actual line width. For example, when the following String is justified and assigned a width of 500, it has an actual width of 500 but an unjustified width of 268.9921875.",
        "tags": [
        {  "tagName": "internal",
               "values": ["TBD: add graphic of justified line"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "lineExtent",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "accumulatedLineExtent",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "accumulatedMinimumStart",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "alignment",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]},
      { "type": "method",
        "qname": "oldTestLineVisible",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Boolean",
          "params": [{ "name": "wmode", "type": "String"},
        { "name": "x", "type": "int"},
        { "name": "y", "type": "int"},
        { "name": "w", "type": "int"},
        { "name": "h", "type": "int"}]}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "textLineExists",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Indicates whether the <code>org.apache.royale.text.engine.ITextLine</code> object for this TextFlowLine exists. The value is <code>true</code> if the ITextLine object has <em>not</em> been garbage collected and <code>false</code> if it has been.",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.text.engine.ITextLine ITextLine"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "getTextLine",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the <code>org.apache.royale.text.engine.ITextLine</code> object for this line, which might be recreated if it does not exist due to garbage collection. Set <code>forceValid</code> to <code>true</code> to cause the ITextLine to be regenerated. Returns null if the ITextLine cannot be recreated. .  recreated.",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.text.engine.ITextLine ITextLine"]},
            {  "tagName": "param",
               "values": ["forceValid if true, the ITextLine is regenerated, if it exists but is invalid."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "return",
               "values": ["object for this line or <code>null</code> if the ITextLine object cannot be"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "org.apache.royale.text.engine.ITextLine",
          "params": [{ "name": "forceValid", "type": "Boolean"}]}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "adornCount",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "@private",
        "tags": [
          ]}]
  ,
  "events": [
  ]
  }



