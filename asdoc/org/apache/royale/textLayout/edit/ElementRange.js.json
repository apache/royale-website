{ "type": "class",
  "qname": "org.apache.royale.textLayout.edit.ElementRange",
  "baseClassname": ""
  ,
    "description": "The ElementRange class represents the range of objects selected within a text flow.  <p>The beginning elements (such as <code>firstLeaf</code>) are always less than or equal to the end elements (in this case, <code>lastLeaf</code>) for each pair of values in an element range.</p>",
  "tags": [
  {  "tagName": "see",
         "values": ["org.apache.royale.textLayout.elements.TextFlow"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "absoluteStart",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The absolute text position of the IFlowLeafElement object that contains the start of the range.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "absoluteEnd",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The absolute text position of the IFlowLeafElement object that contains the end of the range.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "org.apache.royale.textLayout.elements.IFlowLeafElement",
        "qname": "firstLeaf",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IFlowLeafElement object that contains the start of the range.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "org.apache.royale.textLayout.elements.IFlowLeafElement",
        "qname": "lastLeaf",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IFlowLeafElement object that contains the end of the range.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "org.apache.royale.textLayout.elements.IParagraphElement",
        "qname": "firstParagraph",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IParagraphElement object that contains the start of the range.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "org.apache.royale.textLayout.elements.IParagraphElement",
        "qname": "lastParagraph",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IParagraphElement object that contains the end of the range.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "org.apache.royale.textLayout.elements.ITextFlow",
        "qname": "textFlow",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The TextFlow object that contains the range.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "org.apache.royale.textLayout.formats.ITextLayoutFormat",
        "qname": "containerFormat",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The format attributes of the container displaying the range.  <p>If the range spans more than one container, the format of the first container is returned.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "org.apache.royale.textLayout.formats.ITextLayoutFormat",
        "qname": "paragraphFormat",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The format attributes of the paragraph containing the range.  <p>If the range spans more than one paragraph, the format of the first paragraph is returned.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "org.apache.royale.textLayout.formats.ITextLayoutFormat",
        "qname": "characterFormat",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The format attributes of the characters in the range.  <p>If the range spans more than one FlowElement object, which means that more than one character format may exist within the range, the format of the first FlowElement object is returned.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "getCommonCharacterFormat",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Gets the character format attributes that are common to all characters in the text range or current selection.  <p>Format attributes that do not have the same value for all characters in the element range are set to <code>null</code> in the returned TextLayoutFormat instance.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "return",
               "values": ["The common character style settings"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "org.apache.royale.textLayout.formats.TextLayoutFormat",
          "params": []}
      ,
      { "type": "method",
        "qname": "getCommonParagraphFormat",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Gets the paragraph format attributes that are common to all paragraphs in the element range.  <p>Format attributes that do not have the same value for all paragraphs in the element range are set to <code>null</code> in the returned TextLayoutFormat instance.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.textLayout.edit.ISelectionManager#getCommonParagraphFormat"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "return",
               "values": ["The common paragraph style settings"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "org.apache.royale.textLayout.formats.TextLayoutFormat",
          "params": []}
      ,
      { "type": "method",
        "qname": "getCommonContainerFormat",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Gets the container format attributes that are common to all containers in the element range.  <p>Format attributes that do not have the same value for all containers in the element range are set to <code>null</code> in the returned TextLayoutFormat instance.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.textLayout.edit.ISelectionManager#getCommonParagraphFormat  *"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "return",
               "values": ["The common paragraph style settings"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "org.apache.royale.textLayout.formats.TextLayoutFormat",
          "params": []}
      ,
      { "type": "method",
        "qname": "createElementRange",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Creates an ElementRange object.",
        "tags": [
        {  "tagName": "param",
               "values": ["textFlow the text flow", "beginIndex absolute text position of the first character in the text range", "endIndex one beyond the absolute text position of the last character in the text range"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "org.apache.royale.textLayout.edit.ElementRange",
          "params": [{ "name": "textFlow", "type": "org.apache.royale.textLayout.elements.ITextFlow"},
        { "name": "absoluteStart", "type": "int"},
        { "name": "absoluteEnd", "type": "int"}]}
      ]
  ,
  "events": [
  ]
  }
