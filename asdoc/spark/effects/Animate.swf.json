{ "type": "class",
  "qname": "spark.effects.Animate",
  "baseClassname": "mx.effects.Effect"
  ,
    "description": "This Animate effect animates an arbitrary set of properties between values. Specify the properties and values to animate by setting the <code>motionPaths</code> property.   <p>The <code>&lt;s:Animate&gt;</code> tag inherits all of the tag attributes of its superclass, and adds the following tag attributes:</p>  <pre>\\n &lt;s:Animate\\n <b>Properties</b>\\n id=&quot;ID&quot;\\n disableLayout=&quot;false&quot;\\n easer=&quot;{spark.effects.easing.Sine(.5)}&quot;\\n interpolator=&quot;NumberInterpolator&quot;\\n motionPaths=&quot;no default&quot;\\n repeatBehavior=&quot;loop&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/AnimateEffectExample.mxml"]},
      {  "tagName": "see",
         "values": ["spark.effects.supportClasses.AnimateInstance"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.effects.Animate",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "param",
               "values": ["target The Object to animate with this effect."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "target", "type": "Object"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Vector.<spark.effects.animation.MotionPath>",
        "qname": "motionPaths",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A Vector of MotionPath objects, each of which holds the name of a property being animated and the values that the property takes during the animation. This Vector takes precedence over any properties declared in subclasses of Animate. For example, if this Array is set directly on a Move effect, then any properties of the Move effect, such as <code>xFrom</code>, are ignored.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "spark.effects.easing.IEaser",
        "qname": "easer",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The easing behavior for this effect. This IEaser object is used to convert the elapsed fraction of the animation into an eased fraction, which is then used to calculate the value at that eased elapsed fraction.  <p>Note that it is possible to have easing at both the effect level and the Keyframe level (where Keyframes hold the values/times used in the MotionPath structures). These easing behaviors build on each other. The <code>easer</code> controls the easing of the overall effect. The Keyframe controls the easing in any particular interval of the animation. By default, the easing for Animate is non-linear (Sine(.5)). The easing for Keyframes is linear. If you desire an effect with easing at the keyframe level instead, you can set the easing of the effect to linear, and then set the easing specifically on the Keyframes.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["spark.effects.easing.Sine(.5)"]},
            {  "tagName": "see",
               "values": ["spark.effects.easing.Sine"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "spark.effects.interpolation.IInterpolator",
        "qname": "interpolator",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The interpolator used by this effect to calculate values between the start and end values of a property. By default, the NumberInterpolator class handles interpolation or, in the case of the start and end values being Arrays or Vectors, by the MultiValueInterpolator class. Interpolation of other types, or of Numbers that should be interpolated differently, such as <code>uint</code> values that hold color channel information, can be handled by supplying a different interpolator.",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.effects.interpolation.NumberInterpolator", "spark.effects.interpolation.MultiValueInterpolator"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "repeatBehavior",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The behavior of a repeating effect, which means an effect with <code>repeatCount</code> equal to either 0 or &gt; 1. This value should be either <code>RepeatBehavior.LOOP</code>, which means the animation repeats in the same order each time, or <code>RepeatBehavior.REVERSE</code>, which means the animation reverses direction on each iteration.",
        "tags": [
        {  "tagName": "default",
               "values": ["RepeatBehavior.LOOP"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "disableLayout",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If <code>true</code>, the effect disables layout on its targets' parent containers, setting the containers <code>autoLayout</code> property to false, and also disables any layout constraints on the target objects. These properties are restored when the effect finishes.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "relevantStyles",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "method",
        "qname": "removeEventListener",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": [{ "name": "type", "type": "String"},
        { "name": "listener", "type": "Function"},
        { "name": "useCapture", "type": "Boolean"}]}
      ]
  ,
  "events": [
  { "qname": "effectUpdate",
        "type": "mx.events.EffectEvent"
      ,
          "description": "Dispatched every time the effect updates the target.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "eventType",
               "values": ["mx.events.EffectEvent.EFFECT_UPDATE"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "effectRepeat",
        "type": "mx.events.EffectEvent"
      ,
          "description": "Dispatched when the effect begins a new repetition, for any effect that is repeated more than once. Flex also dispatches an <code>effectUpdate</code> event for the effect at the same time.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "eventType",
               "values": ["mx.events.EffectEvent.EFFECT_REPEAT"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "effectEnd",
        "type": "mx.events.EffectEvent"
      ,
          "description": "",
        "tags": [
          ]}]
  }
