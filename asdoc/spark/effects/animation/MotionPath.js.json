{ "type": "class",
  "qname": "spark.effects.animation.MotionPath",
  "baseClassname": ""
  ,
    "description": "The MotionPath class defines the collection of Keyframes objects for an effect, and the name of the property on the target to animate. Each Keyframe object defines the value of the property at a specific time during an effect. The effect then calculates the value of the target property by interpolating between the values specified by two key frames.   <p>The <code>&lt;s:MotionPath&gt;</code> tag inherits the tag attributes of its superclass, and adds the following tag attributes:</p>  <pre>\\n &lt;s:MotionPath\\n id=&quot;ID&quot;\\n interpolator=&quot;NumberInterpolator&quot;\\n keyframes=&quot;val&quot;\\n property=&quot;val&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/KeyFrameEffectExample.mxml"]},
      {  "tagName": "see",
         "values": ["Keyframe", "spark.effects.interpolation.NumberInterpolator"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.effects.animation.MotionPath",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "param",
               "values": ["property The name of the property on the target to animate."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "property", "type": "String"}]}
      ,
      { "type": "field",
        "qname": "property",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The name of the property on the effect target to be animated.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "interpolator",
        "return": "spark.effects.interpolation.IInterpolator",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The interpolator determines how in-between values in an animation are calculated. By default, the MotionPath class assumes that the values are of type Number and can calculate in-between Number values automatically. If the MotionPath class is given keyframes with non-Number values, or if the desired behavior should use a different approach to interpolation (such as per-channel color interpolation), then an interpolator should be supplied.  <p>Flex supplies predefined interpolators in the spark.effects.interpolation package.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "keyframes",
        "return": "Vector.<spark.effects.animation.Keyframe>",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A sequence of Keyframe objects that represent the time/value pairs that the property takes during the animation. Each successive pair of keyframes controls the animation during the time interval between them. The optional <code>easer</code> and <code>valueBy</code> properties of the later keyframe are used to determine the behavior during that interval. The sequence of keyframes must be sorted in order of increasing time values.  <p>Animations always start at time=0 and lasts for a duration equal to the <code>time</code> value in the final keyframe. If no keyframe is defined at time=0, that keyframe is implicit, using the value of the target property at the time the animation begins. </p>  <p>Because keyframes explicitly define the times involved in an animation, the duration for an effect using keyframes is set according to the maximum time of the final keyframe of all MotionPaths in the effect. For example, if an effect has keyframes at times 0, 500, 1000, and 2000, then the effective duration of that effect is 2000 ms, regardless of any <code>duration</code> property set on the effect itself. Because the final keyframe determines the duration, there must always be a final keyframe in any MotionPath. That is, it is implicit that the time in the final keyframe is the duration of the MotionPath.</p>  <p>Any keyframe may leave its <code>value</code> undefined (either unset, set to <code>null</code>, or set to <code>NaN</code>). In that case, the value is determined dynamically when the animation starts. Any undefined value is determined as follows: </p> <ol> <li>If it is the first keyframe, it is calculated from the next keyframe if that keyframe has both a <code>value</code> and <code>valueBy</code> property set, as the difference of those values. Otherwise it gets the current value of the property from the target.</li> <li>If it is the final keyframe and the animation is running in a transition, it uses the value in the destination view state of the transition.</li> <li>Otherwise, any keyframe calculates its <code>value</code> by using the previous keyframe's <code>value</code> and adding the current keyframe's <code>valueBy</code> to it, if <code>valueBy</code> is set.</li> </ol>",
        "tags": [
        {  "tagName": "see",
               "values": ["Keyframe"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "clone",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns a copy of this MotionPath object, including copies of each keyframe.  of each keyframe.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "return",
               "values": ["A copy of this MotionPath object, including copies"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "spark.effects.animation.MotionPath",
          "params": []}
      ,
      { "type": "method",
        "qname": "getValue",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Calculates and returns an interpolated value, given the elapsed time fraction. The function determines the keyframe interval that the fraction falls within and then interpolates within that interval between the values of the bounding keyframes on that interval.  (a value from 0.0 to 1.0).",
        "tags": [
        {  "tagName": "param",
               "values": ["fraction The fraction of the overall duration of the effect,"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "return",
               "values": ["The interpolated value."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "fraction", "type": "Number"}]}
      ]
  }
