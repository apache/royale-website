{ "type": "class",
  "qname": "spark.effects.animation.Animation",
  "baseClassname": ""
  ,
    "description": "The Animation class defines an animation that happens between the start and end values of a property over a specified period of time. The animation can be a change in position, such as performed by the Move effect; a change in size, as performed by the Resize effect; a change in visibility, as performed by the Fade effect; or other types of animations used by effects or run directly with the Animation class.  <p>This class defines the timing and value parts of the animation. Other code, either in effects or in application code, associates the animation with target objects and properties, such that the animated values produced by Animation class can then be applied to target objects and properties to actually cause these objects to animate.</p>  <p>When defining animation effects, you typically create an instance of the Animate class, or of a subclass of Animate. This creates an Animation instance in the <code>play()</code> method. The Animation instance accepts start and end values, a duration, and optional parameters such as easer and interpolator objects.</p>  <p>The Animation object calls event listeners at the start and end of the animation, when the animation repeats, and at regular update intervals during the animation. These calls pass values which the Animation instance calculated from the start and end values and the easer and interpolator objects. These values can then be used to set property values on target objects.</p>",
  "tags": [
  {  "tagName": "see",
         "values": ["spark.effects.Animate", "spark.effects.supportClasses.AnimateInstance"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.effects.animation.Animation",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor. The optional <code>property</code>, <code>startValue</code>, and <code>endValue</code> parameters define a simple animation with a single MotionPath object with two Keyframes. If either value is non-null, <code>startValue</code> becomes the <code>value</code> of the first keyframe, at time=0, and <code>endValue</code> becomes the <code>value</code> of the second keyframe, at the end of the animation.",
        "tags": [
        {  "tagName": "param",
               "values": ["duration The length of the animation, in milliseconds.", "property The property to animate.", "startValue The initial value of the property.", "endValue The final value of the property."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "duration", "type": "Number"},
        { "name": "property", "type": "String"},
        { "name": "startValue", "type": "Object"},
        { "name": "endValue", "type": "Object"}]}
      ,
      { "type": "field",
        "qname": "currentValue",
        "return": "Object",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An Object containing the calculated values as of the current frame of the Animation. The values are stored as map values, using property names as the key.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "motionPaths",
        "return": "Vector.<spark.effects.animation.MotionPath>",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The set of MotionPath objects that define the properties and values that the Animation will animate over time.",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.effects.animation.MotionPath"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "spark.effects.animation.IAnimationTarget",
        "qname": "animationTarget",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IAnimationTarget object notified with all start, end, repeat, and update events for this animation. A value of <code>null</code> indicates that there is no target to notify.",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "playheadTime",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The total elapsed time of the animation, including any start delay and repetitions. For an animation playing through its first cycle, this value will equal that of <code>cycleTime</code>.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "isPlaying",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If <code>true</code>, the animation is currently playing. The value is <code>false</code> unless the animation has been played and not yet stopped (either programmatically or automatically) or paused.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "duration",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The length of time, in milliseconds, of the animation, not counting any repetitions defined by the <code>repeatCount</code> property.",
        "tags": [
        {  "tagName": "default",
               "values": ["500"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "repeatBehavior",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Sets the behavior of a repeating animation. A repeating animation has the <code>repeatCount</code> property set to 0 or to a value greater than 1. This value should be either <code>RepeatBehavior.LOOP</code>, meaning the animation repeats in the same order each time, or <code>RepeatBehavior.REVERSE</code>, meaning the animation reverses direction for each iteration.",
        "tags": [
        {  "tagName": "default",
               "values": ["RepeatBehavior.LOOP"]},
            {  "tagName": "see",
               "values": ["spark.effects.animation.RepeatBehavior"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "repeatCount",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The number of times that this animation repeats. A value of 0 means that it repeats indefinitely.",
        "tags": [
        {  "tagName": "default",
               "values": ["1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "repeatDelay",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The amount of time, in milliseconds, to delay before each repetition cycle begins. Setting this value to a non-zero number ends previous animation cycle exactly at  its end value However, non-delayed repetitions may skip over that value completely as the animation transitions smoothly from being near the end of one cycle to being past the beginning of the next. This property must be a value &gt;= 0.  <p>This property is used for the first repetition after the first animation cycle. To delay the first cycle of the animation, use the <code>startDelay</code> property. </p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#startDelay"]},
            {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "startDelay",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The amount of time spent waiting before the animation begins. This property must be a value &gt;= 0.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "interpolator",
        "return": "spark.effects.interpolation.IInterpolator",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The interpolator used by the Animation instance to calculate values between the start and end values of the property. By default, the class uses the NumberInterpolator class or, in the case of the start and end values being arrays or Vectors, by the MultiValueInterpolator class. Interpolation of other data types, or of Numbers that should be interpolated differently, such as <code>uint</code> values that hold color channel information, can be handled by supplying a different interpolator.",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.effects.interpolation.NumberInterpolator", "spark.effects.interpolation.MultiValueInterpolator"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "cycleTime",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The current millisecond position in the current cycle animation. This value is between 0 and <code>duration</code>. An animation 'cycle' is defined as a single repetition of the animation, where the <code>repeatCount</code> property defines the number of cycles that will be played. Use the <code>seek()</code> method to change the position of the animation.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "cycleFraction",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The current fraction elapsed in the animation, after easing has been applied. This value is between 0 and 1. An animation 'cycle' is defined as a single repetition of the animation, where the <code>repeatCount</code> property defines the number of cycles that will be played.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "spark.effects.easing.IEaser",
        "qname": "easer",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The easing behavior for this effect. This IEaser object is used to convert the elapsed fraction of the animation into an eased fraction, which is then used to calculate the value at that eased elapsed fraction.  <p>A value of <code>null</code> means no easing is used, which is equivalent to using a Linear ease, or <code>animation.easer = Linear.getInstance();</code>.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["Sine(.5)"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "playReversed",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If <code>true</code>, play the animation in reverse. If the animation is currently playing in the opposite direction to the specified value of <code>playReversed</code>, the animation will change direction dynamically.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "end",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Interrupts the animation, jumps immediately to the end of the animation, and calls the animationEnd() function on the <code>animationTarget</code>.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "play",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Start the animation. If the animation is already playing, it is stopped first, then played.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "pause",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Pauses the effect until the <code>resume()</code> method is called. If <code>stop()</code> is called before <code>resume()</code>, then the animation cannot be resumed.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "stop",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Stops the animation, ending it without calling the <code>end()</code> method. The animationStop() function on the <code>animationTarget</code> will be called.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "resume",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Resumes the effect after it has been paused by a call to the <code>pause()</code> method.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ]
  ,
  "events": [
  ]
  }
