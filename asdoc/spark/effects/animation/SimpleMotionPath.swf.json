{ "type": "class",
  "qname": "spark.effects.animation.SimpleMotionPath",
  "baseClassname": "spark.effects.animation.MotionPath"
  ,
    "description": "The SimpleMotionPath class specifies the name of a property, and the values that that property takes over time, for instances of the Animate effect.  <p>This class is a simple subclass of MotionPath for defining two keyframes to hold the <code>valueFrom</code>, <code>valueTo</code>, and <code>valueBy</code> properties. The MotionPath class itself can define any number of keyframes.</p>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/SimpleMotionPathEffectExample.mxml"]},
      {  "tagName": "see",
         "values": ["MotionPath"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.effects.animation.SimpleMotionPath",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor. You can specify both the <code>valueFrom</code> and <code>valueTo</code> parameters, or specify the <code>valueBy</code> parameter and either the <code>valueFrom</code> or <code>valueTo</code> parameter. If you omit these parameters, Flex calculates them from the effect target.     which to calculate either the from or to values, if one is omitted.",
        "tags": [
        {  "tagName": "param",
               "values": ["property The name of the property being animated.", "valueFrom The initial value of the property.", "valueTo The final value of the property.", "valueBy An optional parameter that specifies the delta with"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "property", "type": "String"},
        { "name": "valueFrom", "type": "Object"},
        { "name": "valueTo", "type": "Object"},
        { "name": "valueBy", "type": "Object"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "valueFrom",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The starting value for the property during the animation.  <p>A value of Null or NaN (in the case of Numbers) specifies that a value must be determined dynamically at runtime, either by getting the value from the target property directly or calculating it if the other value is valid and there is also a valid <code>valueBy</code> value supplied.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "valueTo",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The value that the named property will animate to.  <p>A value of Null or NaN (in the case of Numbers) element specifies that a value must be determined dynamically at runtime, either by getting the value from the target property directly or calculating it if the other value is valid and there is also a valid <code>valueBy</code> value supplied.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "valueBy",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Optional property which specifies the delta used to calculate either the <code>valueFrom</code> or <code>valueTo</code> value. Providing this optional property lets the effect calculate the necessary from/to values if either are not provided or are to be determined dynamically when the animation begins.  <p>The way that the <code>valueBy</code> value is used depends on which of the other values are set. If neither are set, then the <code>valueFrom</code> value is determined from the current property value in the target, and the <code>valueTo</code> value is <code>valueFrom + valueBy</code>. If one or the other is set, but not both, then the unset value is calculated by the other value: <code>valueTo = valueFrom + valueBy</code> or <code>valueFrom = valueTo - valueBy</code>). If both are set, then the <code>valueBy</code> property is ignored.</p>  <p>Note that since <code>valueBy</code> is of type Object, the effect cannot directly calculate the other values from it. It uses the effect's interpolator to calculate the values by calling the interpolator's <code>increment()</code> and <code>decrement()</code> methods. If no interpolator is set, then it will use NumberInterpolator by default.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
