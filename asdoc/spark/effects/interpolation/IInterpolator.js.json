{ "type": "interface",
  "qname": "spark.effects.interpolation.IInterpolator",
"baseInterfaceNames": [
]
,
    "description": "The IInterpolator interface is implemented by classes that calculate values for the Animation class. The Animation class can handle parametric interpolation between Number values and arrays of Number values, but it cannot handle different types of interpolation, or interpolation between different types of values. Implementors of this interface can provide arbitrary interpolation capabilities so that Animations can be created between arbitrary values.",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
    "qname": "interpolate",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Given an elapsed fraction of an animation, between 0.0 and 1.0, and start and end values to interpolate, return the interpolated value.  animation, between 0.0 and 1.0.",
    "tags": [
    {  "tagName": "param",
           "values": ["fraction The fraction elapsed of the", "startValue The start value of the interpolation.", "endValue The end value of the interpolation."]},
        {  "tagName": "playerversion",
           "values": ["Flash 10", "AIR 1.5"]},
        {  "tagName": "productversion",
           "values": ["Flex 4"]},
        {  "tagName": "return",
           "values": ["The interpolated value."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Object",
      "params": [{ "name": "fraction", "type": "Number"},
    { "name": "startValue", "type": "Object"},
    { "name": "endValue", "type": "Object"}]}
  ,
  { "type": "method",
    "qname": "increment",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Given a base value and a value to add to it, return the result of that operation. For example, if the objects are simple Numbers, the result is a <code>Number(baseValue) + Number(incrementValue)</code>. This method is called by the animation system when it needs to dynamically calculate a value given some starting value and a 'by' value that should be added to it. Both of the arguments are of type Object and cannot simply be added together.",
    "tags": [
    {  "tagName": "param",
           "values": ["baseValue The start value of the interpolation.", "incrementValue The change to apply to the <code>baseValue</code>."]},
        {  "tagName": "playerversion",
           "values": ["Flash 10", "AIR 1.5"]},
        {  "tagName": "productversion",
           "values": ["Flex 4"]},
        {  "tagName": "return",
           "values": ["The interpolated value."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Object",
      "params": [{ "name": "baseValue", "type": "Object"},
    { "name": "incrementValue", "type": "Object"}]}
  ,
  { "type": "method",
    "qname": "decrement",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Given a base value and a value to subtract from it, return the result of that decrement operation. For example, if the objects are simple Numbers, the result would be <code>Number(baseValue) - Number(incrementValue)</code>. This function is called by the animation system when it needs to dynamically calculate a value given some ending value and a 'by' value that should be subtracted from it. Both of the arguments are of type Object and cannot simply be added together.",
    "tags": [
    {  "tagName": "param",
           "values": ["baseValue The start value of the interpolation.", "decrementValue The change to apply to the <code>baseValue</code>."]},
        {  "tagName": "playerversion",
           "values": ["Flash 10", "AIR 1.5"]},
        {  "tagName": "productversion",
           "values": ["Flex 4"]},
        {  "tagName": "return",
           "values": ["The interpolated value."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Object",
      "params": [{ "name": "baseValue", "type": "Object"},
    { "name": "decrementValue", "type": "Object"}]}
  ]
  }
