{ "type": "class",
  "qname": "spark.effects.Resize",
  "baseClassname": "spark.effects.Animate"
  ,
    "description": "The Resize effect changes the width, height, or both dimensions of a component over a specified time interval.  <p>If you specify only two of the three values of the <code>widthFrom</code>, <code>widthTo</code>, and <code>widthBy</code> properties, Flex calculates the third. If you specify all three, Flex ignores the <code>widthBy</code> value. If you specify only the <code>widthBy</code> or the <code>widthTo</code> value, the <code>widthFrom</code> property is set to be the object's current width. The same is true for <code>heightFrom</code>, <code>heightTo</code>, and <code>heightBy</code> property values.</p>   <p>The <code>&lt;s:Resize&gt;</code> tag inherits all of the tag attributes of its superclass, and adds the following tab attributes:</p>  <pre>\\n &lt;s:Resize\\n id=&quot;ID&quot;\\n widthFrom=&quot;val&quot;\\n heightFrom=&quot;val&quot;\\n widthTo=&quot;val&quot;\\n heightTo=&quot;val&quot;\\n widthBy=&quot;val&quot;\\n heightBy=&quot;val&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/ResizeEffectExample.mxml"]},
      {  "tagName": "see",
         "values": ["spark.effects.supportClasses.ResizeInstance"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.effects.Resize",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "param",
               "values": ["target The Object to animate with this effect."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "target", "type": "Object"}]}
      ,
      { "type": "field",
        "qname": "heightBy",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Number of pixels by which to modify the height of the component. Values may be negative.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "heightFrom",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Initial height, in pixels. If omitted, Flex uses the current height of the target.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "heightTo",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Final height of the target, in pixels.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "widthBy",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Number of pixels by which to modify the width of the target. Values may be negative.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "widthFrom",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Initial width of the target, in pixels. If omitted, Flex uses the current width.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "widthTo",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Final width of the target, in pixels.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "relevantStyles",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "method",
        "qname": "play",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "return": "void",
          "params": []}
      ]
  ,
  "events": [
  { "qname": "effectEnd",
        "type": "mx.events.EffectEvent"
      },
      { "qname": "effectUpdate",
        "type": "mx.events.EffectEvent"
      }]
  }
