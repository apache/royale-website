{ "type": "interface",
  "qname": "spark.effects.easing.IEaser",
    "description": "The IEaser interface is implemented by classes that provide time-easing functionality for the Animation class. Implementors are responsible for the single function, <code>ease()</code>, which takes and returns a fraction according to the easing behavior desired. As a simple example, LinearEase simply returns the same input fraction, since there is no easing performed by that easer. As another example, a reversing easer could be written which returned the inverse fraction, (1 - <code>fraction</code>).  <p>By easing the fractional values of the time elapsed in an animation, these classes are easing the resulting values of the animation, but they only have to deal with the fractional value of time instead of any specific object types.</p>",
  "tags": [
  {  "tagName": "see",
         "values": ["spark.effects.animation.Animation"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
    "qname": "ease",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Takes the fraction representing the elapsed duration of an animation (a value between 0.0 to 1.0) and returns a new elapsed value. This  value is used to calculate animated property values. By changing the value of the elapsed fraction, you effectively change the animation of the property.   should be constrained to lie between 0.0 and 1.0, although it is possible to return values outside of this range. Note that the results of returning such values are undefined, and depend on what kind of effects are using this eased value. For example, an object moving in a linear fashion can have positions calculated outside of its start and end point without a problem, but other value types (such as color) may not result in desired effects if they use time values that cause them to surpass their endpoint values.",
    "tags": [
    {  "tagName": "param",
           "values": ["fraction The elapsed fraction of an animation, from 0.0 to 1.0."]},
        {  "tagName": "playerversion",
           "values": ["Flash 10", "AIR 1.5"]},
        {  "tagName": "productversion",
           "values": ["Flex 4"]},
        {  "tagName": "return",
           "values": ["The eased value for the elapsed time. Typically, this value"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Number",
      "params": [{ "name": "fraction", "type": "Number"}]}
  ]
  }
