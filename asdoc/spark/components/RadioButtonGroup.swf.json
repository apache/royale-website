{ "type": "class",
  "qname": "spark.components.RadioButtonGroup",
  "baseClassname": "org.apache.royale.events.EventDispatcher"
  ,
    "description": "The RadioButtonGroup component defines a group of RadioButton components that act as a single mutually exclusive component; therefore, a user can select only one RadioButton component at a time. The <code>id</code> property is required when you use the <code>&lt;s:RadioButtonGroup&gt;</code> tag to define the group name.  Any <code>&lt;s:RadioButton&gt;</code> component added to this group will have this group name.  <p>Notice that the RadioButtonGroup component is a subclass of EventDispatcher, not UIComponent, and implements the IMXMLObject interface. All other Flex visual components implement the IVisualElement interface. The RadioButtonGroup component declaration must be contained within the <code>&lt;Declarations&gt;</code> tag since it is not assignable to IVisualElement.</p>  <p>To use this component in a list-based component, such as a List or DataGrid, create an item renderer. For information about creating an item renderer, see <a href=&quot;http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html&quot;> Custom Spark item renderers</a>. </p>   <p>The <code>&lt;s:RadioButtonGroup&gt;</code> tag inherits all of the tag attributes of its superclass, and adds the following tag attributes:</p>  <pre>\\n &lt;s:RadioButtonGroup\\n <strong>Properties</strong>\\n enabled=&quot;true&quot;\\n selectedValue=&quot;null&quot;\\n selection=&quot;null&quot;\\n \\n <strong>Events</strong>\\n change=&quot;<i>No default</i>&quot;\\n itemClick=&quot;<i>No default</i>&quot;\\n valueCommit=&quot;<i>No default</i>&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/RadioButtonGroupExample.mxml"]},
      {  "tagName": "see",
         "values": ["spark.components.RadioButton"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.components.RadioButtonGroup",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.  the <code>document</code> parameter should not be used.",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.events.EventDispatcher"]},
            {  "tagName": "param",
               "values": ["document In simple cases where a class extends EventDispatcher,"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "document", "type": "mx.core.IFlexDisplayObject"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "enabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Determines whether selection is allowed.  Note that the value returned only reflects the value that was explicitly set on the <code>RadioButtonGroup</code> and does not reflect any values explicitly set on the individual RadioButtons.",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "numRadioButtons",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The number of RadioButtons that belong to this RadioButtonGroup.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"0\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "selectedIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The index of the selected RadioButton component in the group. If a RadioButton is not selected, this property is <code>-1</code>.",
        "tags": [
        {  "tagName": "default",
               "values": ["-1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "selectedValue",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "The <code>value</code> property of the selected RadioButton component in the group, if it has been set, otherwise, the <code>label</code> property of the selected RadioButton. If no RadioButton is selected, this property is <code>null</code>.  <p>If you set <code>selectedValue</code>, Flex selects the first RadioButton component whose <code>value</code> or <code>label</code> property matches this value.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "spark.components.RadioButton",
        "qname": "selection",
        "namespace": "public",
        "bindable": ["change","valueCommit"],
        "details": [],
        "deprecated": {},
          "description": "Contains a reference to the currently selected RadioButton component in the group. You can access this property in ActionScript only; it is not settable in MXML. Setting this property to <code>null</code> deselects the currently selected RadioButton component.  A change event is not dispatched.",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "getRadioButtonAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the RadioButton component at the specified index.  RadioButtonGroup.  0 and <code>numRadioButtons</code> - 1.  Returns <code>null</code> if the index is invalid.",
        "tags": [
        {  "tagName": "see",
               "values": ["numRadioButtons"]},
            {  "tagName": "param",
               "values": ["index The 0-based index of the RadioButton in the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "return",
               "values": ["The specified RadioButton component if index is between"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "spark.components.RadioButton",
          "params": [{ "name": "index", "type": "int"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "id",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]}]
  ,
  "events": [
  { "qname": "change",
        "type": "org.apache.royale.events.Event"
      ,
          "description": "Dispatched when the value of the selected RadioButton component in this group changes.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "eventType",
               "values": ["flash.events.Event.CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemClick",
        "type": "mx.events.ItemClickEvent"
      ,
          "description": "Dispatched when a user selects a RadioButton component in the group. You can also set a handler for individual RadioButton components.  This event is dispatched only when the user interacts with the radio buttons by using the mouse.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "eventType",
               "values": ["mx.events.ItemClickEvent.ITEM_CLICK"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "valueCommit",
        "type": "mx.events.FlexEvent"
      ,
          "description": "Dispatched when values are changed programmatically or by user interaction.  <p>Because a programmatic change triggers this event, make sure that any <code>valueCommit</code> event handler does not change a value that causes another <code>valueCommit</code> event. For example, do not change the<code>selectedValue</code> property or <code>selection</code> property in a <code>valueCommit</code> event handler. </p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "eventType",
               "values": ["mx.events.FlexEvent.VALUE_COMMIT"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
