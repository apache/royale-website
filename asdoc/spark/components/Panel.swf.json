{ "type": "class",
  "qname": "spark.components.Panel",
  "baseClassname": "spark.components.SkinnableContainer"
  ,
    "description": "The Panel class defines a container that includes a title bar, a caption, a border, and a content area for its children.  <p>The panel container has the following default characteristics:</p> <table class=&quot;innertable&quot;> <tr><th>Characteristic</th><th>Description</th></tr> <tr><td>Default size</td><td>Large enough to display its children</td></tr> <tr><td>Minimum size</td><td>131 pixels wide and 127 pixels high</td></tr> <tr><td>Maximum size</td><td>10000 pixels wide and 10000 pixels high</td></tr> </table>   <p>The <code>&lt;s:Panel&gt;</code> tag inherits all of the tag attributes of its superclass and adds the following tag attributes:</p>  <pre>\\n &lt;s:Panel\\n <strong>Properties</strong>\\n controlBarContent=&quot;null&quot;\\n controlBarLayout=&quot;HorizontalLayout&quot;\\n controlBarVisible=&quot;true&quot;\\n title=&quot;&quot;\\n \\n <strong>Styles</strong>\\n borderAlpha=&quot;0.5&quot;\\n borderColor=&quot;0&quot;\\n borderVisible=&quot;true&quot;\\n cornerRadius=&quot;0&quot;\\n dropShadowVisible=&quot;true&quot;\\n &gt;\\n ...\\n <i>child tags</i>\\n ...\\n &lt;/s:Panel&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/PanelExample.mxml"]},
      {  "tagName": "see",
         "values": ["SkinnableContainer", "spark.skins.spark.PanelSkin"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.components.Panel",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "field",
        "qname": "controlBarGroup",
        "return": "spark.components.Group",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The skin part that defines the appearance of the control bar area of the container. By default, the PanelSkin class defines the control bar area to appear at the bottom of the content area of the Panel container with a grey background.",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.skins.spark.PanelSkin"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "titleDisplay",
        "return": "spark.components.Label",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The skin part that defines the appearance of the title text in the container.",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.skins.spark.PanelSkin"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "controlBarContent",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The set of components to include in the control bar area of the Panel container. The location and appearance of the control bar area of the Panel container is determined by the spark.skins.spark.PanelSkin class. By default, the PanelSkin class defines the control bar area to appear at the bottom of the content area of the Panel container with a grey background. Create a custom skin to change the default appearance of the control bar.",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "see",
               "values": ["spark.skins.spark.PanelSkin"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "spark.layouts.supportClasses.LayoutBase",
        "qname": "controlBarLayout",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Defines the layout of the control bar area of the container.",
        "tags": [
        {  "tagName": "default",
               "values": ["HorizontalLayout"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "controlBarVisible",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If <code>true</code>, the control bar is visible. The flag has no affect if there is no value set for the <code>controlBarContent</code> property.  <p><b>Note:</b> The Panel container does not monitor the <code>controlBarGroup</code> property. If other code makes it invisible, the Panel container might not update correctly.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "title",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Title or caption displayed in the title bar.",
        "tags": [
        {  "tagName": "default",
               "values": [""""]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "paddingLeft",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["mx.core.UIComponent", "String", "mx.containers.beads.models.PanelModel", "spark.components.beads.SkinnableContainerView"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "paddingRight",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["mx.core.UIComponent", "String", "mx.containers.beads.models.PanelModel", "spark.components.beads.SkinnableContainerView"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "paddingTop",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["mx.core.UIComponent", "String", "mx.containers.beads.models.PanelModel", "spark.components.beads.SkinnableContainerView"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "paddingBottom",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["mx.core.UIComponent", "String", "mx.containers.beads.models.PanelModel", "spark.components.beads.SkinnableContainerView"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "percentWidth",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Specifies the width of a component as a percentage of its parent's size. Allowed values are 0-100. The default value is NaN. Setting the <code>width</code> or <code>explicitWidth</code> properties resets this property to NaN.  <p>This property returns a numeric value only if the property was previously set; it does not reflect the exact size of the component in percent.</p>  <p>This property is always set to NaN for the UITextField control.</p>  <p>When used with Spark layouts, this property is used to calculate the width of the component's bounds after scaling and rotation. For example if the component is rotated at 90 degrees, then specifying <code>percentWidth</code> will affect the component's height.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3", "Flex 3", "Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0", "3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "explicitWidth",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "The explicitly set width (as opposed to measured width or percentage width).",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.2", "AIR 2.6", "Flash 10.2", "AIR 2.6", "Flash 10.2", "AIR 2.6"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.0", "Royale 0.0", "Royale 0.0"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0", "3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "percentHeight",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Specifies the height of a component as a percentage of its parent's size. Allowed values are 0-100. The default value is NaN. Setting the <code>height</code> or <code>explicitHeight</code> properties resets this property to NaN.  <p>This property returns a numeric value only if the property was previously set; it does not reflect the exact size of the component in percent.</p>  <p>This property is always set to NaN for the UITextField control.</p>  <p>When used with Spark layouts, this property is used to calculate the height of the component's bounds after scaling and rotation. For example if the component is rotated at 90 degrees, then specifying <code>percentHeight</code> will affect the component's width.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3", "Flex 3", "Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0", "3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "explicitHeight",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "The explicitly set width (as opposed to measured width or percentage width).",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.2", "AIR 2.6", "Flash 10.2", "AIR 2.6", "Flash 10.2", "AIR 2.6"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.0", "Royale 0.0", "Royale 0.0"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0", "3.0"]}  ]}]
  }
