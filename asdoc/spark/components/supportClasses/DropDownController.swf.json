{ "type": "class",
  "qname": "spark.components.supportClasses.DropDownController",
  "baseClassname": "org.apache.royale.events.EventDispatcher"
  ,
    "description": "The DropDownController class handles the mouse, keyboard, and focus interactions for an anchor button and its associated drop down. This class is used by the drop-down components, such as DropDownList, to handle the opening and closing of the drop down due to user interactions.",
  "tags": [
  {  "tagName": "see",
         "values": ["spark.components.DropDownList"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.components.supportClasses.DropDownController",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "spark.components.supportClasses.ButtonBase",
        "qname": "openButton",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A reference to the <code>openButton</code> skin part of the drop-down component.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.managers.ISystemManager",
        "qname": "systemManager",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A reference to the <code>SystemManager</code> used for mouse tracking.  if none is specified, the controller will use the systemManager associated with the openButton.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "hitAreaAdditions",
        "return": "Vector.<mx.core.UIComponent>",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A list of display objects to consider part of the hit area of the drop down.  Mouse clicks within any component listed as an inclusion will not automatically close the drop down.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.core.UIComponent",
        "qname": "dropDown",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": [""]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "isOpen",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Contains <code>true</code> if the drop down is open.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "closeOnResize",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "When <code>true</code>, resizing the system manager closes the drop down. For mobile applications, you can set this property to <code>false</code> so that the drop down stays open when the page orientation changes.",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["AIR 3"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.6"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "rollOverOpenDelay",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies the delay, in milliseconds, to wait for opening the drop down when the anchor button is rolled over. If set to <code>NaN</code>, then the drop down opens on a click, not a rollover.",
        "tags": [
        {  "tagName": "default",
               "values": ["NaN"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "openDropDown",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Open the drop down and dispatch a <code>DropdownEvent.OPEN</code> event.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "closeDropDown",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Close the drop down and dispatch a <code>DropDownEvent.CLOSE</code> event.  data item.",
        "tags": [
        {  "tagName": "param",
               "values": ["commit If <code>true</code>, commit the selected"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "commit", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "processFocusOut",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Close the drop down if it is no longer in focus.",
        "tags": [
        {  "tagName": "param",
               "values": ["event The event object for the <code>FOCUS_OUT</code> event."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.FocusEvent"}]}
      ,
      { "type": "method",
        "qname": "processKeyDown",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Handles the keyboard user interactions.   recognized and handled.",
        "tags": [
        {  "tagName": "param",
               "values": ["event The event object from the keyboard event."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "return",
               "values": ["Returns <code>true</code> if the <code>keyCode</code> was"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "event", "type": "mx.events.KeyboardEvent"}]}
      ]
  }
