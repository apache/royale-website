{ "type": "class",
  "qname": "spark.components.supportClasses.ButtonBarBase",
  "baseClassname": "spark.components.supportClasses.ListBase"
  ,
    "description": "The ButtonBarBase class defines the common behavior for the ButtonBar, TabBar and similar subclasses. This class does not add any new API however it refines selection, keyboard focus and keyboard navigation behavior for the control's ItemRenderer elements. This base class is not intended to be instantiated directly.  <p>Clicking on an ItemRenderer selects it by setting the <code>selectedIndex</code> and the <code>caretIndex</code> properties.  If <code>requireSelection</code> is <code>false</code>, then clicking again deselects it.  If the data provider is an <code>ISelectableList</code> object, then its <code>selectedIndex</code> is set as well.</p>  <p>Arrow key events are handled by adjusting the <code>caretIndex</code>. If <code>arrowKeysWrapFocus</code> is <code>true</code>, then the <code>caretIndex</code> wraps. Pressing the Space key selects the ItemRenderer at the <code>caretIndex</code>.</p>  <p>The <code>showsCaret</code> property of the ItemRenderer at <code>caretIndex</code> is set to <code>true</code> when the ButtonBarBase object has focus and the <code>caretIndex</code> was reached as a consequence of a keyboard gesture. If the <code>caretIndex</code> was set as a side effect of responding to a mouse click, then <code>showsCaret</code> is not set.</p>  <p>The <code>allowDeselection</code> property of <code>ButtonBarButton</code> ItemRenderers is set to <code>!requireSelection</code>.</p>   <p>The <code>&lt;s:ButtonBarBase&gt;</code> tag inherits all of the tag attributes of its superclass and adds no new tag attributes:</p>  <pre>\\n &lt;s:ButtonBarBase/&gt;\\n </pre>",
  "tags": [
  {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.components.supportClasses.ButtonBarBase",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.  <p>Initializes tab processing: tabbing to this component will give it the focus, but not clicking on it with the mouse.  Tabbing to the children is disabled.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "iconField",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The name of the field in the data provider items which serves as the icon to display.  The <code>iconFunction</code> property overrides this property.",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Function",
        "qname": "iconFunction",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A user-supplied function to run on each item to determine its icon. The <code>iconFunction</code> property overrides the <code>iconField</code> property.  <p>You can supply an <code>iconFunction</code> that finds the appropriate fields and returns a displayable icon. </p>  <p>The icon function takes a single argument which is the item in the data provider and returns a valid BitmapImage source.</p> <pre>\\n myIconFunction(item:Object):Object</pre>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "requireSelection",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "If <code>true</code>, a data item must always be selected in the control. If the value is <code>true</code>, the <code>selectedIndex</code> property is always set to a value between 0 and (<code>dataProvider.length</code> - 1).  <p>The default value is <code>false</code> for most subclasses, except TabBar. In that case, the default is <code>true</code>.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false", "false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5", "Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4", "Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0"]}  ]},
      { "type": "method",
        "qname": "getButtonIndices",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Gets the index for several of a ButtonBar's Buttons, referencing them by the ButtonBarbutton's <code>label</code>.  <p>The method takes an array of ButtonBarButtons label and an optional field name.</p> <pre>myButtonBar.getButtonIndices([&quot;My Button Label1&quot;, &quot;My Label2&quot;])</pre>",
        "tags": [
        {  "tagName": "param",
               "values": ["labelValues Are the ButtonBarButton labels to find.", "fieldName Field used for comparing the label (optional)"]},
            {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Array",
          "params": [{ "name": "labelValues", "type": "Array"},
        { "name": "fieldName", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "setButtonEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Allows changing the <code>enabled</code> property of a the child ButtonBarbutton's. It identifies the button given its label field (default) or an different optional field name may be passed.  <p>The method takes a single ButtonBarButton label, a new <code>enabled</code> property value, and an optional field name to use as the comparison field.</p> <pre>\\n myButtonBar.setButtonEnabled(&quot;My Button Label&quot;, false)</pre>",
        "tags": [
        {  "tagName": "param",
               "values": ["labelValue Is the ButtonBarButton label.", "enabledValue The buttons new enabled value.", "fieldName Field used to compare the label value against."]},
            {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "labelValue", "type": "String"},
        { "name": "enabledValue", "type": "Boolean"},
        { "name": "fieldName", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "setButtonsEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Allows changing the <code>enabled</code> property of several child ButtonBarbutton's. It identifies the buttons given their label fields (default) or an different optional field name may be passed.  <p>The method takes an array of ButtonBarButton labels, a new <code>enabled</code> property value, and an optional field name to use as the comparison field.</p> <pre>\\n myButtonBar.setButtonsEnabled([&quot;My Button Label1&quot;, &quot;My Label2&quot;], false)</pre>",
        "tags": [
        {  "tagName": "param",
               "values": ["labelValues Is an array of ButtonBarButton labels.", "enabledValue The buttons new enabled value.", "fieldName Field used to compare the label value against."]},
            {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "labelValues", "type": "Array"},
        { "name": "enabledValue", "type": "Boolean"},
        { "name": "fieldName", "type": "String"}]}
      ]
  ,
  "events": [
  ]
  }
