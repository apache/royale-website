{ "type": "class",
  "qname": "spark.components.supportClasses.SkinnableComponent",
  "baseClassname": "mx.core.UIComponent"
  ,
    "description": "The SkinnableComponent class defines the base class for skinnable components. The skins used by a SkinnableComponent class are typically child classes of the Skin class.  <p>Associate a skin class with a component class by setting the <code>skinClass</code> style property of the component class. You can set the <code>skinClass</code> property in CSS, as the following example shows:</p>  <pre>MyComponent\\n {\\n skinClass: ClassReference(&quot;my.skins.MyComponentSkin&quot;)\\n }</pre>  <p>The following example sets the <code>skinClass</code> property in MXML:</p>  <pre>\\n &lt;MyComponent skinClass=&quot;my.skins.MyComponentSkin&quot;/&gt;</pre>",
  "tags": [
  {  "tagName": "see",
         "values": ["spark.components.supportClasses.Skin"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.components.supportClasses.SkinnableComponent",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "uint",
        "qname": "chromeColor",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "selectable",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag indicating whether the content is selectable.  On a Desktop, a user can select content with the mouse or with the keyboard when the control has keyboard focus.  On a touch interaction device, a user can select text with their fingers once they've entered into selection mode for the text component.  <p><b>For the Spark theme, see spark.components.RichEditableText.selectable</b></p>  <p><b>For the Mobile theme, see spark.components.supportClasses.StyleableStageText.selectable</b></p>",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.components.RichEditableText#selectable", "spark.components.supportClasses.StyleableStageText#selectable"]},
            {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Class",
        "qname": "skinClass",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies whether the UIComponent object receives <code>doubleClick</code> events. The default value is <code>false</code>, which means that the UIComponent object does not receive <code>doubleClick</code> events.  <p>The <code>mouseEnabled</code> property must also be set to <code>true</code>, its default value, for the object to receive <code>doubleClick</code> events.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "enabled",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1"]},
            {  "tagName": "copy",
               "values": ["mx.core.IUIComponent#enabled", "mx.core.IUIComponent#enabled"]},
            {  "tagName": "productversion",
               "values": ["Flex 3", "Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0"]}  ]},
      { "type": "method",
        "qname": "invalidateSkinState",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Marks the component so that the new state of the skin is set during a later screen update.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "mx.core.UIComponent",
        "qname": "skin",
        "namespace": "public",
        "bindable": ["skinChanged"],
        "details": [],
        "deprecated": {},
          "description": "The instance of the skin class for this component instance. This is a read-only property that gets set automatically when Flex calls the <code>attachSkin()</code> method.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "attachSkin",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Create the skin for the component. You do not call this method directly. Flex calls it automatically when it calls <code>createChildren()</code> or the <code>UIComponent.commitProperties()</code> method. Typically, a subclass of SkinnableComponent does not override this method.  <p>This method instantiates the skin for the component, adds the skin as a child of the component, and resolves all part associations for the skin</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "Object",
        "qname": "skinParts",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Contains a flat list of all the skin parts. This includes inherited skin parts. It is best to use a for...in to loop through the skin parts. The property name will be the name of the skin part and it's value will be a boolean specifying if it is required or not.  The actual return value of this method will be generated by the compiler and may not be null.",
        "tags": [
        {  "tagName": "private",
               "values": [""]}  ]},
      { "type": "method",
        "qname": "findSkinParts",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Find the skin parts in the skin class and assign them to the properties of the component. You do not call this method directly. Flex calls it automatically when it calls the <code>attachSkin()</code> method. Typically, a subclass of SkinnableComponent does not override this method.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "partAdded",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Called when a skin part is added. You do not call this method directly. For static parts, Flex calls it automatically when it calls the <code>attachSkin()</code> method. For dynamic parts, Flex calls it automatically when it calls the <code>createDynamicPartInstance()</code> method.  <p>Override this function to attach behavior to the part. If you want to override behavior on a skin part that is inherited from a base class, do not call the <code>super.partAdded()</code> method. Otherwise, you should always call the <code>super.partAdded()</code> method.</p>",
        "tags": [
        {  "tagName": "param",
               "values": ["partname The name of the part.", "instance The instance of the part."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "partName", "type": "String"},
        { "name": "instance", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "partRemoved",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "return": "void",
          "params": [{ "name": "partName", "type": "String"},
        { "name": "instance", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "getCurrentSkinState",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "return": "String",
          "params": []}
      ]
  }
