{ "type": "class",
  "qname": "spark.components.NumericStepper",
  "baseClassname": "spark.components.supportClasses.Range"
  ,
    "description": "The NumericStepper control lets you select a number from an ordered set. The NumericStepper provides the same functionality as the Spinner component, but adds a TextInput control so that you can directly edit the value of the component, rather than modifying it by using the control's arrow buttons.  <p>The NumericStepper control consists of a single-line input text field and a pair of arrow buttons for stepping through the possible values. The Up Arrow and Down Arrow keys and the mouse wheel also cycle through the values. An input value is committed when the user presses the Enter key, removes focus from the component, or steps the NumericStepper by pressing an arrow button or by calling the <code>changeValueByStep()</code> method.</p>  <p>To use this component in a list-based component, such as a List or DataGrid, create an item renderer. For information about creating an item renderer, see <a href=&quot;http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html&quot;> Custom Spark item renderers</a>. </p>  <p>The NumericStepper control has the following default characteristics:</p> <table class=&quot;innertable&quot;> <tr> <th>Characteristic</th> <th>Description</th> </tr> <tr> <td>Default size</td> <td>53 pixels wide by 23 pixels high</td> </tr> <tr> <td>Minimum size</td> <td>40 pixels wide and 40 pixels high</td> </tr> <tr> <td>Maximum size</td> <td>10000 pixels wide and 10000 pixels high</td> </tr> <tr> <td>Default skin classes</td> <td>spark.skins.spark.NumericStepperSkin <p>spark.skins.spark.NumericStepperTextInputSkin</p></td> </tr> </table>   <p>The <code>&lt;s:NumericStepper&gt;</code> tag inherits all of the tag attributes of its superclass and adds the following tag attributes:</p>  <pre>\\n &lt;s:NumericStepper\\n \\n <strong>Properties</strong>\\n imeMode=&quot;null&quot;\\n maxChars=&quot;0&quot;\\n maximum=&quot;10&quot;\\n valueFormatFunction=&quot;&quot;\\n valueParseFunction=&quot;&quot;\\n \\n <strong>Styles</strong>\\n \\n alignmentBaseline=&quot;USE_DOMINANT_BASELINE&quot;\\n baselineShift=&quot;0.0&quot;\\n blockProgression=&quot;TB&quot;\\n borderAlpha=&quot;0.5&quot;\\n borderColor=&quot;0x000000&quot;\\n borderVisible=&quot;true&quot;\\n breakOpportunity=&quot;AUTO&quot;\\n cffHinting=&quot;HORIZONTAL_STEM&quot;\\n color=&quot;0&quot;\\n contentBackgroundAlpha=&quot;1.0&quot;\\n contentBackgroundColor=&quot;0xFFFFFF&quot;\\n clearFloats=&quot;none&quot;\\n digitCase=&quot;DEFAULT&quot;\\n digitWidth=&quot;DEFAULT&quot;\\n direction=&quot;LTR&quot;\\n dominantBaseline=&quot;AUTO&quot;\\n firstBaselineOffset=&quot;AUTO&quot;\\n focusedTextSelectionColor=&quot;&quot;\\n fontFamily=&quot;Arial&quot;\\n fontLookup=&quot;DEVICE&quot;\\n fontSize=&quot;12&quot;\\n fontStyle=&quot;NORMAL&quot;\\n fontWeight=&quot;NORMAL&quot;\\n inactiveTextSelection=&quot;&quot;\\n justificationRule=&quot;AUTO&quot;\\n justificationStyle=&quot;AUTO&quot;\\n kerning=&quot;AUTO&quot;\\n leadingModel=&quot;AUTO&quot;\\n ligatureLevel=&quot;COMMON&quot;\\n lineHeight=&quot;120%&quot;\\n lineThrough=&quot;false&quot;\\n listAutoPadding=&quot;40&quot;\\n listStylePosition=&quot;outside&quot;\\n listStyleType=&quot;disc&quot;\\n locale=&quot;en&quot;\\n paragraphEndIndent=&quot;0&quot;\\n paragraphSpaceAfter=&quot;0&quot;\\n paragraphSpaceBefore=&quot;0&quot;\\n paragraphStartIndent=&quot;0&quot;\\n renderingMode=&quot;CFF&quot;\\n tabStops=&quot;null&quot;\\n textAlign=&quot;START&quot;\\n textAlignLast=&quot;START&quot;\\n textAlpha=&quot;1&quot;\\n textDecoration=&quot;NONE&quot;\\n textIndent=&quot;0&quot;\\n textJustify=&quot;INTER_WORD&quot;\\n textRotation=&quot;AUTO&quot;\\n trackingLeft=&quot;0&quot;\\n trackingRight=&quot;0&quot;\\n typographicCase=&quot;DEFAULT&quot;\\n unfocusedTextSelectionColor=&quot;&quot;\\n whiteSpaceCollapse=&quot;COLLAPSE&quot;\\n wordSpacing=&quot;100%,50%,150%&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/NumericStepperExample.mxml"]},
      {  "tagName": "see",
         "values": ["spark.components.Spinner", "spark.skins.spark.NumericStepperSkin", "spark.skins.spark.NumericStepperTextInputSkin"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.components.NumericStepper",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "spark.components.TextInput",
        "qname": "textDisplay",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "maximum",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Number which represents the maximum value possible for <code>value</code>. If the values for either <code>minimum</code> or <code>value</code> are greater than <code>maximum</code>, they will be changed to reflect the new <code>maximum</code>",
        "tags": [
        {  "tagName": "default",
               "values": ["10"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "stepSize",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "The amount that the <code>value</code> property changes when the <code>changeValueByStep()</code> method is called. It must be a multiple of <code>snapInterval</code>, unless <code>snapInterval</code> is 0. If <code>stepSize</code> is not a multiple, it is rounded to the nearest multiple that is greater than or equal to <code>snapInterval</code>.",
        "tags": [
        {  "tagName": "default",
               "values": ["1", "1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5", "Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4", "Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "maxChars",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The maximum number of characters that can be entered in the field. A value of 0 means that any number of characters can be entered.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Function",
        "qname": "valueFormatFunction",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Callback function that formats the value displayed in the skin's <code>textDisplay</code> property. The function takes a single Number as an argument and returns a formatted String.  <p>The function has the following signature:</p> <pre>\\n funcName(value:Number):String\\n </pre>",
        "tags": [
        {  "tagName": "default",
               "values": ["undefined"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  ,
  "events": [
  ]
  }
