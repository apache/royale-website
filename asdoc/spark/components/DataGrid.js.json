{ "type": "class",
  "qname": "spark.components.DataGrid",
  "baseClassname": "spark.components.supportClasses.SkinnableContainerBase"
  ,
    "description": "The DataGrid displays a row of column headings above a scrollable grid. The grid is arranged as a collection of individual cells arranged in rows and columns. The DataGrid control is designed to support smooth scrolling through large numbers of rows and columns.  <p>The Spark DataGrid control is implemented as a skinnable wrapper around the Spark Grid control. The Grid control defines the columns of the data grid, and much of the functionality of the DataGrid control itself.</p>  <p>The DataGrid skin is responsible for laying out the grid, column header, and scroller. The skin also configures the graphic elements used to render visual elements used as indicators, separators, and backgrounds. The DataGrid skin also defines a default item renderer, used to display the contents of each cell. Please see the documentation for the renderer class for the list of supported styles.</p>  <p>Transitions in DataGrid item renderers aren't supported. The GridItemRenderer class has disabled its <code>transitions</code> property so setting it will have no effect.</p>  attributes of its superclass and adds the following tag attributes:</p>  <pre>\\n &lt;s:DataGrid\\n <strong>Properties</strong>\\n columns=&quot;null&quot;\\n dataProvider=&quot;null&quot;\\n dataTipField=&quot;null&quot;\\n dataTipFunction=&quot;null&quot;\\n doubleClickMode=&quot;row&quot;\\n editable=&quot;false&quot;\\n editorColumnIndex=&quot;-1&quot;\\n editorRowIndex=&quot;-1&quot;\\n imeMode=&quot;null&quot;\\n itemEditor=&quot;null&quot;\\n itemRenderer=&quot;<i>DefaultGridItemRenderer</i>&quot;\\n preserveSelection=&quot;true&quot;\\n requestedColumnCount=&quot;-1&quot;\\n requestedMaxRowCount=&quot;-1&quot;\\n requestedMinColumnCount=&quot;-1&quot;\\n requestedMinRowCount=&quot;-1&quot;\\n requestedRowCount=&quot;-1&quot;\\n requireSelection=&quot;false&quot;\\n resizeableColumns=&quot;true&quot;\\n rowHeight=&quot;<i>Calculated default</i>&quot;\\n selectedCell=&quot;null&quot;\\n selectedCells=&quot;<i>empty Vector.&lt;CellPosition&gt</i>&quot;\\n selectedIndex=&quot;null&quot;\\n selectedIndices=&quot;<i>empty Vector.&lt;CellPosition&gt</i>&quot;\\n selectedItem=&quot;null&quot;\\n selectedItems=&quot;<i>empty Vector.&lt;Object&gt</i>&quot;\\n selectionMode=&quot;singleRow&quot;\\n showDataTips=&quot;false&quot;\\n sortableColumns=&quot;true&quot;\\n typicalItem=&quot;null&quot;\\n variableRowHeight=&quot;false&quot;\\n \\n <strong>Styles</strong>\\n alignmentBaseline=&quot;useDominantBaseline&quot;\\n baselineShift=&quot;0.0&quot;\\n cffHinting=&quot;horizontalStem&quot;\\n color=&quot;0&quot;\\n defaultGridItemEditor=&quot;null&quot;\\n digitCase=&quot;default&quot;\\n digitWidth=&quot;default&quot;\\n direction=&quot;ltr&quot;\\n dominantBaseline=&quot;auto&quot;\\n fontFamily=&quot;Arial&quot;\\n fontLookup=&quot;device&quot;\\n fontSize=&quot;12&quot;\\n fontStyle=&quot;normal&quot;\\n fontWeight=&quot;normal&quot;\\n justificationRule=&quot;auto&quot;\\n justificationStyle=&quot;auto&quot;\\n kerning=&quot;auto&quot;\\n ligatureLevel=&quot;common&quot;\\n lineHeight=&quot;120%&quot;\\n lineThrough=&quot;false&quot;\\n locale=&quot;en&quot;\\n renderingMode=&quot;cff&quot;\\n stretchCursor=&quot;<i>cursorStretch symbol from Assets.swf</i>&quot;\\n textAlign=&quot;start&quot;\\n textAlignLast=&quot;start&quot;\\n textAlpha=&quot;1&quot;\\n textDecoration=&quot;none&quot;\\n textJustify=&quot;interWord&quot;\\n trackingLeft=&quot;0&quot;\\n trackingRight=&quot;0&quot;\\n typographicCase=&quot;default&quot;\\n verticalScrollPolicy=&quot;auto&quot;\\n \\n <strong>Styles for the Spark Theme</strong>\\n alternatingRowColors=&quot;undefined&quot;\\n borderAlpha=&quot;1.0&quot;\\n borderColor=&quot;0x696969&quot;\\n borderVisible=&quot;true&quot;\\n caretColor=&quot;0x0167FF&quot;\\n contentBackgroundAlpha=&quot;1.0&quot;\\n contentBackgroundColor=&quot;0xFFFFFF&quot;\\n rollOverColor=&quot;0xCEDBEF&quot;\\n selectionColor=&quot;0xA8C6EE&quot;\\n symbolColor=&quot;0x000000&quot;\\n \\n <strong>Styles for the Mobile Theme</strong>\\n leading=&quot;0&quot;\\n letterSpacing=&quot;0&quot;\\n selectionColor=&quot;0xE0E0E0&quot;\\n symbolColor=&quot;0x000000&quot;\\n \\n <strong>Events</strong>\\n caretChange=&quot;<i>No default</i>&quot;\\n gridClick=&quot;<i>No default</i>&quot;\\n gridDoubleClick=&quot;<i>No default</i>&quot;\\n gridItemEditorSessionCancel=&quot;<i>No default</i>&quot;\\n gridItemEditorSessionSave=&quot;<i>No default</i>&quot;\\n gridItemEditorSessionStart=&quot;<i>No default</i>&quot;\\n gridItemEditorSessionStarting=&quot;<i>No default</i>&quot;\\n gridMouseDown=&quot;<i>No default</i>&quot;\\n gridMouseDrag=&quot;<i>No default</i>&quot;\\n gridMouseUp=&quot;<i>No default</i>&quot;\\n gridMouseRollOut=&quot;<i>No default</i>&quot;\\n gridMouseRollOver=&quot;<i>No default</i>&quot;\\n selectionChange=&quot;<i>No default</i>&quot;\\n selectionChanging=&quot;<i>No default</i>&quot;\\n sortChange=&quot;<i>No default</i>&quot;\\n sortChanging=&quot;<i>No default</i>&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/DataGridSimpleExample.mxml", "examples/DataGridMasterDetailExample.mxml", "examples/DataGridTypicalItemExample.mxml", "examples/DataGridRowHeightExample.mxml", "examples/DataGridSelectionExample.mxml", "examples/DataGridInvalidateCellExample.mxml", "examples/DataGridLockedRowsAndColumnsExample.mxml"]},
      {  "tagName": "see",
         "values": ["spark.components.Grid", "spark.components.gridClasses.GridColumn", "spark.skins.spark.DataGridSkin", "spark.skins.spark.DefaultGridItemRenderer"]},
      {  "tagName": "mxml",
         "values": ["<p>The <code>&lt;s:DataGrid&gt;</code> tag inherits all of the tag"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 2.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4.5"]},
      {  "tagName": "langversion",
         "values": ["3.0"]},
      {  "tagName": "royalesuppresspublicvarwarning",
         "values": []}  ],
  "members": [
  { "type": "method",
        "qname": "spark.components.DataGrid",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "field",
        "qname": "alternatingRowColorsBackground",
        "return": "mx.core.IFactory",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IVisualElement class used to render the <code>alternatingRowColors</code> style.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "caretIndicator",
        "return": "mx.core.IFactory",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IVisualElement class used to render the grid's caret indicator.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "columnSeparator",
        "return": "mx.core.IFactory",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IVisualElement class used to render the vertical separator between columns.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "dropIndicator",
        "return": "mx.core.IFactory",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IVisualElement class that defines the appearance of the drop indicator. The drop indicator is resized and positioned by the layout to indicate in between which grid rows the drop will insert the drag source item.  <p>This is a dynamic skin part: it's created as needed and then destroyed.</p>  <p>The DataGrid will set the dropIndicator's height to its preferred height bracketed by its minHeight and maxHeight values. Its width will be unconditionally set to the grid's visible width.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 11", "AIR 3.0"]},
            {  "tagName": "productversion",
               "values": ["Flex 5.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "editorIndicator",
        "return": "mx.core.IFactory",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IVisualElement class used to render a background behind item renderers that are being edited. Item renderers may only be edited when the data grid and the column are both editable and the column sets <code>rendererIsEditable</code> to <code>true</code>.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "grid",
        "return": "spark.components.Grid",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A reference to the Grid control that displays row and columns.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "hoverIndicator",
        "return": "mx.core.IFactory",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IVisualElement class used to provide hover feedback.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "lockedColumnsSeparator",
        "return": "mx.core.IFactory",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IVisualElement class used to render the vertical separator between locked and unlocked columns.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 5.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "lockedRowsSeparator",
        "return": "mx.core.IFactory",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IVisualElement class used to render the horizontal separator between locked and unlocked rows.",
        "tags": [
          ]},
      { "type": "field",
        "qname": "rowBackground",
        "return": "mx.core.IFactory",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IVisualElement class used to render the background of each row.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "rowSeparator",
        "return": "mx.core.IFactory",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IVisualElement class used to render the horizontal separator between header rows.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "scroller",
        "return": "spark.components.Scroller",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A reference to the Scroller control in the skin class that adds scroll bars to the DataGrid control.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "selectionIndicator",
        "return": "mx.core.IFactory",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IVisualElement class used to render selected rows or cells.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.collections.IList",
        "qname": "columns",
        "namespace": "public",
        "bindable": ["columnsChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#columns"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "columnsLength",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the value of <code>columns.length</code> if the columns IList was specified, otherwise 0.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5*"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.collections.IList",
        "qname": "dataProvider",
        "namespace": "public",
        "bindable": ["dataProviderChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#dataProvider"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "dataProviderLength",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the value of <code>dataProvider.length</code> if the dataProvider IList was specified, otherwise 0.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "dataTipField",
        "namespace": "public",
        "bindable": ["dataTipFieldChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#dataTipField"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Function",
        "qname": "dataTipFunction",
        "namespace": "public",
        "bindable": ["dataTipFunctionChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#dataTipFunction"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "doubleClickMode",
        "namespace": "public",
        "bindable": ["doubleClickModeChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["GridDoubleClickMode.ROW"]},
            {  "tagName": "see",
               "values": ["spark.components.gridClasses.GridDoubleClickMode"]},
            {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#doubleClickMode"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "draggableColumns",
        "namespace": "public",
        "bindable": ["draggableColumnsChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 5.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "editable",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag which enables editing the data items in the DataGrid. If <code>true</code> and <code>selectionMode</code> is not equal to &quot;none&quot;, clicking on a cell opens an item editor.  <p>You can disable editing for individual columns of the DataGrid control using the GridColumn <code>editable</code> property. By default, all visible columns are editable.</p>  <p>You can enable or disable editing per cell (rather than per column) by handling the <code>startItemEditorSession</code> event. In the event handler, add the necessary logic to determine if the cell should be editable.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "see",
               "values": ["#selectionMode", "spark.components.gridClasses.GridColumn#editable"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "editorActivationMouseEvent",
        "namespace": "public",
        "bindable": ["editorActivationMouseEventChanged"],
        "details": [],
        "deprecated": {},
          "description": "The type of mouse event that starts an editor session. Must be one of values in <code>GridItemEditorMouseEvent</code>. This value provides a default value for each column of a DataGrid. A different value can be specified on a grid column to override the default.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"singleClickOnSelectedCell\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 11", "AIR 3.0"]},
            {  "tagName": "productversion",
               "values": ["Flex 5.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "editorColumnIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The zero-based column index of the cell that is being edited. The value is -1 if no cell is being edited.",
        "tags": [
        {  "tagName": "default",
               "values": ["-1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "editorRowIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The zero-based row index of the cell that is being edited. The value is -1 if no cell is being edited.",
        "tags": [
        {  "tagName": "default",
               "values": ["-1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "enableIME",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether the IME should be enabled when the component receives focus.  If the item editor is open, it sets this property accordingly.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "isFirstRow",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If a <code>grid</code> is not assigned, will always return false;",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#isFirstRow"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "isLastRow",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If a <code>grid</code> is not assigned, will always return false;",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#isLastRow"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "multiColumnSortingEnabled",
        "namespace": "public",
        "bindable": ["multiColumnSortingEnabledChanged"],
        "details": [],
        "deprecated": {},
          "description": "If this property is true and sorting has been enabled, then users can interactively specify multi-column sorts by control-clicking in column headers (Command+Click on OSX). Sorting is enabled for a column if the DataGrid <code>sortable</code> property is true and the column's <code>sortable</code> property is true.   Sorting is enabled for all columns by default, multi-column sorting is not.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "see",
               "values": ["#sortableColumns", "spark.components.gridClasses.GridColumn#sortable"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "spark.components.gridClasses.GridSelection",
        "qname": "gridSelection",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "This object becomes the grid's gridSelection property after the grid skin part has been added.  It should only be referenced by this class when the grid skin part is null.",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "imeMode",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The default value for the GridColumn <code>imeMode</code> property, which specifies the IME (Input Method Editor) mode. The IME enables users to enter text in Chinese, Japanese, and Korean. Flex sets the specified IME mode when the control gets focus, and sets it back to the previous value when the control loses focus.  <p>The flash.system.IMEConversionMode class defines constants for the valid values for this property. You can also specify <code>null</code> to specify no IME.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.system.IMEConversionMode"]},
            {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.core.IFactory",
        "qname": "itemEditor",
        "namespace": "public",
        "bindable": ["itemEditorChanged"],
        "details": [],
        "deprecated": {},
          "description": "The default value for the GridColumn <code>itemEditor</code> property, which specifies the IGridItemEditor class used to create item editor instances.",
        "tags": [
        {  "tagName": "default",
               "values": ["null."]},
            {  "tagName": "see",
               "values": ["spark.components.gridClasses.GridColumn#dataField", "spark.components.gridClasses.IGridItemEditor"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "spark.components.gridClasses.IGridItemEditor",
        "qname": "itemEditorInstance",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A reference to the currently active instance of the item editor, if it exists.  <p>To access the item editor instance and the new item value when an item is being edited, you use the <code>itemEditorInstance</code> property. The <code>itemEditorInstance</code> property is not valid until the <code>itemEditorSessionStart</code> event is dispatched.</p>  <p>The <code>DataGridColumn.itemEditor</code> property defines the class of the item editor and, therefore, the data type of the item editor instance.</p>  <p>Do not set this property in MXML.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.core.IFactory",
        "qname": "itemRenderer",
        "namespace": "public",
        "bindable": ["itemRendererChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["DefaultGridItemRenderer"]},
            {  "tagName": "see",
               "values": ["spark.components.gridClasses.GridItemRenderer", "spark.skins.spark.DefaultGridItemRenderer"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#itemRenderer"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "lockedColumnCount",
        "namespace": "public",
        "bindable": ["lockedColumnCountChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#lockedColumnCount"]},
            {  "tagName": "productversion",
               "values": ["Flex 5.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "lockedRowCount",
        "namespace": "public",
        "bindable": ["lockedRowCountChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#lockedRowCount"]},
            {  "tagName": "productversion",
               "values": ["Flex 5.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "preserveSelection",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#preserveSelection"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "requireSelection",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#requireSelection"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "requestedRowCount",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["-1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#requestedRowCount"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "requestedColumnCount",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["-1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#requestedColumnCount"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "requestedMaxRowCount",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["10"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#requestedMaxRowCount"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "requestedMinRowCount",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["-1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#requestedMinRowCount"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "requestedMinColumnCount",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["-1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#requestedMinColumnCount"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "resizableColumns",
        "namespace": "public",
        "bindable": ["resizableColumnsChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#resizableColumns"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "rowHeight",
        "namespace": "public",
        "bindable": ["rowHeightChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#rowHeight"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "selectionMode",
        "namespace": "public",
        "bindable": ["selectionModeChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["GridSelectionMode.SINGLE_ROW"]},
            {  "tagName": "see",
               "values": ["spark.components.gridClasses.GridSelectionMode"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectionMode"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "showDataTips",
        "namespace": "public",
        "bindable": ["showDataTipsChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#showDataTips"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "sortableColumns",
        "namespace": "public",
        "bindable": ["sortableColumnsChanged"],
        "details": [],
        "deprecated": {},
          "description": "Specifies whether the user can interactively sort columns. If <code>true</code>, the user can sort the data provider by the data field of a column by clicking on the column's header. If <code>true</code>, an individual column can set its <code>sortable</code> property to <code>false</code> to prevent the user from sorting by that column.",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "typicalItem",
        "namespace": "public",
        "bindable": ["typicalItemChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#typicalItem"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "invalidateTypicalItem",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#invalidateTypicalItemRenderer()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "variableRowHeight",
        "namespace": "public",
        "bindable": ["variableRowHeightChanged"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#variableRowHeight"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "dragEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether you can drag items out of this control and drop them on other controls. If <code>true</code>, dragging is enabled for the control. If the <code>dropEnabled</code> property is also <code>true</code>, you can drag items and drop them within this control to reorder the items.  <p>Drag and drop is not supported on mobile devices where <code>interactionMode</code> is set to <code>touch</code>.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 11", "AIR 3.0"]},
            {  "tagName": "productversion",
               "values": ["Flex 5.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "dragMoveEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether items can be moved instead of just copied from the control as part of a drag-and-drop operation. If <code>true</code>, and the <code>dragEnabled</code> property is <code>true</code>, items can be moved. Often the data provider cannot or should not have items removed from it, so a MOVE operation should not be allowed during drag-and-drop.  <p>Drag and drop is not supported on mobile devices where <code>interactionMode</code> is set to <code>touch</code>.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 11", "AIR 3.0"]},
            {  "tagName": "productversion",
               "values": ["Flex 5.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "dropEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether dragged items can be dropped onto the control.  <p>If you set this property to <code>true</code>, the control accepts all data formats, and assumes that the dragged data matches the format of the data in the data provider. If you want to explicitly check the data format of the data being dragged, you must handle one or more of the drag events, such as <code>dragEnter</code> and <code>dragOver</code>, and call the DragEvent's <code>preventDefault()</code> method to customize the way the list class accepts dropped data.</p>  <p>When you set <code>dropEnabled</code> to <code>true</code>, Flex automatically calls the <code>showDropFeedback()</code> and <code>hideDropFeedback()</code> methods to display the drop indicator.</p>  <p>Drag and drop is not supported on mobile devices where <code>interactionMode</code> is set to <code>touch</code>.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 11", "AIR 3.0"]},
            {  "tagName": "productversion",
               "values": ["Flex 5.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "tabIndex",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "spark.components.gridClasses.CellPosition",
        "qname": "selectedCell",
        "namespace": "public",
        "bindable": ["selectionChange","valueCommit"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectedCell"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Vector.<spark.components.gridClasses.CellPosition>",
        "qname": "selectedCells",
        "namespace": "public",
        "bindable": ["selectionChange","valueCommit"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectedCells"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "selectedIndex",
        "namespace": "public",
        "bindable": ["selectionChange","valueCommit"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["-1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectedIndex"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Vector.<int>",
        "qname": "selectedIndices",
        "namespace": "public",
        "bindable": ["selectionChange","valueCommit"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectedIndices"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "selectedItem",
        "namespace": "public",
        "bindable": ["selectionChange","valueCommit"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectedItem"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Vector.<Object>",
        "qname": "selectedItems",
        "namespace": "public",
        "bindable": ["selectionChange","valueCommit"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectedItems"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "selectionLength",
        "namespace": "public",
        "bindable": ["selectionChange","valueCommit"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectionLength"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "findRowIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#findRowIndex()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "int",
          "params": [{ "name": "field", "type": "String"},
        { "name": "value", "type": "String"},
        { "name": "startingIndex", "type": "int"},
        { "name": "patternType", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "findRowIndices",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#findRowIndices()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Array",
          "params": [{ "name": "field", "type": "String"},
        { "name": "values", "type": "Array"},
        { "name": "patternType", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "invalidateCell",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#invalidateCell()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "rowIndex", "type": "int"},
        { "name": "columnIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "moveIndexFindRow",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#moveIndexFindRow()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "field", "type": "String"},
        { "name": "value", "type": "String"},
        { "name": "startingIndex", "type": "int"},
        { "name": "patternType", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "moveIndexFirstRow",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#moveIndexFirstRow()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "moveIndexLastRow",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#moveIndexLastRow()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "moveIndexNextRow",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#moveIndexNextRow()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "moveIndexPreviousRow",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 11.1", "AIR 3.4"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#moveIndexPreviousRow()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.10"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "selectAll",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectAll()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": []}
      ,
      { "type": "method",
        "qname": "clearSelection",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#clearSelection()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": []}
      ,
      { "type": "method",
        "qname": "selectionContainsIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectionContainsIndex()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "selectionContainsIndices",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectionContainsIndices()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndices", "type": "Vector.<int>"}]}
      ,
      { "type": "method",
        "qname": "setSelectedIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#setSelectedIndex()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "addSelectedIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#addSelectedIndex()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "removeSelectedIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#removeSelectedIndex()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "selectIndices",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectIndices()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"},
        { "name": "rowCount", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "selectionContainsCell",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectionContainsCell()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"},
        { "name": "columnIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "selectionContainsCellRegion",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectionContainsCellRegion()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"},
        { "name": "columnIndex", "type": "int"},
        { "name": "rowCount", "type": "int"},
        { "name": "columnCount", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "setSelectedCell",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#setSelectedCell()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"},
        { "name": "columnIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "addSelectedCell",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#addSelectedCell()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"},
        { "name": "columnIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "removeSelectedCell",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#removeSelectedCell()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"},
        { "name": "columnIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "selectCellRegion",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#selectCellRegion()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"},
        { "name": "columnIndex", "type": "int"},
        { "name": "rowCount", "type": "uint"},
        { "name": "columnCount", "type": "uint"}]}
      ,
      { "type": "method",
        "qname": "commitInteractiveSelection",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "In response to user input (mouse or keyboard) which changes the selection, this method dispatches the <code>selectionChanging</code> event. If the event is not canceled, it then commits the selection change, and then dispatches the <code>selectionChange</code> event. The caret location is not updated. To detect if the caret has changed, use the <code>caretChanged</code> event.  that specifies the selection that is being committed.  If not null, this is used to generate the <code>selectionChanging</code> event.  cell, the 0-based <code>rowIndex</code> of the selection in the data provider. If <code>selectionEventKind</code> is for multiple cells, the 0-based <code>rowIndex</code> of the origin of the cell region. The default is -1 to indicate this parameter is not being used.  a single cell, the 0-based <code>columnIndex</code> of the selection. If <code>selectionEventKind</code> is for multiple cells, the 0-based <code>columnIndex</code> of the origin of the cell region. The default is -1 to indicate this parameter is not being used.  the number of rows in the cell region.  The default is -1 to indicate this parameter is not being used.  the number  of columns in the cell region.  The default is -1 to indicate this parameter is not being used.  <code>false</code> if the selection was canceled or could not be committed due to an error, such as index out of range or the <code>selectionEventKind</code> is not compatible with the <code>selectionMode</code>.",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.events.GridSelectionEvent#SELECTION_CHANGE", "spark.events.GridSelectionEvent#SELECTION_CHANGING", "spark.events.GridSelectionEventKind"]},
            {  "tagName": "param",
               "values": ["selectionEventKind A constant defined by the GridSelectionEventKind class", "rowIndex If <code>selectionEventKind</code> is for a row or a", "columnIndex If <code>selectionEventKind</code> is for a single row or", "rowCount If <code>selectionEventKind</code> is for a cell region,", "columnCount If <code>selectionEventKind</code> is for a cell region,"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "return",
               "values": ["<code>true</code> if the selection was committed or did not change, or"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "selectionEventKind", "type": "String"},
        { "name": "rowIndex", "type": "int"},
        { "name": "columnIndex", "type": "int"},
        { "name": "rowCount", "type": "int"},
        { "name": "columnCount", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "commitCaretPosition",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Updates the grid's caret position. If the caret position changes, the <code>grid</code> skin part dispatches a <code>caretChange</code> event.   position.  If the selectionMode is row-based, this is -1.",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.events.GridCaretEvent#CARET_CHANGE"]},
            {  "tagName": "param",
               "values": ["newCaretRowIndex The 0-based rowIndex of the new caret position.", "newCaretColumnIndex The 0-based columnIndex of the new caret"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "newCaretRowIndex", "type": "int"},
        { "name": "newCaretColumnIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "createGridSelection",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Creates a grid selection object to use to manage selection. Override this method if you have a custom grid selection that you want to use in place of the default.",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.components.Grid.createGridSelection"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "spark.components.gridClasses.GridSelection",
          "params": []}
      ,
      { "type": "method",
        "qname": "isCellEditable",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns true if a datagrid cell is editable.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"},
        { "name": "columnIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "isDataEditable",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Override to make a datagrid cell editable based on the data item.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "dataItem", "type": "Object"},
        { "name": "dataField", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "startItemEditorSession",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Starts an editor session on a selected cell in the grid. This method by-passes checks of the editable property on the DataGrid and GridColumn that prevent the user interface from starting an editor session.  A <code>startItemEditorSession</code> event is dispatched before an item editor is created. This allows a listener dynamically change the item editor for a specified cell.  The event can also be cancelled by calling the <code>preventDefault()</code> method, to prevent the editor session from being created.    Returns <code>false</code> if the editor session was cancelled or was otherwise unable to be started. Note that an editor session cannot be started in a column that is not visible.",
        "tags": [
        {  "tagName": "param",
               "values": ["rowIndex The zero-based row index of the cell to edit.", "columnIndex The zero-based column index of the cell to edit."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "return",
               "values": ["<code>true</code> if the editor session was started."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "rowIndex", "type": "int"},
        { "name": "columnIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "endItemEditorSession",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Closes the currently active editor and optionally saves the editor's value by calling the item editor's <code>save()</code> method. If the <code>cancel</code> parameter is <code>true</code>, then the editor's <code>cancel()</code> method is called instead.  Otherwise the data in the editor is discarded.  and <code>false</code> if the save was cancelled.",
        "tags": [
        {  "tagName": "param",
               "values": ["cancel If <code>false</code>, the data in the editor is saved."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "return",
               "values": ["<code>true</code> if the editor session was saved,"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "cancel", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "createEditor",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Create the data grid editor. Overriding this function will allow the complete replacement of the data grid editor.",
        "tags": [
          ],
          "return": "spark.components.gridClasses.DataGridEditor",
          "params": []}
      ,
      { "type": "method",
        "qname": "sortByColumns",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Sort the DataGrid by one or more columns, and refresh the display.  <p>If the <code>dataProvider</code> is an ICollectionView, then it's <code>sort</code> property is set to a value based on each column's <code>dataField</code>, <code>sortCompareFunction</code>, and <code>sortDescending</code> flag. Then, the data provider's <code>refresh()</code> method is called. </p>  <p>If the <code>dataProvider</code> is not an ICollectionView, then this method has no effect.</p>  <p>If isInteractive is true then a <code>GridSortEvent.SORT_CHANGING</code> is dispatched before the sort is applied.  Listeners can change modify the event to change the sort or cancel the event to cancel the sort.   If isInteractive is true and the sort is not cancelled, then a <code>GridSortEvent.SORT_CHANGE</code> event is dispatched after the dataProvider's sort has been updated.</p>  <p>If the sort has not be cancelled, the columnHeaderGroup's <code>visibleSortIndicatorIndices</code> is updated.</p>   <code>GridSortEvent.SORT_CHANGE</code> events are dispatched.  column indicies.",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.components.DataGrid#dataProvider", "spark.components.gridClasses.GridColumn#sortCompareFunction", "spark.components.gridClasses.GridColumn#sortDescending", "spark.components.gridClasses.GridColumn#sortField", "spark.components.GridColumnHeaderGroup#visibleSortIndicatorIndices", "spark.events.GridSortEvent"]},
            {  "tagName": "param",
               "values": ["columnIndices The indices of the columns by which to sort the <code>dataProvider</code>.", "isInteractive If true, <code>GridSortEvent.SORT_CHANGING</code> and"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "return",
               "values": ["<code>true</code> if the <code>dataProvider</code> was sorted with the provided"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "columnIndices", "type": "Vector.<int>"},
        { "name": "isInteractive", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "ensureCellIsVisible",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "copy",
               "values": ["spark.components.Grid#ensureCellIsVisible()"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "rowIndex", "type": "int"},
        { "name": "columnIndex", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "createDragIndicator",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Creates an instance of a class that is used to display the visuals of the dragged items during a drag and drop operation. The default <code>DragEvent.DRAG_START</code> handler passes the instance to the <code>DragManager.doDrag()</code> method.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 11", "AIR 3.0"]},
            {  "tagName": "productversion",
               "values": ["Flex 5.0"]},
            {  "tagName": "return",
               "values": ["The IFlexDisplayObject representing the drag indicator."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.core.IFlexDisplayObject",
          "params": []}
      ,
      { "type": "method",
        "qname": "addDragData",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Adds the selected items to the DragSource object as part of a drag-and-drop operation. Override this method to add other data to the drag source.",
        "tags": [
        {  "tagName": "param",
               "values": ["dragSource The DragSource object to which to add the data."]},
            {  "tagName": "playerversion",
               "values": ["Flash 11", "AIR 3.0"]},
            {  "tagName": "productversion",
               "values": ["Flex 5.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "dragSource", "type": "mx.core.DragSource"}]}
      ,
      { "type": "method",
        "qname": "copyItemWithUID",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Makes a deep copy of the object by calling the <code>ObjectUtil.copy()</code> method, and replaces the copy's <code>uid</code> property (if present) with a new value by calling the <code>UIDUtil.createUID()</code> method.  <p>This method is used for a drag and drop copy.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.utils.ObjectUtil", "mx.utils.UIDUtil"]},
            {  "tagName": "param",
               "values": ["item The item to copy."]},
            {  "tagName": "playerversion",
               "values": ["Flash 11", "AIR 3.0"]},
            {  "tagName": "productversion",
               "values": ["Flex 5.0"]},
            {  "tagName": "return",
               "values": ["The copy of the object."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "item", "type": "Object"}]}
      ]
  ,
  "events": [
  { "qname": "caretChange",
        "type": "spark.events.GridCaretEvent"
      ,
          "description": "Dispatched by the <code>grid</code> skin part when the caret position, size, or visibility has changed due to user interaction or being programmatically set.  <p>To handle this event, assign an event handler to the <code>grid</code> skin part of the DataGrid control.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridCaretEvent.CARET_CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "gridMouseDown",
        "type": "spark.events.GridEvent"
      ,
          "description": "Dispatched by the <code>grid</code> skin part when the mouse button is pressed over a grid cell.  <p>To handle this event, assign an event handler to the <code>grid</code> skin part of the DataGrid control.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridEvent.GRID_MOUSE_DOWN"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "gridMouseDrag",
        "type": "spark.events.GridEvent"
      ,
          "description": "Dispatched by the <code>grid</code> skin part after a <code>gridMouseDown</code> event if the mouse moves before the button is released.  <p>To handle this event, assign an event handler to the <code>grid</code> skin part of the DataGrid control.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridEvent.GRID_MOUSE_DRAG"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "gridMouseUp",
        "type": "spark.events.GridEvent"
      ,
          "description": "Dispatched by the <code>grid</code> skin part after a <code>gridMouseDown</code> event when the mouse button is released, even if the mouse is no longer within the grid.  <p>To handle this event, assign an event handler to the <code>grid</code> skin part of the DataGrid control.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridEvent.GRID_MOUSE_UP"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "gridRollOver",
        "type": "spark.events.GridEvent"
      ,
          "description": "Dispatched by the <code>grid</code> skin part when the mouse enters a grid cell.  <p>To handle this event, assign an event handler to the <code>grid</code> skin part of the DataGrid control.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridEvent.GRID_ROLL_OVER"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "gridRollOut",
        "type": "spark.events.GridEvent"
      ,
          "description": "Dispatched by the <code>grid</code> skin part when the mouse leaves a grid cell.  <p>To handle this event, assign an event handler to the <code>grid</code> skin part of the DataGrid control.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridEvent.GRID_ROLL_OUT"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "gridClick",
        "type": "spark.events.GridEvent"
      ,
          "description": "Dispatched by the <code>grid</code> skin part when the mouse is clicked over a cell.  <p>To handle this event, assign an event handler to the <code>grid</code> skin part of the DataGrid control.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridEvent.GRID_CLICK"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "gridDoubleClick",
        "type": "spark.events.GridEvent"
      ,
          "description": "Dispatched by the <code>grid</code> skin part when the mouse is double-clicked over a cell.  <p>To handle this event, assign an event handler to the <code>grid</code> skin part of the DataGrid control.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridEvent.GRID_DOUBLE_CLICK"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "selectionChanging",
        "type": "spark.events.GridSelectionEvent"
      ,
          "description": "Dispatched when the selection is going to change. Calling the <code>preventDefault()</code> method on the event prevents the selection from changing.  <p>This event is dispatched when the user interacts with the control. When you change the selection programmatically, the component does not dispatch the <code>selectionChanging</code> event. </p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridSelectionEvent.SELECTION_CHANGING"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "selectionChange",
        "type": "spark.events.GridSelectionEvent"
      ,
          "description": "Dispatched when the selection has changed.  <p>This event is dispatched when the user interacts with the control. When you change the selection programmatically, the component does not dispatch the <code>selectionChange</code> event. In either case it dispatches the <code>valueCommit</code> event as well.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridSelectionEvent.SELECTION_CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "sortChanging",
        "type": "spark.events.GridSortEvent"
      ,
          "description": "Dispatched before the sort has been applied to the data provider's collection. Typically this is when the user releases the mouse button on a column header to request the control to sort the grid contents based on the contents of the column. Only dispatched if the column is sortable and the data provider supports sorting.  <p>The DataGrid control has a default handler for this event that implements a single-column sort and updates the <code>visibleSortIndices</code> in the grid's <code>columnHeaderGroup</code> with the <code>columnIndices</code>.</p>  <p>Multiple-column sort can be implemented by calling the <code>preventDefault()</code> method to prevent the single column sort and setting the <code>columnIndices</code> and <code>newSortFields</code> parameters of the event to change the default behavior. <code>newSortFields</code> should be set to the desired sort fields. <code>columnIndices</code> should be set to the indices of the columns that should have a visible sort indicator in the column header bar.</p>  <p>This event is dispatched when the user interacts with the control. When you sort the data provider's collection programmatically, the component does not dispatch the <code>sortChanging</code> event. </p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridSortEvent.SORT_CHANGING"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "sortChange",
        "type": "spark.events.GridSortEvent"
      ,
          "description": "Dispatched after the sort has been applied to the data provider's collection. Typically this is after the user releases the mouse button on a column header and the sort has been applied to the data provider's collection.  <p>This event is dispatched when the user interacts with the control. When you sort the data provider's collection programmatically, the component does not dispatch the <code>sortChanging</code> event.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridSortEvent.SORT_CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "gridItemEditorSessionStarting",
        "type": "spark.events.GridItemEditorEvent"
      ,
          "description": "Dispatched when a new item editor session has been requested. A listener can dynamically determine if a cell is editable and cancel the edit (by calling the <code>preventDefault()</code> method) if it is not. A listener may also dynamically change the editor used by assigning a different item editor to a column.  <p>If this event is canceled the item editor will not be created.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.components.DataGrid.itemEditorInstance", "flash.events.Event"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "gridItemEditorSessionStart",
        "type": "spark.events.GridItemEditorEvent"
      ,
          "description": "Dispatched immediately after an item editor has been opened.",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.components.DataGrid.itemEditorInstance"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "gridItemEditorSessionSave",
        "type": "spark.events.GridItemEditorEvent"
      ,
          "description": "Dispatched after the data in item editor has been saved into the data provider and the editor has been closed.",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.components.DataGrid.itemEditorInstance"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "gridItemEditorSessionCancel",
        "type": "spark.events.GridItemEditorEvent"
      ,
          "description": "Dispatched after the item editor has been closed without saving its data.",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.components.DataGrid.itemEditorInstance"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "eventType",
               "values": ["spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.5"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
