{ "type": "class",
  "qname": "spark.components.List",
  "baseClassname": "spark.components.supportClasses.ListBase"
  ,
    "description": "The List control displays a vertical list of items. Its functionality is similar to that of the SELECT form element in HTML. If there are more items than can be displayed at once, it can display a vertical scroll bar so the user can access all items in the list. An optional horizontal scroll bar lets the user view items when the full width of the list items is unlikely to fit. The user can select one or more items from the list, depending on the value of the <code>allowMultipleSelection</code> property.  <p><b>Note: </b>The Spark list-based controls (the Spark ListBase class and its subclasses such as ButtonBar, ComboBox, DropDownList, List, and TabBar) do not support the BasicLayout class as the value of the <code>layout</code> property. Do not use BasicLayout with the Spark list-based controls.  When a layout is specified, the layout's typicalLayoutElement property should not be set; it's automatically set to an item renderer created with the List's <code>typicalItem</code>.</p>  <p>To use this component in a list-based component, such as a List or DataGrid, create an item renderer. For information about creating an item renderer, see <a href=&quot;http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html&quot;> Custom Spark item renderers</a>. </p>  <p>The List control has the following default characteristics:</p> <table class=&quot;innertable&quot;> <tr><th>Characteristic</th><th>Description</th></tr> <tr><td>Default size</td><td>112 pixels wide by 112 pixels high</td></tr> <tr><td>Minimum size</td><td>112 pixels wide by 112 pixels high</td></tr> <tr><td>Maximum size</td><td>10000 pixels wide and 10000 pixels high</td></tr> <tr><td>Default skin class</td><td>spark.skins.spark.ListSkin</td></tr> </table>  attributes of its superclass and adds the following tag attributes:</p>  <pre>\\n &lt;s:List\\n <strong>Properties</strong>\\n allowMultipleSelection=&quot;false&quot;\\n dragEnabled=&quot;false&quot;\\n dragMoveEnabled=&quot;false&quot;\\n dropEnabled=&quot;false&quot;\\n selectedIndices=&quot;null&quot;\\n selectedItems=&quot;null&quot;\\n useVirtualLayout=&quot;true&quot;\\n \\n <strong>Styles</strong>\\n alternatingItemColors=&quot;undefined&quot;\\n borderAlpha=&quot;1.0&quot;\\n borderColor=&quot;0#CCCCCC&quot;\\n borderVisible=&quot;true&quot;\\n contentBackgroundColor=&quot;0xFFFFFF&quot;\\n downColor=&quot;0xA8C6EE&quot;\\n dragIndicator=&quot;ListItemDragProxy&quot;\\n dropIndicatorSkin=&quot;ListDropIndicator&quot;\\n rollOverColor=&quot;0xCEDBEF&quot;\\n selectionColor=&quot;0xA8C6EE&quot;\\n symbolColor=&quot;0x000000&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/ListExample.mxml"]},
      {  "tagName": "see",
         "values": ["spark.skins.spark.ListSkin"]},
      {  "tagName": "mxml",
         "values": ["<p>The <code>&lt;s:List&gt;</code> tag inherits all of the tag"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.components.List",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "write-only",
        "return": "String",
        "qname": "horizontalScrollPolicy",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The optional Scroller used to scroll the List.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "write-only",
        "return": "Boolean",
        "qname": "allowMultipleSelection",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "write-only",
        "return": "uint",
        "qname": "selectionColor",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "write-only",
        "return": "uint",
        "qname": "rollOverColor",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "write-only",
        "return": "uint",
        "qname": "borderColor",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "write-only",
        "return": "Number",
        "qname": "contentBackgroundAlpha",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "write-only",
        "return": "Array",
        "qname": "alternatingItemColors",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "dragEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "dropEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "method",
        "qname": "addedToParent",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "return": "void",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "useVirtualLayout",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "dragMoveEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether items can be moved instead of just copied from the control as part of a drag-and-drop operation. If <code>true</code>, and the <code>dragEnabled</code> property is <code>true</code>, items can be moved. Often the data provider cannot or should not have items removed from it, so a MOVE operation should not be allowed during drag-and-drop.  <p>Drag and drop is not supported on mobile devices where <code>interactionMode</code> is set to <code>touch</code>.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Vector.<int>",
        "qname": "selectedIndices",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A Vector of ints representing the indices of the currently selected item or items. If multiple selection is disabled by setting <code>allowMultipleSelection</code> to <code>false</code>, and this property is set, the data item corresponding to the first index in the Vector is selected.  <p>If multiple selection is enabled by setting <code>allowMultipleSelection</code> to <code>true</code>, this property contains a list of the selected indices in the reverse order in which they were selected. That means the first element in the Vector corresponds to the last item selected.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["[]"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Vector.<Object>",
        "qname": "selectedItems",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A Vector of Objects representing the currently selected data items. If multiple selection is disabled by setting <code>allowMultipleSelection</code> to <code>false</code>, and this property is set, the data item corresponding to the first item in the Vector is selected.  <p>If multiple selection is enabled by setting <code>allowMultipleSelection</code> to <code>true</code>, this property contains a list of the selected items in the reverse order in which they were selected. That means the first element in the Vector corresponds to the last item selected.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["[]"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "addDragData",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Adds the selected items to the DragSource object as part of a drag-and-drop operation. Override this method to add other data to the drag source.",
        "tags": [
        {  "tagName": "param",
               "values": ["ds The DragSource object to which to add the data."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "dragSource", "type": "mx.core.DragSource"}]}
      ,
      { "type": "method",
        "qname": "destroyDropIndicator",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Releases the <code>dropIndicator</code> instance that is currently set in the layout.  <p>If you override the <code>dragExit</code> event handler, and call <code>preventDefault()</code> so that the default handler does not execute, call <code>destroyDropIndicator()</code> to delete the drop indicator.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#createDropIndicator"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "return",
               "values": ["Returns the dropIndicator that was removed."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.core.UIComponent",
          "params": []}
      ,
      { "type": "method",
        "qname": "ensureIndexIsVisible",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A convenience method that handles scrolling a data item into view.  If the data item at the specified index is not completely visible, the List scrolls until it is brought into view. If the data item is already in view, no additional scrolling occurs.",
        "tags": [
        {  "tagName": "param",
               "values": ["index The index of the data item."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "index", "type": "int"}]}
      ]
  ,
  "events": [
  { "qname": "dragComplete",
        "type": "mx.events.DragEvent"
      }]
  }
