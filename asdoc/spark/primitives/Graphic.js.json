{ "type": "class",
  "qname": "spark.primitives.Graphic",
  "baseClassname": "spark.components.Group"
  ,
    "description": "The Graphic control displays a set of graphic drawing commands.  <p>The Graphic class is the root tag for all graphic elements. This tag is also the root for any FXG document. It cannot appear anywhere else in an FXG document.</p>  <p>You add a series of element tags such as <code>&lt;Rect&gt;</code>, <code>&lt;Path&gt;</code>, and <code>&lt;Ellipse&gt;</code> to the Graphic's elements Array to define the contents of the graphic.</p>  <p>Graphic controls do not have backgrounds or borders and cannot take focus.</p>  <p>When placed in a container, a Graphic is positioned by the rules of the container. However, the graphics in the Graphic control are always sized and positioned relative to the upper-left corner of the Graphics control.</p>  <p>The Graphic element can optionally contain a <code>&lt;Group&gt;</code> element.</p>    <p>The <code>&lt;s:Graphic&gt;</code> tag inherits all of the tag attributes of its superclass, and adds the following tag attributes:</p>  <pre>\\n &lt;s:Graphic\\n <b>Properties</b>\\n version\\n viewHeight\\n viewWidth\\n &nbsp;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "see",
         "values": ["spark.primitives.Ellipse", "spark.primitives.Line", "spark.primitives.Path", "spark.primitives.Rect", "spark.components.Group"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.primitives.Graphic",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "field",
        "qname": "version",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies the FXG version this Graphic tag is targeting.",
        "tags": [
        {  "tagName": "default",
               "values": ["1.0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "viewHeight",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Defines the vertical space that the graphic uses in the layout. When you set this value, the content is not scaled. Whereas, if you specify the value of the <code>height</code> property, the content is scaled.  <p>There are two cases where this can be useful:<br/> 1) Specify a <code>viewHeight</code> larger than the natural size of the content. You might do this so that the graphic takes up more space than its visual size. <br/><br/> 2) Specify a <code>viewHeight</code> that is smaller than the natural size of the content. You might do this if your graphic has extra chrome or a border that extends past the edges of the graphic. In this scenario, be sure to disable clipping in your layout.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "viewWidth",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Defines the horizontal space that the graphic uses in the layout. When you set this value, the content is not scaled. Whereas, if you specify the value of the <code>width</code> property, the content is scaled.  <p>There are two cases where this can be useful:<br/> 1) Specify a <code>viewWidth</code> larger than the natural size of the content. You might do this so that the graphic takes up more space than its visual size. <br/><br/> 2) Specify a <code>viewWidth</code> that is smaller than the natural size of the content. You might do this if your graphic has extra chrome or a border that extends past the edges of the graphic. In this scenario, be sure to disable clipping in your layout.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "layout",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "The layout object for this container. This object is responsible for the measurement and layout of the visual elements in the container.",
        "tags": [
        {  "tagName": "default",
               "values": ["spark.layouts.BasicLayout", "spark.layouts.BasicLayout"]},
            {  "tagName": "see",
               "values": ["spark.layouts.supportClasses.LayoutBase", "spark.layouts.supportClasses.LayoutBase"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5", "Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4", "Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0"]}  ]},
      { "type": "method",
        "qname": "measure",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ]
  }
