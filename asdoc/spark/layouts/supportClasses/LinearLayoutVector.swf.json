{ "type": "class",
  "qname": "spark.layouts.supportClasses.LinearLayoutVector",
  "baseClassname": ""
  ,
    "description": "A sparse array of &quot;major dimension&quot; sizes that represent VerticalLayout item heights or HorizontalLayout item widths, and the current &quot;minor dimension&quot; maximum size.  Provides efficient support for finding the cumulative distance to the start/end of an item along the major axis, and similarly for finding the index of the item at a particular distance.  Default major/minor sizes is used for items whose size hasn't been specified.",
  "tags": [
  {  "tagName": "private",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "field",
        "qname": "VERTICAL",
        "return": "uint",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Specifies that the <code>majorAxis</code> is vertical.",
        "tags": [
        {  "tagName": "see",
               "values": ["majorAxis"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "HORIZONTAL",
        "return": "uint",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Specifies that the <code>majorAxis</code> is horizontal.",
        "tags": [
        {  "tagName": "see",
               "values": ["majorAxis"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "BLOCK_SIZE",
        "return": "uint",
        "namespace": "internal",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "BLOCK_SHIFT",
        "return": "uint",
        "namespace": "internal",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "BLOCK_MASK",
        "return": "uint",
        "namespace": "internal",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "method",
        "qname": "spark.layouts.supportClasses.LinearLayoutVector",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "",
          "params": [{ "name": "majorAxis", "type": "uint"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "uint",
        "qname": "length",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The number of item size valued elements.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "defaultMajorSize",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The size of items whose majorSize was not specified with setMajorSize.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "see",
               "values": ["#cacheDimensions"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "defaultMinorSize",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The default minimum value for the minorSize property.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "see",
               "values": ["#cacheDimensions"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "minorSize",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The maximum size of items along the axis opposite the majorAxis and the defaultMinorSize.  This property is updated by the <code>cacheDimensions()</code> method.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "see",
               "values": ["#cacheDimensions", "majorAxis", "#defaultMinorSize"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "minMinorSize",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The maximum of the minimum size of items relative to the minor axis.  If majorAxis is VERTICAL then this is the maximum of items' minWidths, and if majorAxis is HORIZONTAL, then this is the maximum of the items' minHeights.  This property is updated by the <code>cacheDimensions()</code> method.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "see",
               "values": ["#cacheDimensions", "majorAxis"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "uint",
        "qname": "majorAxis",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Defines how the <code>getBounds()</code> method maps from majorSize, minorSize to width and height.",
        "tags": [
        {  "tagName": "default",
               "values": ["VERTICAL"]},
            {  "tagName": "see",
               "values": ["#cacheDimensions"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "majorAxisOffset",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The offset of the first item from the origin in the majorAxis direction. This is useful when implementing padding, in addition to gaps, for virtual layouts.",
        "tags": [
        {  "tagName": "see",
               "values": ["#gap"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "gap",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The distance between items.",
        "tags": [
        {  "tagName": "default",
               "values": ["6"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "getMajorSize",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Return the size of the item at index.  If no size was ever specified then then the defaultMajorSize is returned.",
        "tags": [
        {  "tagName": "see",
               "values": ["defaultMajorSize"]},
            {  "tagName": "param",
               "values": ["index The item's index."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Number",
          "params": [{ "name": "index", "type": "uint"}]}
      ,
      { "type": "method",
        "qname": "setMajorSize",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Set the size of the item at index.   If an index is set to <code>NaN</code> then subsequent calls to get will return the defaultMajorSize.",
        "tags": [
        {  "tagName": "see",
               "values": ["defaultMajorSize"]},
            {  "tagName": "param",
               "values": ["index The item's index.", "value The item's size."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "index", "type": "uint"},
        { "name": "value", "type": "Number"}]}
      ,
      { "type": "method",
        "qname": "insert",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Make room for a new item at index by shifting all of the sizes one position to the right, beginning with startIndex.  The value at index will be NaN.  This is similar to array.splice(index, 0, NaN).",
        "tags": [
        {  "tagName": "param",
               "values": ["index The position of the new NaN size item."]}  ],
          "return": "void",
          "params": [{ "name": "index", "type": "uint"}]}
      ,
      { "type": "method",
        "qname": "remove",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Remove index by shifting all of the sizes one position to the left, begining with index+1.  This is similar to array.splice(index, 1).",
        "tags": [
        {  "tagName": "param",
               "values": ["index The position to be removed."]}  ],
          "return": "void",
          "params": [{ "name": "index", "type": "uint"}]}
      ,
      { "type": "method",
        "qname": "start",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The cumulative distance to the start of the item at index, including the gaps between items and the majorAxisOffset.  The value of start(0) is majorAxisOffset.  Equivalent to: <pre>\\n var distance:Number = majorAxisOffset;\\n for (var i:int = 0; i &lt; index; i++)\\n distance += get(i);\\n return distance + (gap * index);\\n </pre>  The actual implementation is relatively efficient.",
        "tags": [
        {  "tagName": "see",
               "values": ["#end"]},
            {  "tagName": "param",
               "values": ["index The item's index."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Number",
          "params": [{ "name": "index", "type": "uint"}]}
      ,
      { "type": "method",
        "qname": "end",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The cumulative distance to the end of the item at index, including the gaps between items.  If <code>index &lt;(length-1)</code> then the value of this function is defined as: <code>start(index) + get(index)</code>.",
        "tags": [
        {  "tagName": "see",
               "values": ["#start"]},
            {  "tagName": "param",
               "values": ["index The item's index."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Number",
          "params": [{ "name": "index", "type": "uint"}]}
      ,
      { "type": "method",
        "qname": "indexOf",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the index of the item that overlaps the specified distance.  The item at index <code>i</code> overlaps a distance value if <code>start(i) &lt;= distance &lt; end(i)</code>.  If no such item exists, -1 is returned.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "int",
          "params": [{ "name": "distance", "type": "Number"}]}
      ,
      { "type": "method",
        "qname": "cacheDimensions",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Stores the <code>majorSize</code> for the specified ILayoutElement at index, and updates the <code>minorSize</code> and <code>minMinorSize</code> properties.  If <code>majorAxis</code> is <code>VERTICAL</code> then <code>majorSize</code> corresponds to the height of this ILayoutElement, and the minor sizes to the <code>preferredBoundsWidth</code> and <code>minWidth</code>.  If <code>majorAxis</code> is <code>HORIZONTAL</code>, then the roles of the dimensions are reversed.  The <code>minMinorSize</code> is intended to be used at the time that the <code>LinearLayout::measure()</code> method is called.  It accumulates the maximum of the <code>minWidth</code>, <code>Height</code> for all items.",
        "tags": [
        {  "tagName": "see",
               "values": ["#getMajorSize", "minorSize", "minMinorSize", "majorAxis"]},
            {  "tagName": "param",
               "values": ["index The item's index.", "elt The layout element at index."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "index", "type": "uint"},
        { "name": "elt", "type": "mx.core.ILayoutElement"}]}
      ,
      { "type": "method",
        "qname": "getBounds",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the implict bounds of the item at index.  The bounds do not include the gap that follows the item.  If majorAxis is VERTICAL then the returned value is equivalent to: <pre>\\n new Rectangle(0, start(index), major, minor)\\n </pre>  If majorAxis is HORIZONTAL then the returned value is equivalent to: <pre>\\n new Rectangle(start(index), 0, minor, major)\\n </pre>",
        "tags": [
        {  "tagName": "param",
               "values": ["index The item's index.", "bounds The Rectangle to return or null for a new Rectangle"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "org.apache.royale.geom.Rectangle",
          "params": [{ "name": "index", "type": "uint"},
        { "name": "bounds", "type": "org.apache.royale.geom.Rectangle"}]}
      ,
      { "type": "method",
        "qname": "clear",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Clear all cached state, reset length to zero.",
        "tags": [
          ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "toString",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "String",
          "params": []}
      ]
  ,
  "events": [
  ]
  }
