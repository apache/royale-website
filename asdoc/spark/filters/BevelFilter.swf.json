{ "type": "class",
  "qname": "spark.filters.BevelFilter",
  "baseClassname": "mx.filters.BaseDimensionFilter"
  ,
    "description": "The BevelFilter class lets you add a bevel effect to display objects. A bevel effect gives objects such as buttons a three-dimensional look. You can customize the look of the bevel with different highlight and shadow colors, the amount of blur on the bevel, the angle of the bevel, the placement of the bevel, and a knockout effect. You can apply the filter to any display object (that is, objects that inherit from the DisplayObject class), such as MovieClip, SimpleButton, TextField, and Video objects, as well as to BitmapData objects.  <p>To create a new filter, use the constructor <code>new BevelFilter()</code>. The use of filters depends on the object to which you apply the filter:</p> <ul><li>To apply filters to movie clips, text fields, buttons, and video, use the <code>filters</code> property (inherited from DisplayObject). Setting the <code>filters</code> property of an object does not modify the object, and you can remove the filter by clearing the <code>filters</code> property. </li>  <li>To apply filters to BitmapData objects, use the <code>BitmapData.applyFilter()</code> method. Calling <code>applyFilter()</code> on a BitmapData object takes the source BitmapData object and the filter object and generates a filtered image as a result.</li> </ul>  <p>If you apply a filter to a display object, the value of the <code>cacheAsBitmap</code> property of the object is set to <code>true</code>. If you remove all filters, the original value of <code>cacheAsBitmap</code> is restored.</p>  <p>This filter supports Stage scaling. However, it does not support general scaling, rotation, and skewing. If the object itself is scaled (if the <code>scaleX</code> and <code>scaleY</code> properties are not set to 100%), the filter is not scaled. It is scaled only when the user zooms in on the Stage.</p>  <p>A filter is not applied if the resulting image exceeds the maximum dimensions. In  AIR 1.5 and Flash Player 10, the maximum is 8,191 pixels in width or height, and the total number of pixels cannot exceed 16,777,215 pixels. (So, if an image is 8,191 pixels wide, it can only be 2,048 pixels high.) If, for example, you zoom in on a large movie clip with a filter applied, the filter is turned off if the resulting image exceeds the maximum dimensions.</p>  <p>The <code>&lt;s:BevelFilter&gt;</code> tag inherits all of the tag attributes of its superclass and adds the following tag attributes:</p>  <pre>\\n &lt;s:BevelFilter\\n <strong>Properties</strong>\\n angle=&quot;45&quot;\\n distance=&quot;4&quot;\\n highlightAlpha=&quot;1&quot;\\n highlightColor=&quot;0xFFFFFF&quot;\\n shadowAlpha=&quot;1&quot;\\n shadowColor=&quot;0x000000&quot;\\n type=&quot;inner&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/BevelFilterExample.mxml"]},
      {  "tagName": "see",
         "values": ["flash.filters.BevelFilter", "flash.display.DisplayObject#filters", "flash.display.DisplayObject#cacheAsBitmap", "flash.display.BitmapData#applyFilter()"]},
      {  "tagName": "mxml",
         "values": [""]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.filters.BevelFilter",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.  1.0. For example, .25 sets a transparency value of 25%. .25 sets a transparency value of 25%. you can use <code>flash.filters.BitmapFilterQuality</code> constants: <ul> <li><code>BitmapFilterQuality.LOW</code></li> <li><code>BitmapFilterQuality.MEDIUM</code></li> <li><code>BitmapFilterQuality.HIGH</code></li> </ul> <p>Filters with lower values render faster. You can use the other available numeric values to achieve different effects.</p> <code>BitmapFilterType.INNER</code>, <code>BitmapFilterType.OUTER</code>, or <code>BitmapFilterType.FULL</code>. makes the object's fill transparent and reveals the background color of the document.",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.filters.BitmapFilterQuality", "flash.filters.BitmapFilterType"]},
            {  "tagName": "param",
               "values": ["distance The offset distance of the bevel, in pixels (floating point).", "angle The angle of the bevel, from 0 to 360 degrees.", "highlightColor The highlight color of the bevel, <i>0xRRGGBB</i>.", "highlightAlpha The alpha transparency value of the highlight color. Valid values are 0.0 to", "shadowColor The shadow color of the bevel, <i>0xRRGGBB</i>.", "shadowAlpha The alpha transparency value of the shadow color. Valid values are 0.0 to 1.0. For example,", "blurX The amount of horizontal blur in pixels. Valid values are 0 to 255.0 (floating point).", "blurY The amount of vertical blur in pixels. Valid values are 0 to 255.0 (floating point).", "strength The strength of the imprint or spread. The higher the value, the more color is imprinted and the stronger the contrast between the bevel and the background. Valid values are 0 to 255.0.", "quality The quality of the bevel. Valid values are 0 to 15, but for most applications,", "type The type of bevel. Valid values are <code>flash.filters.BitmapFilterType</code> constants:", "knockout Applies a knockout effect (<code>true</code>), which effectively"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "distance", "type": "Number"},
        { "name": "angle", "type": "Number"},
        { "name": "highlightColor", "type": "uint"},
        { "name": "highlightAlpha", "type": "Number"},
        { "name": "shadowColor", "type": "uint"},
        { "name": "shadowAlpha", "type": "Number"},
        { "name": "blurX", "type": "Number"},
        { "name": "blurY", "type": "Number"},
        { "name": "strength", "type": "Number"},
        { "name": "quality", "type": "int"},
        { "name": "type", "type": "String"},
        { "name": "knockout", "type": "Boolean"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "angle",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The angle of the bevel, in degrees. Valid values are from 0 to 360. The angle value represents the angle of the theoretical light source falling on the object and determines the placement of the effect relative to the object. If the distance property is set to 0, the effect is not offset from the object and, therefore, the angle property has no effect.",
        "tags": [
        {  "tagName": "default",
               "values": ["45"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "distance",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The offset distance of the bevel. Valid values are in pixels (floating point).",
        "tags": [
        {  "tagName": "default",
               "values": ["4"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "highlightAlpha",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The alpha transparency value of the highlight color. The value is specified as a normalized value from 0 to 1. For example, .25 sets a transparency value of 25%.",
        "tags": [
        {  "tagName": "default",
               "values": ["1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "uint",
        "qname": "highlightColor",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The highlight color of the bevel. Valid values are in hexadecimal format, 0xRRGGBB.",
        "tags": [
        {  "tagName": "default",
               "values": ["0xFFFFFF"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "shadowAlpha",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The alpha transparency value of the shadow color. This value is specified as a normalized value from 0 to 1. For example, .25 sets a transparency value of 25%.",
        "tags": [
        {  "tagName": "default",
               "values": ["1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "uint",
        "qname": "shadowColor",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The shadow color of the bevel. Valid values are in hexadecimal format, 0xRRGGBB.",
        "tags": [
        {  "tagName": "default",
               "values": ["0x000000"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "type",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The placement of the filter effect. Possible values are flash.filters.BitmapFilterType constants: <ul> <li><code>BitmapFilterType.OUTER</code> - Glow on the outer edge of the object.</li> <li><code>BitmapFilterType.INNER</code> - Glow on the inner edge of the object; the default.</li> <li><code>BitmapFilterType.FULL</code> - Glow on top of the object.</li> </ul>",
        "tags": [
        {  "tagName": "default",
               "values": ["BitmapFilterType.INNER"]},
            {  "tagName": "see",
               "values": ["flash.filters.BitmapFilterType"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "clone",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns a copy of this filter object.   the original BevelFilter instance.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "return",
               "values": ["A new BevelFilter instance with all the same properties as"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.filters.IBitmapFilter",
          "params": []}
      ]
  ,
  "events": [
  ]
  }
