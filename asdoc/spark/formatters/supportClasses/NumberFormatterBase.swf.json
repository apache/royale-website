{ "type": "class",
  "qname": "spark.formatters.supportClasses.NumberFormatterBase",
  "baseClassname": "mx.globalization.supportClasses.GlobalizationBase"
  ,
    "description": "The NumberFormatterBase class is a base class for the NumberFormatter and CurrencyFormatter classes.  attributes of its superclass and adds the following tag attributes:</p>  <pre>\\n &lt;s:NumberFormatterBase\\n <strong>Properties</strong>\\n decimalSeparator=&quot;<i>locale and OS dependent</i>&quot;\\n digitsType=&quot;<i>locale and OS dependent</i>&quot;\\n errorText=&quot;null&quot;\\n fractionalDigits=&quot;<i>locale and OS dependent</i>&quot;\\n groupingPattern=&quot;<i>locale and OS dependent</i>&quot;\\n groupingSeparator=&quot;<i>locale and OS dependent</i>&quot;\\n leadingZero=&quot;<i>locale and OS dependent</i>&quot;\\n negativeSymbol=&quot;<i>locale and OS dependent</i>&quot;\\n trailingZeros=&quot;<i>locale and OS dependent</i>&quot;\\n useGrouping=&quot;<i>locale and OS dependent</i>&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "see",
         "values": ["spark.formatters.CurrencyFormatter", "spark.formatters.NumberFormatter"]},
      {  "tagName": "mxml",
         "values": ["<p>The <code>&lt;s:NumberFormatterBase&gt;</code> tag inherits all of the tag"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 2.5"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.8"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.formatters.supportClasses.NumberFormatterBase",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "g11nWorkingInstance",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-only",
        "return": "String",
        "qname": "lastOperationStatus",
        "namespace": "public",
        "bindable": ["change"],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "useFallback",
        "namespace": "mx_internal",
        "bindable": ["change"],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "decimalSeparator",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "The decimal separator character used for formatting or parsing numbers that have a decimal part.  <p>The default value is dependent on the locale and operating system.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.formatters.CurrencyFormatter#format()", "spark.formatters.NumberFormatter#format()"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "throws",
               "values": ["TypeError if this property is assigned a null value."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "uint",
        "qname": "digitsType",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Defines the set of digit characters to be used when formatting numbers.  <p>Different languages and regions use different sets of characters to represent the digits 0 through 9. This property defines the set of digits to be used.</p>  <p>The value of this property represents the Unicode value for the zero digit of a decimal digit set. The valid values for this property are defined in the <code>NationalDigitsType</code> class.</p>  <p>The default value is dependent on the locale and operating system.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.globalization.NationalDigitsType"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "errorText",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Replacement string returned by the <code>format()</code> method when an error occurs.  <p>If <code>errorText</code> is non-null and an error occurs while formatting a number or currency amount, the format method will return the string assigned to this property.</p>  For example: <listing version=&quot;3.0&quot; > var nf:NumberFormatter = new NumberFormatter(); nf.setStyle(&quot;locale&quot;, &quot;en-US&quot;); nf.errorText = &quot;###&quot; trace(nf.format(&quot;abc&quot;));  // ### </listing>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "see",
               "values": ["mx.globalization.LastOperationStatus"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "fractionalDigits",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "The maximum number of digits that can appear after the decimal separator.  <p>Numbers are rounded to the number of digits specified by this property. The rounding scheme varies depending on the application user's operating system.</p>  <p>When the <code>trailingZeros</code> property is set to <code>true</code>, the fractional portion of the number (after the decimal separator) is padded with trailing zeros until its length matches the value of this <code>fractionalDigits</code> property.</p>  <p>The default value is dependent on the locale and operating system.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#trailingZeros"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "groupingPattern",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Describes the placement of grouping separators within the formatted number string.  <p>When the <code>useGrouping</code> property is set to true, the <code>groupingPattern</code> property is used to define the placement and pattern used for the grouping separator.</p>  <p>The grouping pattern is defined as a string containing numbers separated by semicolons and optionally may end with an asterisk. For example: <code>&quot;3;2;&#42;&quot;</code>. Each number in the string represents the number of digits in a group. The grouping separator is placed before each group of digits. An asterisk at the end of the string indicates that groups with that number of digits should be repeated for the rest of the formatted string. If there is no asterisk then there are no additional groups or separators for the rest of the formatted string. </p>  <p>The first number in the string corresponds to the first group of digits to the left of the decimal separator. Subsequent numbers define the number of digits in subsequent groups to the left. Thus the string <code>&quot;3;2;&#42;&quot;</code> indicates that a grouping separator is placed after the first group of 3 digits, followed by groups of 2 digits. For example: <code>98,76,54,321</code></p>  <p>The following table shows examples of formatting the number 123456789.12 with various grouping patterns. The grouping separator is a comma and the decimal separator is a period. </p> <table class=&quot;innertable&quot; border=&quot;0&quot;> <tr> <td>Grouping Pattern</td> <td>Sample Format</td> </tr> <tr> <td><code>3;&#42;</code></td> <td>123,456,789.12</td> </tr> <tr> <td><code>3;2;&#42;</code></td> <td>12,34,56,789.12</td> </tr> <tr> <td><code>3</code></td> <td>123456,789.12</td> </tr> </table>  <p>Only a limited number of grouping sizes can be defined. On some operating systems, grouping patterns can only contain two numbers plus an asterisk. Other operating systems can support up to four numbers and an asterisk. For patterns without an asterisk, some operating systems only support one number while others support up to three numbers. If the maximum number of grouping pattern elements is exceeded, then additional elements are ignored and the <code>lastOperationStatus</code> property is set to indicate that a fall back value is being used. </p>  <p>The default value is dependent on the locale and operating system.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#groupingSeparator", "#useGrouping"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "throws",
               "values": ["TypeError if this property is assigned a null value."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "groupingSeparator",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "The character or string used for the grouping separator.  <p>The value of this property is used as the grouping separator when formatting numbers with the <code>useGrouping</code> property set to <code>true</code>. This property is initially set based on the locale that is selected when the formatter object is constructed.</p>  <p>The default value is dependent on the locale and operating system.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.formatters.CurrencyFormatter#format()", "spark.formatters.NumberFormatter#format()", "#useGrouping", "#groupingPattern"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "throws",
               "values": ["TypeError if this property is assigned a null value."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "leadingZero",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Specifies whether a leading zero is included in a formatted number when there are no integer digits to the left of the decimal separator.  <p>When this property is set to <code>true</code> a leading zero is included to the left of the decimal separator when formatting numeric values between -1.0 and 1.0. When this property is set to <code>false</code>, a leading zero is not included.</p>  <p>For example, if the number is 0.321 and this property is set <code>true</code>, then the leading zero is included in the formatted string. If the property is set to <code>false</code>, the leading zero is not included. In that case the string would just include the decimal separator followed by the decimal digits, such as <code>.321</code>.</p>  <p>The following table shows examples of how numbers are formatted based on the values of this property and the related <code>fractionalDigits</code> and <code>trailingZeros</code> properties. </p>  <table class=&quot;innertable&quot; border=&quot;0&quot;> <tr> <td>trailingZeros</td> <td><strong>leadingZero</strong></td> <td>fractionalDigits</td> <td>0.12</td> <td>0</td> </tr> <tr> <td>true</td> <td>true</td> <td>3</td> <td>0.120</td> <td>0.000</td> </tr> <tr> <td>false</td> <td>true</td> <td>3</td> <td>0.12</td> <td>0</td> </tr> <tr> <td>true</td> <td>false</td> <td>3</td> <td>.120</td> <td>.000</td> </tr> <tr> <td>false</td> <td>false</td> <td>3</td> <td>.12</td> <td>0</td> </tr> </table>   <p>The default value is dependent on the locale and operating system.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["spark.formatters.CurrencyFormatter#format()", "spark.formatters.NumberFormatter#format()", "#trailingZeros"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "throws",
               "values": ["TypeError if this property is assigned a null value."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "negativeSymbol",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "The negative symbol to be used when formatting negative values.  <p>This symbol is used with the negative number format when formatting a number that is less than zero. It is not used in negative number formats that do not include a negative sign (e.g. when negative numbers are enclosed in parentheses). </p>  <p>This property is set to a default value for the actual locale selected when this formatter is constructed. It can be set with a value to override the default setting.</p>  <p>The default value is dependent on the locale and operating system.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#negativeNumberFormat", "#format()"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "trailingZeros",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Specifies whether trailing zeros are included in a formatted number.  <p>When this property is set to <code>true</code>, trailing zeros are included in the fractional part of the formatted number up to the limit specified by the <code>fractionalDigits</code> property. When this property is set to <code>false</code> then no trailing zeros are shown.</p>  <p>For example, if the numeric value is 123.4, and this property is set true, and the <code>fractionalDigits</code> property is set to 3, the formatted string would show trailing zeros, such as <code>123.400</code> . If this property is <code>false</code>, trailing zeros are not included, and the string shows just the decimal separator followed by the non-zero decimal digits, such as <code>123.4</code>.</p>  <p>The following table shows examples of how numeric values are formatted based on the values of this property and the related <code>fractionalDigits</code> and <code>leadingZero</code> properties. </p>  <table class=&quot;innertable&quot; border=&quot;0&quot;> <tr> <td><strong>trailingZeros</strong></td> <td>leadingZero</td> <td>fractionalDigits</td> <td>0.12</td> <td>0</td> </tr> <tr> <td>true</td> <td>true</td> <td>3</td> <td>0.120</td> <td>0.000</td> </tr> <tr> <td>false</td> <td>true</td> <td>3</td> <td>0.12</td> <td>0</td> </tr> <tr> <td>true</td> <td>false</td> <td>3</td> <td>.120</td> <td>.000</td> </tr> <tr> <td>false</td> <td>false</td> <td>3</td> <td>.12</td> <td>0</td> </tr> </table>  <p>The default value is dependent on the locale and operating system.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#leadingZero"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "throws",
               "values": ["TypeError if this property is assigned a null value."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "useGrouping",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Enables the use of the grouping separator when formatting numbers.  <p>When the <code>useGrouping</code> property is set to <code>true</code>, digits are grouped and delimited by the grouping separator character. For example: <code>123,456,789.22</code></p>  <p>When the <code>useGrouping</code> property is set to <code>false</code>, digits are not grouped or separated. For example: <code>123456789.22</code></p>  <p>The symbol to be used as a grouping separator is defined by the <code>groupingSeparator</code> property. The number of digits between grouping separators is defined by the <code>groupingPattern</code> property.</p>  <p>The default value is dependent on the locale and operating system.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#groupingPattern", "#groupingSeparator"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
