{ "type": "class",
  "qname": "spark.formatters.NumberFormatter",
  "baseClassname": "spark.formatters.supportClasses.NumberFormatterBase"
  ,
    "description": "The NumberFormatter class provides locale-sensitive formatting and parsing of numeric values. It can format <code>int</code>, <code>uint</code>, and <code>Number</code> objects.  <p>This class is a wrapper class around the flash.globalization.NumberFormatter class. Therefore, the locale-specific formatting is provided by the flash.globalization.NumberFormatter. However, this NumberFormatter class can be used in MXML declarations, uses the locale style for the requested Locale ID name, and has methods and properties that are bindable. </p>  <p>The flash.globalization.NumberFormatter class use the underlying operating system for the formatting functionality and to supply the locale-specific data. On some operating systems, the flash.globalization classes are unsupported, on these systems this wrapper class provides fallback functionality.</p>  attributes of its superclass and adds the following tag attributes:</p>  <pre>\\n &lt;s:NumberFormatter\\n <strong>Properties</strong>\\n negativeNumberFormat=&quot;<i>locale and OS dependent</i>&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/NumberFormatterExample1.mxml", "examples/NumberFormatterExample2.mxml"]},
      {  "tagName": "see",
         "values": ["flash.globalization.NumberFormatter"]},
      {  "tagName": "mxml",
         "values": ["<p>The <code>&lt;s:NumberFormatter&gt;</code> tag inherits all of the tag"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10.1", "AIR 2.5"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.8"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.formatters.NumberFormatter",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructs a new NumberFormatter object to format numbers according to the conventions of a given locale. <p> The locale for this class is supplied by the locale style. The locale style can be set in several ways: </p> <ul> <li> By using the class in an MXML declaration and inheriting the locale from the document that contains the declaration. Example: <pre>\\n &lt;fx:Declarations&gt; <br>\\n &lt;s:NumberFormatter id=&quot;nf&quot; /&gt;<br>\\n &lt;/fx:Declarations&gt;</pre> </li> <li> By using an MXML declaration and specifying the locale value in the list of assignments. Example:<pre>\\n &lt;fx:Declarations&gt;<br>\\n &lt;s:NumberFormatter id=&quot;nf_French_France&quot; locale=&quot;fr_FR&quot; /&gt;<br>\\n &lt;/fx:Declarations&gt;</pre> </li> <li> Calling the setStyle method. For example:<pre>\\n <code>nf.setStyle(&quot;locale&quot;, &quot;fr-FR&quot;)</code></pre> </li> <li> Inheriting the style from a <code>UIComponent</code> by calling the UIComponent's <code>addStyleClient()</code> method. </li> </ul> <p> If the <code>locale</code> style is not set by one of the above techniques, the instance of this class will be added as a <code>StyleClient</code> to the <code>topLevelApplication</code> and will therefore inherit the <code>locale</code> style from the <code>topLevelApplication</code> object when the <code>locale</code> dependent property getter or <code>locale</code> dependent method is called. </p> <p>Most of the properties of this class are automatically set based on the locale style. If the locale style is changed, any properties that have not been explicitly set will also be updated based on the new locale. Note that the actual locale that is used is specified by the actualLocaleIDName property.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#actualLocaleIDName", "#lastOperationsStatus"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "String",
        "qname": "actualLocaleIDName",
        "namespace": "public",
        "bindable": ["change"],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "see",
               "values": ["flash.globalization.NumberFormatter.actualLocaleIDName", "#NumberFormatter()"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "uint",
        "qname": "negativeNumberFormat",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "A numeric value that indicates a formatting pattern for negative numbers. This pattern defines the location of the negative symbol or parentheses in relation to the numeric portion of the formatted number.  <p>The following table summarizes the possible formats for negative numbers. When a negative number is formatted, the minus sign in the format is replaced with the value of the <code>negativeSymbol</code> property and the 'n' character is replaced with the formatted numeric value.</p>  <table class=&quot;innertable&quot; border=&quot;0&quot;> <tr> <td>Negative number format type</td> <td>Format</td> </tr> <tr> <td>0</td> <td>(n)</td> </tr> <tr> <td>1</td> <td>-n</td> </tr> <tr> <td>2</td> <td>- n</td> </tr> <tr> <td>3</td> <td>n-</td> </tr> <tr> <td>4</td> <td>n -</td> </tr> </table>   <p>The default value is dependent on the locale and operating system.</p>  between 0 and 4.",
        "tags": [
        {  "tagName": "see",
               "values": ["#negativeSymbol", "#format()"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "throws",
               "values": ["ArgumentError if the assigned value is not a number"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "format",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Formats a number.  <p>This function formats the number based on the property values of the formatter. If the properties are not modified after the <code>locale</code> style is set, the numbers are formatted according to the locale-specific conventions provided by the operating system for the locale identified by the <code>actualLocaleIDName</code> property. To customize the format, the properties can be altered to control specific aspects of formatting a number.</p>  <p>Very large numbers and very small magnitude numbers can be formatted with this function. However, the number of significant digits is limited to the precision provided by the <code>Number</code> object. Scientific notation is not supported.</p>  <p>If there is an error when formatting, due to an illegal input value or other error, by default the <code>format()</code> method returns <code>null</code>. However if the <code>errorText</code> property is non-null, then the value of the <code>errorText</code> property is returned. The <code>lastOperationStatus</code> property will be set to indicate the error that occurred.</p>  object is not a <code>Number</code> then it is converted to a number using the <code>Number()</code> conversion function.",
        "tags": [
        {  "tagName": "see",
               "values": ["#NumberFormatter", "spark.formatters.supportClasses.NumberFormatterBase#errorText", "#lastOperationStatus"]},
            {  "tagName": "param",
               "values": ["value An object containing a number value to format. If the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "return",
               "values": ["A formatted number string."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "parse",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Parses a string and returns a <code>NumberParseResult</code> object containing the parsed elements.  <p>The <code>NumberParseResult</code> object contains the value of the first number found in the input string, the starting index for the number within the string, and the index of the first character after the number in the string.</p>  <p>If the string does not contain a number, the value property of the NumberParseResult is set to <code>NaN</code> and the <code>startIndex</code> and <code>endIndex</code> properties are set to the hexadecimal value <code>0x7fffffff</code>. </p>  <p>This function uses the value of the <code>decimalSeparator</code> property to determine the portion of the number that contains fractional digits, and the <code>groupingSeparator</code> property to determine which characters are allowed within the digits of a number, and the <code>negativeNumberFormat</code> property to control how negative values are represented. </p>  <p>The following table identifies the result of strings parsed for the various <code>NegativeNumberFormat</code> values:</p> <table class=&quot;innertable&quot; border=&quot;0&quot;> <tr> <td>NegativeNumberFormat</td> <td>Input String</td> <td>Result</td> </tr> <tr> <td>(n)</td> <td>&quot;(123)&quot; or &quot;( 123 )&quot;</td> <td>&quot;-123&quot;</td> </tr> <tr> <td>-n</td> <td>&quot;-123&quot; or &quot;- 123&quot;</td> <td>&quot;-123&quot;</td> </tr> <tr> <td>- n</td> <td>&quot;-123&quot; or &quot;- 123&quot;</td> <td>&quot;-123&quot;</td> </tr> <tr> <td>n-</td> <td>&quot;123-&quot; or &quot;123 -&quot;</td> <td>&quot;-123&quot;</td> </tr> <tr> <td>n -</td> <td>&quot;123-&quot; or &quot;123 -&quot;</td> <td>&quot;-123&quot;</td> </tr> </table>  <p>A single white space is allowed between the number and the minus sign or parenthesis. A white space character is a character that has a Space Separator (Zs) property in the Unicode Character Database. For more information, see <a href=&quot;http://www.unicode.org/ucd/&quot;>http://www.unicode.org/ucd/</a>).</p>  <p>Other properties are ignored when determining a valid number. Specifically the value of the <code>digitsType</code> property is ignored and the digits can be from any of the digit sets that are enumerated in the <code>NationalDigitsType</code> class. The values of the <code>groupingPattern</code> and <code>useGrouping</code> properties do not influence the parsing of the number. </p>  <p>If numbers are preceded or followed in the string by a plus sign '+', the plus sign is treated as a character that is not part of the number. </p>  <p>This function does not parse strings containing numbers in scientific notation (e.g. 1.23e40).</p>   retrieves the prefix and suffix: <listing version=&quot;3.0&quot; > var nf:NumberFormatter = new NumberFormatter(); nf.setStyle(&quot;locale&quot;,&quot;fr-FR&quot;); var str:String = &quot;1,56 m&#232;tre&quot; var result:NumberParseResult = nf.parse(str); trace(result.value) // 1.56 trace(str.substr(0,result.startIndex));                // &quot;&quot; trace(str.substr(result.startIndex, result.endIndex)); // &quot;1,56&quot; trace(str.substr(result.endIndex));                 // &quot; m&#232;tre&quot; </listing>   value and the indices for the start and end of the portion of the string that contains the number.",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.globalization.NumberParseResult", "#parseNumber()", "flash.globalization.NationalDigitsType"]},
            {  "tagName": "param",
               "values": ["inputString The input string to parse."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "throws",
               "values": ["TypeError if the <code>inputString</code> parameter is null."]},
            {  "tagName": "return",
               "values": ["A <code>NumberParseResult</code> object containing the numeric"]},
            {  "tagName": "example",
               "values": ["The following code parses a number from a string and"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.globalization.NumberParseResult",
          "params": [{ "name": "inputString", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "parseNumber",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Parses a string that contains only digits and optional whitespace characters and returns a Number. If the string does not begin with a number or contains characters other than whitespace that are not part of the number, then this method returns <code>NaN</code>. White space before or after the numeric digits is ignored.  <p>If the numeric digit is preceded or followed by a plus sign '+' it is treated as a non-whitespace character. The return value is <code>NaN</code>. </p>  <p>See the description of the parse function for more information about number parsing and what constitutes a valid number. </p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#parse()", "flash.globalization.NationalDigitsType"]},
            {  "tagName": "param",
               "values": ["inputString The input string to parse."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "throws",
               "values": ["TypeError if the <code>parseString</code> is <code>null</code>"]},
            {  "tagName": "return",
               "values": ["A <code>Number</code> object containing the numeric value."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Number",
          "params": [{ "name": "parseString", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "getAvailableLocaleIDNames",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Lists all of the locale ID names supported by this class. This is a list of locales supported by the operating system, not a list of locales that the ResourceManager has resources for.  supported by this class and operating system.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "return",
               "values": ["A vector of strings containing all of the locale ID names"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Vector.<String>",
          "params": []}
      ]
  }
