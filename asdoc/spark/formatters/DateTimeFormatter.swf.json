{ "type": "class",
  "qname": "spark.formatters.DateTimeFormatter",
  "baseClassname": "mx.globalization.supportClasses.GlobalizationBase"
  ,
    "description": "The DateTimeFormatter class provides locale-sensitve formatting for a <code>Date</code> object.  <p>This class is a wrapper class around the flash.globalization.DateTimeFormatter class. Therefore, the locale-specific formatting functionality and the month names, day names and the first day of the week are provided by the flash.globalization.DateTimeFormatter. However, this DateTimeFormatter class can be used in MXML declarations, uses the locale style for the requested Locale ID name, and has methods and properties that are bindable.</p>  <p>The flash.globalization.DateTimeFormatter class uses the underlying operating system for the formatting functionality and to supply the locale-specific data. On some operating systems, the flash.globalization classes are unsupported, on these systems, this wrapper class provides fallback functionality.</p>  attributes of its superclass and adds the following tag attributes:</p>  <pre>\\n &lt;s:DateTimeFormatter\\n <strong>Properties</strong>\\n dateStyle=&quot;long&quot;\\n dateTimePattern=&quot;EEEE, MMMM dd, yyyy h:mm:ss a&quot;\\n errorText=&quot;null&quot;\\n timeStyle=&quot;long&quot;\\n useUTC=&quot;false&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/DateTimeFormatterExample.mxml"]},
      {  "tagName": "see",
         "values": ["flash.globalization.DateTimeFormatter"]},
      {  "tagName": "mxml",
         "values": ["<p>The <code>&lt;s:DateTimeFormatter&gt;</code> tag inherits all of the tag"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10.1", "AIR 2.5"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.8"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.formatters.DateTimeFormatter",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructs a new <code>DateTimeFormatter</code> object to format dates and times according to the conventions of the specified locale and the provided date and time formatting styles.  <p>The locale for this class is supplied by the locale style. The locale style can be set in several ways: </p> <ul> <li> By using the class in an MXML declaration and inheriting the locale from the document that contains the declaration. </li> Example:<pre>\\n &lt;fx:Declarations&gt;\\n &lt;s:DateTimeFormatter id=&quot;df&quot; /&gt;\\n &lt;/fx:Declarations&gt;</pre> <li> By using an MXML declaration and specifying the locale value in the list of assignments. </li> Example:<pre>\\n &lt;fx:Declarations&gt;\\n &lt;s:DateTimeFormatter id=&quot;df_Japanese&quot; locale=&quot;ja-JP&quot; /&gt;\\n &lt;/fx:Declarations&gt;</pre> <li> Calling the setStyle method. For example: <pre>\\n df.setStyle(&quot;locale&quot;, &quot;ja-JP&quot;)</pre> </li> <li> Inheriting the style from a <code>UIComponent</code> by calling the UIComponent's <code>addStyleClient()</code> method. </li> </ul> <p> If the <code>locale</code> style is not set by one of the above techniques, the instance of this class will be added as a <code>StyleClient</code> to the <code>topLevelApplication</code> and will therefore inherit the <code>locale</code> style from the <code>topLevelApplication</code> object when the <code>locale</code> dependent property getter or <code>locale</code> dependent method is called. </p>  <p>Most of the properties of this class are automatically set based on the locale style. If the locale style is changed, any properties that have not been explicitly set will also be updated based on the new locale. Note that the actual locale that is used is specified by the actualLocaleIDName property.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#actualLocaleIDName", "#lastOperationsStatus"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "String",
        "qname": "actualLocaleIDName",
        "namespace": "public",
        "bindable": ["change"],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "see",
               "values": ["flash.globalization.DateTimeFormatter.actualLocaleIDName", "#DateTimeFormatter()"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "String",
        "qname": "lastOperationStatus",
        "namespace": "public",
        "bindable": ["change"],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "useFallback",
        "namespace": "mx_internal",
        "bindable": ["change"],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "dateStyle",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "The date style for this instance of the DateTimeFormatter.  The date style is used to retrieve a predefined time and locale specific formatting pattern from the operating system. When formatting a date, the <code>locale</code> style, the <code>timeStyle</code> and the <code>dateStyle</code> properties determine the format of the date.  The date style value can be set in the following two ways: assigning a value to either the <code>dateStyle</code> property or the <code>dateTimePattern</code> property.  <p>The possible for this property are defined by the flash.globalization.DateTimeStyle class. Possible values for the <code>dateStyle</code> property are:</p>  <ul> <li><code>DateTimeStyle.LONG</code> </li> <li><code>DateTimeStyle.MEDIUM</code> </li> <li><code>DateTimeStyle.SHORT </code></li> <li><code>DateTimeStyle.NONE </code></li> <li><code>DateTimeStyle.CUSTOM </code></li> </ul>  <p>If the <code>dateTimePattern</code> property is assigned a value, as a side effect, the <code>dateStyle</code> property is set to <code>DateTimeStyle.CUSTOM </code></p>   <code>DateTimeStyle</code> constant or is <code>DateTimeStyle.CUSTOM</code>. is set to <code>null</code>.",
        "tags": [
        {  "tagName": "default",
               "values": ["<code>DateTimeStyle.LONG</code>"]},
            {  "tagName": "see",
               "values": ["#dateStyle", "#dateTimePattern", "#lastOperationStatus", "flash.globalization.DateTimeStyle", "#DateTimeFormatter()"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "throws",
               "values": ["ArgumentError if the assigned value is not a valid", "TypeError if the <code>dateStyle</code> or"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "dateTimePattern",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "The pattern string used by the DateTimeFormatter object to format dates and times.  <p>This pattern can be set in one of two ways:</p>  <ol> <li>By setting the <code>dateStyle</code> and <code>timeStyle</code> properties. </li> <li>By setting the <code>dateTimePattern</code> property.</li> </ol>  <p>If this property is assigned a value directly, as a side effect, the current time and date styles are overridden and set to the value <code>DateTimeStyle.CUSTOM</code>.</p>  <p>For a description of the pattern syntax, please see the <a href=&quot;..\\..\\flash\\globalization\\DateTimeFormatter.html#setDateTimePattern()&quot;> <code>flash.globalization.DateTimeFormatter.setDateTimePattern() </code></a> method.</p>",
        "tags": [
        {  "tagName": "default",
               "values": [""EEEE, MMMM dd, yyyy h:mm:ss a""]},
            {  "tagName": "see",
               "values": ["#dateStyle", "#timeStyle"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "errorText",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "String returned by the <code>format()</code> method when an error occurs.  <p>If <code>errorText</code> is non-null and an error occurs while formatting a date, the format method will return the string assigned to this property.</p>  For example: <listing version=&quot;3.0&quot; > var dtf:DateTimeFormatter = new DateTimeFormatter(); dtf.setStyle(&quot;locale&quot;, &quot;en-US&quot;); dtf.errorText = &quot;----&quot; trace(dtf.format(&quot;abc&quot;));  // ---- </listing>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "see",
               "values": ["mx.globalization.LastOperationStatus"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "timeStyle",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "The time style for this instance of the DateTimeFormatter.  The time style is used to retrieve a predefined time and locale specific formatting pattern from the operating system. When formatting a date, the <code>locale</code> style, the <code>timeStyle</code> and the <code>dateStyle</code> properties determine the format of the date.  The time style value can be set in the following two ways: assigning a value to either the <code>timeStyle</code> property or the <code>dateTimePattern</code> property.  <p>The value of the property are defined by the flash.globalization.DateTimeStyle class. Possible values for the <code>timeStyle</code> property are:</p>  <ul> <li><code>DateTimeStyle.LONG</code></li> <li><code>DateTimeStyle.MEDIUM</code></li> <li><code>DateTimeStyle.SHORT</code></li> <li><code>DateTimeStyle.NONE</code></li> <li><code>DateTimeStyle.CUSTOM</code></li> </ul>  <p>If the <code>dateTimePattern</code> property is assigned a value, as a side effect, the dateStyle property is set to <code>DateTimeStyle.CUSTOM </code></p>   <code>DateTimeStyle</code> constant or is <code>DateTimeStyle.CUSTOM </code>.  <code>timeStyle</code> parameter is null.",
        "tags": [
        {  "tagName": "default",
               "values": ["<code>DateTimeStyle.LONG</code>"]},
            {  "tagName": "see",
               "values": ["#dateStyle", "#dateTimePattern", "flash.globalization.DateTimeStyle", "#DateTimeFormatter()"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "throws",
               "values": ["ArgumentError if the assigned value is not a valid", "TypeError if the <code>dateStyle</code> or"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "useUTC",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "A boolean flag to control whether the local or the UTC date and time values are used when the formatting a date.  If <code>useUTC</code> is set to <code>true</code> then the UTC values are used. If the value is set to <code>false</code>, then the date time values of the operating system's current time zone is used.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "see",
               "values": ["#format()"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "format",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Formats a display string for an object that specifies a date in either the user's local time or UTC time.   <p>A <code>Date</code> object has two sets of date and time values, those in the user's local time (<code>date, day, fullYear, hours, minutes, month,</code> and <code>seconds</code>) and those in UTC time (<code>dateUTC, dayUTC, fullYearUTC, hoursUTC, minutesUTC, monthUTC,</code> and <code>secondsUTC</code>). The boolean property <code>useUTC</code> controls which set of date and time components are used when formatting the date. The formatting will be done using the conventions of the locale as set by the <code>locale</code> style property and the <code>dateStyle</code> and <code>timeStyle</code> properties, or the <code>dateTimePattern</code>, specified for this <code>DateTimeFormatter</code> instance. </p>  <p>If there is an error when formatting, due to an illegal input value or other error, by default the <code>format()</code> method will return <code>null</code>. However if the <code>errorText</code> property is non-null, then the value of the <code>errorText</code> property will be returned. The <code>lastOperationStatus</code> property will be set to indicate the error that occurred.</p>  object is not a <code>Date</code> then it will be converted to a date using the <code>Date()</code> constructor.",
        "tags": [
        {  "tagName": "see",
               "values": ["#dateStyle", "#timeStyle", "Date", "#dateTimePattern", "DateTimeFormatter"]},
            {  "tagName": "param",
               "values": ["value A <code>Date</code> value to be formatted. If the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "return",
               "values": ["A formatted string representing the date or time value."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "getMonthNames",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Retrieves a list of localized strings containing the month names for the current calendar system.  The first element in the list is the name for the first month of the year.  Valid values are: <ul> <li><code>DateTimeNameStyle.FULL</code></li> <li><code>DateTimeNameStyle.LONG_ABBREVIATION</code> </li> <li><code>DateTimeNameStyle.SHORT_ABBREVIATION</code> </li> </ul> string will be used. This context will only make a difference for certain locales. Valid values are: <ul> <li><code>DateTimeNameContext.FORMAT</code></li> <li><code>DateTimeNameContext.STANDALONE</code></li> </ul>  the current locale (specified by the locale style), name style and context. The first element in the vector, at index 0, is the name for the first month of the year; the next element is the name for the second month of the year; and so forth. <code>context</code> parameter is null.",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.globalization.DateTimeNameContext", "flash.globalization.DateTimeNameStyle"]},
            {  "tagName": "param",
               "values": ["nameStyle Indicates the style of name string to be used.", "context A code indicating the context in which the formatted"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "throws",
               "values": ["TypeError if the <code>nameStyle</code> or"]},
            {  "tagName": "return",
               "values": ["A vector of localized strings containing the month names for"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Vector.<String>",
          "params": [{ "name": "nameStyle", "type": "String"},
        { "name": "context", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "getWeekdayNames",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Retrieves a list of localized strings containing the names of weekdays for the current calendar system.  The first element in the list represents the name for Sunday.  Valid values are: <ul> <li><code>DateTimeNameStyle.FULL</code></li> <li><code>DateTimeNameStyle.LONG_ABBREVIATION</code> </li> <li><code>DateTimeNameStyle.SHORT_ABBREVIATION</code> </li> </ul> string will be used. This context only applies for certain locales where the name of a month changes depending on the context. For example, in Greek the month names are different if they are displayed alone versus displayed along with a day. Valid values are: <ul> <li><code>DateTimeNameContext.FORMAT</code></li> <li><code>DateTimeNameContext.STANDALONE</code></li> </ul>  the current locale (specified by the locale style), name style and context. The first element in the vector, at index 0, is the name for Sunday; the next element is the name for Monday; and so forth. <code>context</code> parameter is null.",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.globalization.DateTimeNameContext", "flash.globalization.DateTimeNameStyle"]},
            {  "tagName": "param",
               "values": ["nameStyle Indicates the style of name string to be used.", "context A code indicating the context in which the formatted"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "throws",
               "values": ["TypeError if the <code>nameStyle</code> or"]},
            {  "tagName": "return",
               "values": ["A vector of localized strings containing the month names for"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Vector.<String>",
          "params": [{ "name": "nameStyle", "type": "String"},
        { "name": "context", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "getFirstWeekday",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Returns an integer corresponding to the first day of the week for this locale and calendar system.  A value of 0 corresponds to Sunday, 1 corresponds to Monday and so on, with 6 corresponding to Saturday.  this locale and calendar system.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "return",
               "values": ["An integer corresponding to the first day of the week for"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "int",
          "params": []}
      ,
      { "type": "method",
        "qname": "getAvailableLocaleIDNames",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Lists all of the locale ID names supported by this class. This is a list of locales supported by the operating system, not a list of locales that the ResourceManager has resources for.  supported by this class and operating system.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "return",
               "values": ["A vector of strings containing all of the locale ID names"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Vector.<String>",
          "params": []}
      ]
  }



