{ "type": "class",
  "qname": "mx.utils.ObjectProxy",
  "baseClassname": "org.apache.royale.utils.Proxy"
  ,
    "description": "This class provides the ability to track changes to an item managed by this proxy. Any number of objects can &quot;listen&quot; for changes on this object, by using the <code>addEventListener()</code> method.  <pre>\\n import mx.events.PropertyChangeEvent;\\n import mx.utils.ObjectUtil;\\n import mx.utils.ObjectProxy;\\n import mx.utils.StringUtil;\\n \\n var a:Object = { name: &quot;Tyler&quot;, age: 5, ssnum: &quot;555-55-5555&quot; };\\n var p:ObjectProxy = new ObjectProxy(a);\\n p.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, updateHandler);\\n p.name = &quot;Jacey&quot;;\\n p.age = 2;\\n delete p.ssnum;\\n \\n // handler function\\n function updateHandler(event:ChangeEvent):void\\n {\\n trace(StringUtil.substitute(&quot;updateHandler('{0}', {1}, {2}, {3}, '{4}')&quot;,\\n event.kind,\\n event.property,\\n event.oldValue,\\n event.newValue,\\n event.target.object_proxy::UUID));\\n }\\n \\n // The trace output appears as:\\n // updateHandler('opUpdate', name, Tyler, Jacey, '698AF8CB-B3D9-21A3-1AFFDGHT89075CD2')\\n // updateHandler('opUpdate', age, 5, 2, '698AF8CB-B3D9-21A3-1AFFDGHT89075CD2')\\n // updateHandler('opDelete', ssnum, 555-55-5555, null, '698AF8CB-B3D9-21A3-1AFFDGHT89075CD2')\\n </pre>",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "example",
         "values": []},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.utils.ObjectProxy",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Initializes this proxy with the specified object, id and proxy depth.  If no item is specified, an anonymous object will be constructed and assigned.  for this object instance. Required for IPropertyChangeNotifier compliance as every object must provide a unique way of identifying it. If no value is specified, a random id will be assigned.  object graph should have a proxy created during property access. The default is -1, meaning &quot;proxy to infinite depth&quot;.   <pre>\\n import mx.events.PropertyChangeEvent;\\n import mx.utils.ObjectUtil;\\n import mx.utils.ObjectProxy;\\n import mx.utils.StringUtil;\\n \\n var a:Object = { name: &quot;Tyler&quot;, age: 5, ssnum: &quot;555-55-5555&quot; };\\n var p:ObjectProxy = new ObjectProxy(a);\\n p.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, updateHandler);\\n p.name = &quot;Jacey&quot;;\\n p.age = 2;\\n delete p.ssnum;\\n \\n // handler function\\n function updateHandler(event:PropertyChangeEvent):void\\n {\\n trace(StringUtil.substitute(&quot;updateHandler('{0}', {1}, {2}, {3}, '{4}')&quot;,\\n event.kind,\\n event.property,\\n event.oldValue,\\n event.newValue,\\n event.target.uid));\\n }\\n \\n // trace output\\n updateHandler('opUpdate', name, Jacey, '698AF8CB-B3D9-21A3-1AFFDGHT89075CD2')\\n updateHandler('opUpdate', age, 2, '698AF8CB-B3D9-21A3-1AFFDGHT89075CD2')\\n updateHandler('opDelete', ssnum, null, '698AF8CB-B3D9-21A3-1AFFDGHT89075CD2')\\n </pre>",
        "tags": [
        {  "tagName": "param",
               "values": ["item Object to proxy.", "uid String containing the unique id", "proxyDepth An integer indicating how many levels in a complex"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "example",
               "values": []},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "item", "type": "Object"},
        { "name": "uid", "type": "String"},
        { "name": "proxyDepth", "type": "int"}]}
      ,
      { "type": "field",
        "qname": "dispatcher",
        "return": "org.apache.royale.events.EventDispatcher",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A reference to the EventDispatcher for this proxy.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "notifiers",
        "return": "Object",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A hashmap of property change notifiers that this proxy is listening for changes from; the key of the map is the property name.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "proxyClass",
        "return": "Class",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Indicates what kind of proxy to create when proxying complex properties. Subclasses should assign this value appropriately.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "propertyList",
        "return": "Array",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Contains a list of all of the property names for the proxied object. Descendants need to fill this list by overriding the <code>setupPropertyList()</code> method.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Object",
        "qname": "object",
        "namespace": "object_proxy",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The object being proxied.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "uid",
        "namespace": "public",
        "bindable": ["propertyChange"],
        "details": [],
        "deprecated": {},
          "description": "The unique identifier for this object.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "getProperty",
        "namespace": "flash_proxy",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Returns the specified property value of the proxied object.  or possibly a QName where the property name is found by inspecting the <code>localName</code> property.  In some instances this value may be an instance of <code>ObjectProxy</code>.",
        "tags": [
        {  "tagName": "param",
               "values": ["name Typically a string containing the name of the property,"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The value of the property."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "*",
          "params": [{ "name": "name", "type": "*"}]}
      ,
      { "type": "method",
        "qname": "callProperty",
        "namespace": "flash_proxy",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Returns the value of the proxied object's method with the specified name.   called method.",
        "tags": [
        {  "tagName": "param",
               "values": ["name The name of the method being invoked.", "rest An array specifying the arguments to the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The return value of the called method."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "*",
          "params": [{ "name": "name", "type": "*"},
        { "name": "rest", "type": "Array"}]}
      ,
      { "type": "method",
        "qname": "deleteProperty",
        "namespace": "flash_proxy",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Deletes the specified property on the proxied object and sends notification of the delete to the handler.  or possibly a QName where the property name is found by inspecting the <code>localName</code> property.",
        "tags": [
        {  "tagName": "param",
               "values": ["name Typically a string containing the name of the property,"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["A Boolean indicating if the property was deleted."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "name", "type": "*"}]}
      ,
      { "type": "method",
        "qname": "setProperty",
        "namespace": "flash_proxy",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Updates the specified property on the proxied object and sends notification of the update to the handler.  should be updated on the proxied object.",
        "tags": [
        {  "tagName": "param",
               "values": ["name Object containing the name of the property that", "value Value that should be set on the proxied object."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "name", "type": "*"},
        { "name": "value", "type": "*"}]}
      ,
      { "type": "method",
        "qname": "getComplexProperty",
        "namespace": "object_proxy",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Provides a place for subclasses to override how a complex property that needs to be either proxied or daisy chained for event bubbling is managed.  or possibly a QName where the property name is found by inspecting the <code>localName</code> property.",
        "tags": [
        {  "tagName": "param",
               "values": ["name Typically a string containing the name of the property,", "value The property value."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The property value or an instance of <code>ObjectProxy</code>."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "*",
          "params": [{ "name": "name", "type": "*"},
        { "name": "value", "type": "*"}]}
      ,
      { "type": "method",
        "qname": "readExternal",
        "namespace": "public",
        "bindable": ["propertyChange"],
        "details": [],
        "deprecated": {},
          "description": "Since Flex only uses ObjectProxy to wrap anonymous objects, the server flex.messaging.io.ObjectProxy instance serializes itself as a Map that will be returned as a plain ActionScript object. You can then set the object_proxy object property to this value.  deserialized.",
        "tags": [
        {  "tagName": "param",
               "values": ["input The source object from which the ObjectProxy is"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "input", "type": "flash.utils.IDataInput"}]}
      ,
      { "type": "method",
        "qname": "writeExternal",
        "namespace": "public",
        "bindable": ["propertyChange"],
        "details": [],
        "deprecated": {},
          "description": "Since Flex only serializes the inner ActionScript object that it wraps, the server flex.messaging.io.ObjectProxy populates itself with this anonymous object's contents and appears to the user as a Map.  deserialized.",
        "tags": [
        {  "tagName": "param",
               "values": ["output The source object from which the ObjectProxy is"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "output", "type": "flash.utils.IDataOutput"}]}
      ,
      { "type": "method",
        "qname": "addEventListener",
        "namespace": "public",
        "bindable": ["propertyChange"],
        "details": [],
        "deprecated": {},
          "description": "Registers an event listener object so that the listener receives notification of an event. For more information, including descriptions of the parameters see <code>addEventListener()</code> in the flash.events.EventDispatcher class.   an Event object as its only parameter and must return nothing.  target and bubbling phases. If <code>useCapture</code> is set to <code>true</code>, the listener processes the event only during the capture phase and not in the target or bubbling phase. If <code>useCapture</code> is <code>false</code>, the listener processes the event only during the target or bubbling phase. To listen for the event in all three phases, call <code>addEventListener</code> twice, once with <code>useCapture</code> set to <code>true</code>, then again with <code>useCapture</code> set to <code>false</code>.   weak. A strong reference (the default) prevents your listener from being garbage-collected. A weak reference does not.",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.events.EventDispatcher#addEventListener()"]},
            {  "tagName": "param",
               "values": ["type The type of event.", "listener The listener function that processes the event. This function must accept", "useCapture Determines whether the listener works in the capture phase or the", "priority The priority level of the event listener.", "useWeakReference Determines whether the reference to the listener is strong or"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "type", "type": "String"},
        { "name": "listener", "type": "Function"},
        { "name": "useCapture", "type": "Boolean"},
        { "name": "priority", "type": "int"},
        { "name": "useWeakReference", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "removeEventListener",
        "namespace": "public",
        "bindable": ["propertyChange"],
        "details": [],
        "deprecated": {},
          "description": "Removes an event listener. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect. For more information, see the flash.events.EventDispatcher class.    phase or the target and bubbling phases. If the listener was registered for both the capture phase and the target and bubbling phases, two calls to <code>removeEventListener()</code> are required to remove both, one call with <code>useCapture</code> set to <code>true</code>, and another call with <code>useCapture</code> set to <code>false</code>.",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.events.EventDispatcher#removeEventListener()"]},
            {  "tagName": "param",
               "values": ["type The type of event.", "listener The listener object to remove.", "useCapture Specifies whether the listener was registered for the capture"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "type", "type": "String"},
        { "name": "listener", "type": "Function"},
        { "name": "useCapture", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "dispatchEvent",
        "namespace": "public",
        "bindable": ["propertyChange"],
        "details": [],
        "deprecated": {},
          "description": "Dispatches an event into the event flow. For more information, see the flash.events.EventDispatcher class.  event is being redispatched, a clone of the event is created automatically. After an event is dispatched, its target property cannot be changed, so you must create a new copy of the event for redispatching to work.  A value of <code>false</code> indicates failure or that <code>preventDefault()</code> was called on the event.",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.events.EventDispatcher#dispatchEvent()"]},
            {  "tagName": "param",
               "values": ["event The Event object that is dispatched into the event flow. If the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Returns <code>true</code> if the event was successfully dispatched."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "event", "type": "flash.events.Event"}]}
      ,
      { "type": "method",
        "qname": "hasEventListener",
        "namespace": "public",
        "bindable": ["propertyChange"],
        "details": [],
        "deprecated": {},
          "description": "Checks whether there are any event listeners registered for a specific type of event. This allows you to determine where an object has altered handling of an event type in the event flow hierarchy. For more information, see the flash.events.EventDispatcher class.   registered; <code>false</code> otherwise.",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.events.EventDispatcher#hasEventListener()"]},
            {  "tagName": "param",
               "values": ["type The type of event"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Returns <code>true</code> if a listener of the specified type is"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "type", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "willTrigger",
        "namespace": "public",
        "bindable": ["propertyChange"],
        "details": [],
        "deprecated": {},
          "description": "Checks whether an event listener is registered with this object or any of its ancestors for the specified event type. This method returns <code>true</code> if an event listener is triggered during any phase of the event flow when an event of the specified type is dispatched to this object or any of its descendants. For more information, see the flash.events.EventDispatcher class.   be triggered; <code>false</code> otherwise.",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.events.EventDispatcher#willTrigger()"]},
            {  "tagName": "param",
               "values": ["type The type of event."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Returns <code>true</code> if a listener of the specified type will"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "type", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "propertyChangeHandler",
        "namespace": "public",
        "bindable": ["propertyChange"],
        "details": [],
        "deprecated": {},
          "description": "Called when a complex property is updated.",
        "tags": [
        {  "tagName": "param",
               "values": ["event An event object that has changed."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.PropertyChangeEvent"}]}
      ]
  }
