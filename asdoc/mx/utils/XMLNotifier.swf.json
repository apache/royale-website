{ "type": "class",
  "qname": "mx.utils.XMLNotifier",
  "baseClassname": ""
  ,
    "description": "Used for watching changes to XML and XMLList objects. Those objects are not EventDispatchers, so if multiple elements want to watch for changes they need to go through this mechanism. Call <code>watchXML()</code>, passing in the same notification function that you would pass to XML.notification. Use <code>unwatchXML()</code> to remove that notification.",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "getInstance",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Get the singleton instance of the XMLNotifier.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The XMLNotifier object."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.utils.XMLNotifier",
          "params": []}
      ,
      { "type": "method",
        "qname": "mx.utils.XMLNotifier",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.  XMLNotifier is a singleton class, so you do not use the <code>new</code> operator to create multiple instances of it. Instead, call the static method <code>XMLNotifider.getInstance()</code> to get the sole instance of this class.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "x", "type": "XMLNotifierSingleton"}]}
      ,
      { "type": "method",
        "qname": "watchXML",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Given an XML or XMLList, add the notification function to watch for changes.",
        "tags": [
        {  "tagName": "param",
               "values": ["xml XML/XMLList object to watch.", "notification Function that needs to be called.", "optional UID for object"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "royaleignorecoercion",
               "values": ["XMLList"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "xml", "type": "Object"},
        { "name": "notifiable", "type": "mx.utils.IXMLNotifiable"},
        { "name": "uid", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "unwatchXML",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Given an XML or XMLList, remove the specified notification function.",
        "tags": [
        {  "tagName": "param",
               "values": ["xml XML/XMLList object to un-watch.", "notification Function notification function."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "royaleignorecoercion",
               "values": ["XMLList"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "xml", "type": "Object"},
        { "name": "notifiable", "type": "mx.utils.IXMLNotifiable"}]}
      ]
  ,
  "events": [
  ]
  }



