{ "type": "class",
  "qname": "mx.events.PropertyChangeEvent",
  "baseClassname": "org.apache.royale.events.Event"
  ,
    "description": "The PropertyChangeEvent class represents the event object passed to the event listener when one of the properties of an object has changed, and provides information about the change. This event is used by collection classes, and is the only way for collections to know that the data they represent has changed. This event is also used by the Flex data binding mechanism.",
  "tags": [
  {  "tagName": "see",
         "values": ["PropertyChangeEventKind"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "field",
        "qname": "PROPERTY_CHANGE",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The <code>PropertyChangeEvent.PROPERTY_CHANGE</code> constant defines the value of the <code>type</code> property of the event object for a <code>PropertyChange</code> event.  <p>The properties of the event object have the following values:</p> <table class=&quot;innertable&quot;> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>Determined by the constructor; defaults to false.</td></tr> <tr><td><code>cancelable</code></td><td>Determined by the constructor; defaults to false.</td></tr> <tr><td><code>kind</code></td><td>The kind of change; PropertyChangeEventKind.UPDATE or PropertyChangeEventKind.DELETE.</td></tr> <tr><td><code>oldValue</code></td><td>The original property value.</td></tr> <tr><td><code>newValue</code></td><td>The new property value, if any.</td></tr> <tr><td><code>property</code></td><td>The property that changed.</td></tr> <tr><td><code>source</code></td><td>The object that contains the property that changed.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["propertyChange"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "createUpdateEvent",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Returns a new PropertyChangeEvent of kind <code>PropertyChangeEventKind.UPDATE</code> with the specified properties. This is a convenience method.   specifying the property that changed,    with the specified properties.",
        "tags": [
        {  "tagName": "param",
               "values": ["source The object where the change occured.", "property A String, QName, or int", "oldValue The value of the property before the change.", "newValue The value of the property after the change."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["A newly constructed PropertyChangeEvent"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.events.PropertyChangeEvent",
          "params": [{ "name": "source", "type": "Object"},
        { "name": "property", "type": "Object"},
        { "name": "oldValue", "type": "Object"},
        { "name": "newValue", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "mx.events.PropertyChangeEvent",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.   up the display list hierarchy.  associated with the event can be prevented.  The possible values are <code>PropertyChangeEventKind.UPDATE</code>, <code>PropertyChangeEventKind.DELETE</code>, and <code>null</code>.  specifying the property that changed.",
        "tags": [
        {  "tagName": "param",
               "values": ["type The event type; indicates the action that triggered the event.", "bubbles Specifies whether the event can bubble", "cancelable Specifies whether the behavior", "kind Specifies the kind of change.", "property A String, QName, or int", "oldValue The value of the property before the change.", "newValue The value of the property after the change.", "source The object that the change occured on."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "type", "type": "String"},
        { "name": "bubbles", "type": "Boolean"},
        { "name": "cancelable", "type": "Boolean"},
        { "name": "kind", "type": "String"},
        { "name": "property", "type": "Object"},
        { "name": "oldValue", "type": "Object"},
        { "name": "newValue", "type": "Object"},
        { "name": "source", "type": "Object"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "kind",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "newValue",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "oldValue",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "property",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "source",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]}]
  ,
  "events": [
  ]
  }
