{ "type": "class",
  "qname": "mx.events.TweenEvent",
  "baseClassname": "org.apache.royale.events.Event"
  ,
    "description": "Represents event objects that are specific to Flex tween effects. Flex effects dispatch two types of tween events: <ul> <li><code>tweenUpdate</code></li> <li><code>tweenEnd</code></li> </ul>",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.effects.TweenEffect", "mx.effects.Tween"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]},
      {  "tagName": "royalesuppresspublicvarwarning",
         "values": []}  ],
  "members": [
  { "type": "field",
        "qname": "TWEEN_END",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The <code>TweenEvent.TWEEN_END</code> constant defines the value of the event object's <code>type</code> property for a <code>tweenEnd</code> event.  <p>The properties of the event object have the following values:</p> <table class=&quot;innertable&quot;> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>value</code></td><td>The value passed to the <code>onTweenEnd()</code> method.</td></tr> </table>",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.effects.Effect", "mx.effects.TweenEffect", "mx.events.EffectEvent"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["tweenEnd"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "TWEEN_START",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The <code>TweenEvent.TWEEN_START</code> constant defines the value of the event object's <code>type</code> property for a <code>tweenStart</code> event.  <p>The properties of the event object have the following values:</p> <table class=&quot;innertable&quot;> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>value</code></td><td>The value passed to the <code>onTweenUpdate()</code> method.</td></tr> </table>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["tweenStart"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "TWEEN_UPDATE",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The <code>TweenEvent.TWEEN_UPDATE</code> constant defines the value of the event object's <code>type</code> property for a <code>tweenUpdate</code> event.  <p>The properties of the event object have the following values:</p> <table class=&quot;innertable&quot;> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>value</code></td><td>The value passed to the <code>onTweenUpdate()</code> method.</td></tr> </table>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["tweenUpdate"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "mx.events.TweenEvent",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.   display list hierarchy.   <code>onTweenUpdate()</code> method; for a <code>tweenEnd</code> event, the value passed to the <code>onTweenEnd()</code> method.",
        "tags": [
        {  "tagName": "param",
               "values": ["type The event type; indicates the action that caused the event.", "bubbles Specifies whether the event can bubble up the", "cancelable Specifies whether the behavior associated with the event can be prevented.", "value For a <code>tweenStart</code> or <code>tweenUpdate</code> event, the value passed to the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "type", "type": "String"},
        { "name": "bubbles", "type": "Boolean"},
        { "name": "cancelable", "type": "Boolean"},
        { "name": "value", "type": "Object"}]}
      ,
      { "type": "field",
        "qname": "value",
        "return": "Object",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "For a <code>tweenStart</code> or <code>tweenUpdate</code> event, the value passed to the <code>onTweenUpdate()</code> method; for a <code>tweenEnd</code> event, the value passed to the <code>onTweenEnd()</code> method.  <p>For the exact value of this property, see the instance class for each tween effect.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.effects.effectClasses.ActionEffectInstance", "mx.effects.effectClasses.BlurInstance", "mx.effects.effectClasses.DissolveInstance", "mx.effects.effectClasses.FadeInstance", "mx.effects.effectClasses.GlowInstance", "mx.effects.effectClasses.MaskEffectInstance", "mx.effects.effectClasses.MoveInstance", "mx.effects.effectClasses.ResizeInstance", "mx.effects.effectClasses.RotateInstance", "mx.effects.effectClasses.ZoomInstance"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  ,
  "events": [
  ]
  }
