{ "type": "class",
  "qname": "mx.events.DragEvent",
  "baseClassname": "mx.events.MouseEvent"
  ,
    "description": "The DragEvent class represents event objects that are dispatched as part of a drag-and-drop operation.",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.managers.DragManager", "mx.core.DragSource", "mx.core.UIComponent"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]},
      {  "tagName": "royalesuppresspublicvarwarning",
         "values": []}  ],
  "members": [
  { "type": "field",
        "qname": "DRAG_COMPLETE",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The <code>DragEvent.DRAG_COMPLETE</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragComplete</code> event.  <p>The properties of the event object have the following values:</p> <table class=&quot;innertable&quot;> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>action</code></td><td>The action that caused the event: <code>DragManager.COPY</code>, <code>DragManager.LINK</code>, <code>DragManager.MOVE</code>, or <code>DragManager.NONE</code>.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dragInitiator</code></td><td>The component that initiated the drag.</td></tr> <tr><td><code>dragSource</code></td><td>The DragSource object containing the data being dragged.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["dragComplete"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "DRAG_DROP",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The <code>DragEvent.DRAG_DROP</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragDrop</code> event.  <p>The properties of the event object have the following values:</p> <table class=&quot;innertable&quot;> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>action</code></td><td>The action that caused the event: <code>DragManager.COPY</code>, <code>DragManager.LINK</code>, <code>DragManager.MOVE</code>, or <code>DragManager.NONE</code>.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dragInitiator</code></td><td>The component that initiated the drag.</td></tr> <tr><td><code>dragSource</code></td><td>The DragSource object containing the data being dragged.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["dragDrop"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "DRAG_ENTER",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The <code>DragEvent.DRAG_ENTER</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragEnter</code> event.  <p>The properties of the event object have the following values:</p> <table class=&quot;innertable&quot;> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>action</code></td><td>The action that caused the event, which is always <code>DragManager.MOVE</code>.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dragInitiator</code></td><td>The component that initiated the drag.</td></tr> <tr><td><code>dragSource</code></td><td>The DragSource object containing the data being dragged.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["dragEnter"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "DRAG_EXIT",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The <code>DragEvent.DRAG_EXIT</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragExit</code> event.  <p>The properties of the event object have the following values:</p> <table class=&quot;innertable&quot;> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>action</code></td><td>The action that caused the event: <code>DragManager.COPY</code>, <code>DragManager.LINK</code>, <code>DragManager.MOVE</code>, or <code>DragManager.NONE</code>.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dragInitiator</code></td><td>The component that initiated the drag.</td></tr> <tr><td><code>dragSource</code></td><td>The DragSource object containing the data being dragged.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["dragExit"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "DRAG_OVER",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The <code>DragEvent.DRAG_OVER</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragOver</code> event.  <p>The properties of the event object have the following values:</p> <table class=&quot;innertable&quot;> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>action</code></td><td>The action that caused the event: <code>DragManager.COPY</code>, <code>DragManager.LINK</code>, <code>DragManager.MOVE</code>, or <code>DragManager.NONE</code>.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dragInitiator</code></td><td>The component that initiated the drag.</td></tr> <tr><td><code>dragSource</code></td><td>The DragSource object containing the data being dragged.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["dragOver"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "DRAG_START",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The DragEvent.DRAG_START constant defines the value of the <code>type</code> property of the event object for a <code>dragStart</code> event.  <p>The properties of the event object have the following values:</p> <table class=&quot;innertable&quot;> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>action</code></td><td>The action that caused the event: <code>DragManager.COPY</code>, <code>DragManager.LINK</code>, <code>DragManager.MOVE</code>, or <code>DragManager.NONE</code>.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dragInitiator</code></td><td>The component that initiated the drag.</td></tr> <tr><td><code>dragSource</code></td><td>The DragSource object containing the data being dragged.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["dragStart"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "mx.events.DragEvent",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor. Normally called by the Flex control and not used in application code.     the drag.",
        "tags": [
        {  "tagName": "param",
               "values": ["type The event type; indicates the action that caused the event.", "bubbles Specifies whether the event can bubble up the display list hierarchy.", "cancelable Specifies whether the behavior associated with the event can be prevented.", "dragInitiator IUIComponent that specifies the component initiating", "dragSource A DragSource object containing the data being dragged.", "action The specified drop action, such as <code>DragManager.MOVE</code>.", "ctrlKey Indicates whether the <code>Ctrl</code> key was pressed.", "altKey Indicates whether the <code>Alt</code> key was pressed.", "shiftKey Indicates whether the <code>Shift</code> key was pressed."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "type", "type": "String"},
        { "name": "bubbles", "type": "Boolean"},
        { "name": "cancelable", "type": "Boolean"},
        { "name": "dragInitiator", "type": "mx.core.IUIComponent"},
        { "name": "dragSource", "type": "mx.core.DragSource"},
        { "name": "action", "type": "String"},
        { "name": "ctrlKey", "type": "Boolean"},
        { "name": "altKey", "type": "Boolean"},
        { "name": "shiftKey", "type": "Boolean"}]}
      ,
      { "type": "field",
        "qname": "action",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The requested action. One of <code>DragManager.COPY</code>, <code>DragManager.LINK</code>, <code>DragManager.MOVE</code>, or <code>DragManager.NONE</code>.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "dragInitiator",
        "return": "mx.core.IUIComponent",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The component that initiated the drag.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "dragSource",
        "return": "mx.core.DragSource",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The DragSource object containing the data being dragged.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  ,
  "events": [
  ]
  }
