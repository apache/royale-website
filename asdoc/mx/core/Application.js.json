{ "type": "class",
  "qname": "mx.core.Application",
  "baseClassname": "mx.core.Container"
  ,
    "description": "Flex defines a default, or Application, container that lets you start adding content to your application without explicitly defining another container. Flex creates this container from the <code>&lt;mx:Application&gt;</code> tag, the first tag in an MXML application file. While you might find it convenient to use the Application container as the only  container in your application, in most cases you explicitly define at least one more container before you add any controls to your application.  <p>Applications support a predefined plain style that sets a white background, left alignment, and removes all margins. To use this style, do the following:</p>  <pre>\\n &lt;mx:Application styleName=&quot;plain&quot; /&gt;\\n </pre>  <p>This is equivalent to setting the following style attributes:</p>  <pre>\\n backgroundColor=&quot;0xFFFFFF&quot;\\n horizontalAlign=&quot;left&quot;\\n paddingLeft=&quot;0&quot;\\n paddingTop=&quot;0&quot;\\n paddingBottom=&quot;0&quot;\\n paddingRight=&quot;0&quot;\\n </pre>   <p>The <code>&lt;mx:Application&gt;</code> tag inherits all of the tag attributes of its superclass and adds the following tag attributes:</p>  <pre>\\n &lt;mx:Application\\n <strong>Properties</strong>\\n application=&quot;<i>No default</i>&quot;\\n controlBar=&quot;null&quot;\\n frameRate=&quot;24&quot;\\n historyManagementEnabled=&quot;true|false&quot;\\n layout=&quot;vertical|horizontal|absolute&quot;\\n pageTitle&quot;<i>No default</i>&quot;\\n preloader=&quot;<i>No default</i>&quot;\\n resetHistory=&quot;false|true&quot;\\n scriptRecursionLimit=&quot;1000&quot;\\n scriptTimeLimit=&quot;60&quot;\\n usePreloader=&quot;true|false&quot;\\n viewSourceURL=&quot;&quot;\\n xmlns:<i>No default</i>=&quot;<i>No default</i>&quot;\\n \\n <strong>Styles</strong>\\n backgroundGradientAlphas=&quot;[ 1.0, 1.0 ]&quot;\\n backgroundGradientColors=&quot;undefined&quot;\\n horizontalAlign=&quot;center|left|right&quot;\\n horizontalGap=&quot;8&quot;\\n modalTransparency=&quot;0.5&quot;\\n modalTransparencyBlur=&quot;3&quot;\\n modalTransparencyColor=&quot;#DDDDDD&quot;\\n modalTransparencyDuration=&quot;100&quot;\\n paddingBottom=&quot;24&quot;\\n paddingTop=&quot;24&quot;\\n verticalAlign=&quot;top|bottom|middle&quot;\\n verticalGap=&quot;6&quot;\\n \\n <strong>Events</strong>\\n applicationComplete=&quot;<i>No default</i>&quot;\\n error=&quot;<i>No default</i>&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/SimpleApplicationExample.mxml"]},
      {  "tagName": "see",
         "values": ["mx.managers.CursorManager", "mx.managers.LayoutManager", "mx.managers.SystemManager", "flash.events.EventDispatcher"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
        "access": "read-only",
        "return": "Object",
        "qname": "application",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "A reference to the top-level application.  <p>In general, there can be a hierarchy of Application objects, because an Application can use a SWFLoader control to dynamically load another Application. The <code>parentApplication</code> property of a UIComponent can be used to access the sub-Application in which that UIComponent lives, and to walk up the hierarchy to the top-level Application.</p>  <p>This property has been deprecated starting in Flex4. Note that this property will still return applications of type mx.core.Application and mx.core.WindowedApplication as in previous versions. Starting in Flex 4 it will also return applications of type spark.components.Application or spark.components.WindowedApplication.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "mx.core.Application",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "method",
        "qname": "info",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An Object containing information generated by the compiler that is useful at startup time.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.2", "AIR 2.6"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "parameters",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The parameters property returns an Object containing name-value pairs representing the parameters provided to this Application.  <p>You can use a for-in loop to extract all the names and values from the parameters Object.</p>  <p>There are two sources of parameters: the query string of the Application's URL, and the value of the FlashVars HTML parameter (this affects only the main Application).</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "write-only",
        "return": "org.apache.royale.core.IValuesImpl",
        "qname": "valuesImpl",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The org.apache.royale.core.IValuesImpl that will determine the default values and other values for the application.  The most common choice is org.apache.royale.core.SimpleCSSValuesImpl.",
        "tags": [
        {  "tagName": "see",
               "values": ["org.apache.royale.core.SimpleCSSValuesImpl"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10.2", "AIR 2.6"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "layout",
        "namespace": "public",
        "bindable": ["layoutChanged"],
        "details": [],
        "deprecated": {},
          "description": "Specifies the layout mechanism used for this application. Applications can use <code>&quot;vertical&quot;</code>, <code>&quot;horizontal&quot;</code>, or <code>&quot;absolute&quot;</code> positioning. Vertical positioning lays out each child component vertically from the top of the application to the bottom in the specified order. Horizontal positioning lays out each child component horizontally from the left of the application to the right in the specified order. Absolute positioning does no automatic layout and requires you to explicitly define the location of each child component.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"vertical\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "String",
        "qname": "url",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The URL from which this Application's SWF file was loaded.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "createChildren",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": []}
      ,
      { "type": "field",
        "qname": "startupTimer",
        "return": "org.apache.royale.utils.Timer",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "method",
        "qname": "setActualSize",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": [{ "name": "w", "type": "Number"},
        { "name": "h", "type": "Number"}]}
      ,
      { "type": "method",
        "qname": "start",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["org.apache.royale.core.IBead"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "initializeApplication",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["org.apache.royale.core.IBead"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "keyDownForCapsLockHandler",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.KeyboardEvent"}]}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "org.apache.royale.core.IPopUpHostParent",
        "qname": "popUpParent",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Application can host popups but in the strandChildren",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.2", "AIR 2.6"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.managers.ISystemManager",
        "qname": "systemManager",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "org.apache.royale.core.IPopUpHost",
        "qname": "popUpHost",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]}]
  ,
  "events": [
  { "qname": "applicationComplete",
        "type": "mx.events.FlexEvent"
      ,
          "description": "Dispatched after the Application has been initialized, processed by the LayoutManager, and attached to the display list.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.FlexEvent.APPLICATION_COMPLETE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "error",
        "type": "flash.events.ErrorEvent"
      ,
          "description": "Dispatched when an HTTPService call fails.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["flash.events.ErrorEvent.ERROR"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
