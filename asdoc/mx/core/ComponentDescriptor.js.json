{ "type": "class",
  "qname": "mx.core.ComponentDescriptor",
  "baseClassname": ""
  ,
    "description": "ComponentDescriptor is the base class for the UIComponentDescriptor class, which encapsulates the information that you specified in an MXML tag for an instance of a visual component. In Flex, non-visual components are treated differently and do not have descriptors, but in a future version the ComponentDescriptor base class may be used for them as well.  <p>Most of the tags in an MXML file describe a tree of UIComponent objects. For example, the <code>&lt;mx:Application&gt;</code> tag represents a UIComponent object, and its child containers and controls are all UIComponent objects.</p>  <p>The MXML compiler compiles each of these MXML tags into a UIComponentDescriptor instance. To be precise, the MXML compiler autogenerates an ActionScript data structure which is a tree of UIComponentDescriptor objects.</p>  <p>At runtime, the <code>createComponentsFromDescriptors()</code> method of the Container class uses the information in the UIComponentDescriptor objects in the container's <code>childDescriptors</code> array to create the actual UIComponent objects that are the container's children, plus deeper descendants as well. Depending on the value of the container's <code>creationPolicy</code>, property, the descendants might be created at application startup, when some part of the component is about to become visible, or when the application developer manually calls the <code>createComponentsFromDescriptors()</code> method.</p>  <p>You do not typically create ComponentDescriptor or UIComponentDescriptor instances yourself; you can access the ones that the MXML compiler autogenerates, via the <code>childDescriptors</code> array of the Container class.</p>",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.core.UIComponentDescriptor", "mx.core.Container#childDescriptors", "mx.core.Container#creationPolicy", "mx.core.Container#createComponentsFromDescriptors()"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.core.ComponentDescriptor",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.  for the properties of the ComponentDescriptor object, such as its <code>type</code>, <code>id</code>, <code>propertiesFactory</code> and <code>events</code>.",
        "tags": [
        {  "tagName": "param",
               "values": ["descriptorProperties An Object containing name/value pairs"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "descriptorProperties", "type": "Object"}]}
      ,
      { "type": "field",
        "qname": "document",
        "return": "Object",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A reference to the document Object in which the component is to be created.",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.core.IUIComponent#document"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "events",
        "return": "Object",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An Object containing name/value pairs for the component's event handlers, as specified in MXML.  <p>For example, if you write</p>  <pre>\\n &lt;mx:DataGrid id=&quot;dg&quot; initialize=&quot;fetchData(); initDataGrid();&quot;  change=&quot;changeHandler(event);&quot;/&gt;\\n </pre>  <p>then the descriptor's <code>events</code> property is the Object</p>  <pre>\\n { initialize: &quot;__dg_initialize&quot;, change: &quot;__dg_change&quot; }\\n </pre>  <p>The <code>event</code>property is <code>null</code> if no MXML event handlers were specified for the component</p>  <p>The strings <code>&quot;__dg_initialize&quot;</code> and <code>&quot;__dg_change&quot;</code> are the names of event handler methods that the MXML compiler autogenerates. The body of these methods contain the ActionScript statements that you specified as the values of the event attributes. For example, the autogenerated <code>initialize</code> handler is</p>  <pre>\\n public function __dg_initialize(event:mx.events.FlexEvent):void\\n {\\n fetchData();\\n initDataGrid();\\n }\\n </pre>  <p>You should not assume that the autogenerated event handlers will always be specified by name; this may change in a future version of Flex.</p>  <p>This property is used by the Container method <code>createComponentsFromDescriptors()</code> to register the autogenerated event handlers using the <code>addEventListener()</code> method.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "id",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The identifier for the component, as specified in MXML.  <p>For example, if you write</p>  <pre>\\n &lt;mx:TextInput id=&quot;firstName&quot; text=&quot;Enter your first name here&quot;/&gt;\\n </pre>  <p>then the descriptor's <code>id</code> property is the String <code>&quot;firstName&quot;</code>.</p>  <p>The <code>id</code> property is <code>null</code> if no MXML id was specified for the component.</p>  <p>The value of the <code>id</code> property becomes the name of a public variable in the MXML document object, autogenerated by the MXML compiler. The value of this variable is a reference to the UIComponent object created from this descriptor. This is why you can, for example, reference the TextInput control's <code>text</code> property as <code>firstName.text</code> from anywhere within the document containing this TextInput instance.</p>  <p>If an <code>id</code> is specified, and it isn't the empty string, it also becomes the <code>name</code> of the DisplayObject object. If an <code>id</code> is not specified or is empty, the DisplayObject object's <code>name</code> remains an autogenerated string, such as <code>&quot;Button3&quot;</code>, as returned by the <code>NameUtil.createUniqueName()</code> method. The <code>name</code> is used in generating the string returned by the <code>toString()</code> method. It can also be used to find the component from its parent by calling <code>getChildByName()</code>.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.display.DisplayObject#name"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Object",
        "qname": "properties",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An Object containing name/value pairs for the component's properties, as specified in MXML.  <p>For example, if you write</p>  <pre>\\n &lt;mx:TextInput width=&quot;150&quot; text=&quot;Hello&quot;/&gt;\\n </pre>  <p>then the descriptor's <code>properties</code> property is the Object</p>  <pre>\\n { width: 150, text: &quot;Hello&quot; }\\n </pre>  <p>The <code>properties</code> property is <code>null</code> if no MXML properties were specified for the component. In this case, the component will use default property values.</p>  <p> This Object is produced by calling the function specified by the <code>propertiesFactory</code> property, and then cached for subsequent access. However, when a Repeater produces multiple instances of a component from the same descriptor, a fresh copy of the <code>properties</code> Object should be produced for each component instance so that they don't share property values which are Arrays or Object references. The Repeater accomplishes this by calling the <code>invalidateProperties()</code> method on the descriptor.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#propertiesFactory", "#invalidateProperties()"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "propertiesFactory",
        "return": "Function",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A Function that returns an Object containing name/value pairs for the component's properties, as specified in MXML.  <p>For example, if you write</p>  <pre>\\n &lt;mx:TextInput width=&quot;150&quot; text=&quot;Hello&quot;&gt;\\n </pre>  <p>then the descriptor's <code>propertiesFactory</code> property is the Function:</p>  <pre>\\n function():Object { return { width: 150, text: &quot;Hello&quot; }; }\\n </pre>  <p>The <code>propertiesFactory</code>property is <code>null</code> if no MXML properties were specified for the component. In this case, the component will use default property values.</p>  <p>The reason that <code>propertyFactory</code> is a Function returning an Object rather than an actual Object is to allow the tree of ComponentDescriptor objects to &quot;unfold&quot; incrementally. If all the descriptors in the descriptor tree for the document were created at launch time, the time to launch would be greater.</p>  <p>The <code>properties</code> property returns a cached Object that was produced by this factory function.</p>  <p>Note: Event handlers such as <code>click=&quot;doSomething();&quot;</code> appear in the <code>events</code> Object, not in the <code>properties</code> Object.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#properties"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "type",
        "return": "Class",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The Class of the component, as specified in MXML.  <p>For example, if you write</p>  <pre>\\n &lt;mx:TextInput/&gt;\\n </pre>  <p>then the descriptor's <code>type</code> property the Class mx.controls.TextInput.</p>  <p>The property is never <code>null</code> for the ComponentDescriptor objects created by the MXML compiler, because every MXML tag has a tag name such as mx:TextInput.</p>  <p>The mapping between an MXML tag and its corresponding class is determined by the XML namespace and the &quot;manifest&quot; file, if any, that is associated with that namespace. For example, the standard Flex namespace <code>http://www.adobe.com/2006/mxml</code> represented by the mx: prefix is associated (in the flex-config.xml file) with the manifest file mxml-manifest.xml, and this file has the tag</p>  <pre>\\n &lt;component id=&quot;TextInput&quot; class=&quot;mx.controls.TextInput&quot;/&gt;\\n </pre>  <p>which maps the tag name mx:TextInput to the Class mx.controls.TextInput. Note that the use of a manifest file allows components in single XML namespace to map to classes in multiple ActionScript packages.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "invalidateProperties",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Invalidates the cached <code>properties</code> property. The next time you read the <code>properties</code> property, the properties are regenerated from the function specified by the value of the <code>propertiesFactory</code> property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "toString",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the string &quot;ComponentDescriptor_&quot; plus the value of the <code>id</code> property.  <code>id</code> property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The string \"ComponentDescriptor_\" plus the value of the"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": []}
      ]
  ,
  "events": [
  ]
  }
