{ "type": "interface",
  "qname": "mx.core.IChildList",
"baseInterfaceNames": [
]
,
    "description": "The IChildList interface defines the properties and methods for accessing and manipulating child lists, which are subsets of a DisplayObjectContainer's children.  <p>As an example, consider the Container class. It overrides DisplayObjectContainer APIs such as the <code>numChildren</code> and <code>getChildAt()</code> methods to access only &quot;content&quot; children, which are the controls and other containers that you put inside it. But a Container can also have additional children created automatically by the framework, such as a background or border skin and scrollbars. So Container exposes a property called <code>rawChildren</code> of type IChildList, which lets you access all its children, not just the content children.</p>  <p>As another example, the SystemManager class is a DisplayObjectContainer whose children are partitioned into various layers: normal children like the Application are on the bottom, popups above them, tooltips above them, and cursors on the top. The SystemManager class has properties named <code>popUpChildren</code>, <code>toolTipChildren</code>, and <code>cursorChildren</code> which let you access these layers, and the type of each of these properties is IChildList. Therefore, you can count the number of popups using the <code>systemManager.popUpChildren.numChildren</code> property, insert another DisplayObject into the tooltip layer using the <code>systemManager.toolTipChildren.addChild()</code> method, and so on.</p>",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.core.Container#rawChildren", "mx.managers.SystemManager#rawChildren", "mx.managers.SystemManager#popUpChildren", "mx.managers.SystemManager#toolTipChildren", "mx.managers.SystemManager#cursorChildren"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
    "access": "read-only",
    "return": "int",
    "qname": "numChildren",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The number of children in this child list.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "method",
    "qname": "addChild",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Adds a child DisplayObject after the end of this child list.  <p>Calling <code>childList.addChild(child)</code> is the same as calling <code>childList.addChild(child, childList.numChildren)</code> After it has been added, its index of the new child will be <code>(child.numChildren - 1)</code></p>   as the argument passed in.",
    "tags": [
    {  "tagName": "param",
           "values": ["child The DisplayObject to add as a child."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["The child that was added; this is the same"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "mx.core.IUIComponent",
      "params": [{ "name": "child", "type": "mx.core.IUIComponent"}]}
  ,
  { "type": "method",
    "qname": "addChildAt",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Adds a child DisplayObject to this child list at the index specified. An index of 0 represents the beginning of the DisplayList, and an index of <code>numChildren</code> represents the end.  <p>Adding a child anywhere except at the end of a child list will increment the indexes of children that were previously at that index or at higher indices.</p>    as the <code>child</code> argument passed in.",
    "tags": [
    {  "tagName": "param",
           "values": ["child The DisplayObject to add as a child.", "index The index to add the child at."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["The child that was added; this is the same"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "mx.core.IUIComponent",
      "params": [{ "name": "child", "type": "mx.core.IUIComponent"},
    { "name": "index", "type": "int"}]}
  ,
  { "type": "method",
    "qname": "removeChild",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Removes the specified child DisplayObject from this child list.  <p>Removing a child anywhere except from the end of a child list will decrement the indexes of children that were at higher indices.</p>  <p>The removed child will have its parent set to null and will be garbage collected if no other references to it exist.</p>   as the argument passed in.",
    "tags": [
    {  "tagName": "param",
           "values": ["child The DisplayObject to remove."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["The child that was removed; this is the same"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "mx.core.IUIComponent",
      "params": [{ "name": "child", "type": "mx.core.IUIComponent"}]}
  ,
  { "type": "method",
    "qname": "removeChildAt",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Removes the child DisplayObject at the specified index from this child list.  <p>Removing a child anywhere except from the end of a child list will decrement the indexes of children that were at higher indices.</p>  <p>The removed child will have its parent set to null and will be garbage collected if no other references to it exist.</p>",
    "tags": [
    {  "tagName": "param",
           "values": ["index The child index of the DisplayObject to remove."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["The child that was removed."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "mx.core.IUIComponent",
      "params": [{ "name": "index", "type": "int"}]}
  ,
  { "type": "method",
    "qname": "getChildAt",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Gets the child DisplayObject at the specified index in this child list.  that specifies the index of a child in this child list.",
    "tags": [
    {  "tagName": "param",
           "values": ["index An integer from 0 to <code>(numChildren - 1)</code>"]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["The child at the specified index."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "mx.core.IUIComponent",
      "params": [{ "name": "index", "type": "int"}]}
  ,
  { "type": "method",
    "qname": "getChildByName",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Gets the child DisplayObject with the specified name in this child list.",
    "tags": [
    {  "tagName": "param",
           "values": ["name The name of the child to return."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["The child with the specified name."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "mx.core.IUIComponent",
      "params": [{ "name": "name", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "getChildIndex",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Gets the index of a specific child in this child list.  <p>The first child in the child list has an index of 0, the second child has an index of 1, and the last child has an index of <code>(numChildren - 1)</code>.</p>  <p>If <code>getChildIndex(myChild)</code> returns 5, then <code>myView.getChildAt(5)</code> returns <code>myChild</code>.</p>  <p>If you add a child by calling the <code>addChild()</code> method, the new child's index is equal to the largest index among the existing children plus one.</p>  <p>You can insert a child at a specified index by using the <code>addChildAt()</code> method In that case the children previously at that index and higher indices have their index increased by 1 so that all children are indexed from 0 to <code>(numChildren - 1)</code>.</p>  <p>If you remove a child by calling the <code>removeChild()</code> or <code>removeChildAt()</code> method, then the children at higher indices have their index decreased by 1 so that all children are indexed from 0 to <code>(numChildren - 1)</code>.</p>  <p>If you change a child's index by calling the <code>setChildIndex()</code> method, then the children between the old index and the new index, inclusive, have their indexes adjusted so that all children are indexed from 0 to <code>(numChildren - 1)</code>.</p>   between 0 and <code>(numChildren - 1)</code>.",
    "tags": [
    {  "tagName": "param",
           "values": ["child The child whose index to get."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["The index of the child, which is an integer"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "int",
      "params": [{ "name": "child", "type": "mx.core.IUIComponent"}]}
  ,
  { "type": "method",
    "qname": "setChildIndex",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Changes the index of a particular child in this child list. See the <code>getChildIndex()</code> method for a description of the child's index.   This must be an integer between zero and <code>(numChildren - 1)</code>.",
    "tags": [
    {  "tagName": "param",
           "values": ["child The child whose index to set.", "newIndex The new index for the specified child."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "child", "type": "mx.core.IUIComponent"},
    { "name": "newIndex", "type": "int"}]}
  ,
  { "type": "method",
    "qname": "contains",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Determines if a DisplayObject is in this child list, or is a descendant of an child in this child list.   or is a descendant of an child in this child list; <code>false</code> otherwise.",
    "tags": [
    {  "tagName": "param",
           "values": ["child The DisplayObject to test."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["<code>true</code> if the DisplayObject is in this child list"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Boolean",
      "params": [{ "name": "child", "type": "org.apache.royale.core.IUIBase"}]}
  ]
  }
