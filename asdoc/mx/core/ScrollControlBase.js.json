{ "type": "class",
  "qname": "mx.core.ScrollControlBase",
  "baseClassname": "mx.core.UIComponent"
  ,
    "description": "The ScrollControlBase class is the base class for controls with scroll bars. The user interacts with the scroll bar or the developer accesses methods and properties that alter the viewable area. The ScrollControlBase takes a single child object and positions and masks or sizes that object to display the viewable content. All items to be scrolled must be children of that content object   <p>The <code>&lt;ScrollControlBase&gt;</code> tag inherits all the tag attributes of its superclass, and adds the following tag attributes:</p>  <pre>\\n &lt;mx:<i>tagname</i>\\n <b>Properties</b>\\n border=&quot;<i>object of border skin style</i>&quot;\\n horizontalScrollPolicy=&quot;off|on|auto&quot;\\n horizontalScrollPosition=&quot;0&quot;\\n liveScrolling=&quot;true|false&quot;\\n maxHorizontalScrollPosition=&quot;NaN&quot;\\n maxVerticalScrollPosition=&quot;NaN&quot;\\n scrollTipFunction=&quot;undefined&quot;\\n showScrollTips=&quot;false|true&quot;\\n verticalScrollPolicy=&quot;auto|off|on&quot;\\n verticalScrollPosition=&quot;0&quot;\\n <b>Styles</b>\\n backgroundAlpha=&quot;1.0&quot;\\n backgroundColor=&quot;undefined&quot;\\n backgroundImage=&quot;undefined&quot;\\n backgroundSize=&quot;auto&quot;\\n borderColor=&quot;0xAAB3B3&quot;\\n borderSides=&quot;left top right bottom&quot;\\n borderSkin=&quot;ClassReference('mx.skins.halo.HaloBorder')&quot;\\n borderStyle=&quot;inset&quot;\\n borderThickness=&quot;1&quot;\\n color=&quot;0x0B333C&quot;\\n cornerRadius=&quot;0&quot;\\n disabledColor=&quot;0xAAB3B3&quot;\\n dropShadowColor=&quot;0x000000&quot;\\n dropShadowEnabled=&quot;false&quot;\\n fontFamily=&quot;Verdana&quot;\\n fontSize=&quot;10&quot;\\n fontStyle=&quot;normal|italic&quot;\\n fontWeight=&quot;normal|bold&quot;\\n horizontalScrollBarStyleName=&quot;&quot;\\n leading=&quot;2&quot;\\n shadowDirection=&quot;center&quot;\\n shadowDistance=&quot;2&quot;\\n textAlign=&quot;<i>value; see detail.</i>&quot;\\n textDecoration=&quot;none|underline&quot;\\n textIndent=&quot;0&quot;\\n verticalScrollBarStyleName=&quot;&quot;\\n \\n <b>Events</b>\\n scroll=&quot;<i>No default</i>&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "helpid",
         "values": ["3270"]},
      {  "tagName": "tiptext",
         "values": ["base class for views/containers that support scrolling"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.core.ScrollControlBase",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "field",
        "qname": "_maxHorizontalScrollPosition",
        "return": "Number",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "field",
        "qname": "scrollAreaChanged",
        "return": "Boolean",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that the scrolling area changed due to the appearance or disappearance of scrollbars.  Used by most layout methods to re-adjust the scrolling properties again.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "uint",
        "qname": "contentBackgroundColor",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "borderVisible",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "field",
        "qname": "border",
        "return": "mx.core.IFlexDisplayObject",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-only",
        "return": "mx.core.EdgeMetrics",
        "qname": "borderMetrics",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns an EdgeMetrics object that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>. The value of each property is equal to the thickness of one side of the border, expressed in pixels.  and bottom properties.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["EdgeMetrics object with the left, right, top,"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "horizontalScrollPosition",
        "namespace": "public",
        "bindable": ["viewChanged","scroll"],
        "details": [],
        "deprecated": {},
          "description": "The offset into the content from the left edge.  This can be a pixel offset in some subclasses or some other metric like the number of columns in a DataGrid or number of items in a HorizontalList or TileList.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "horizontalScrollPolicy",
        "namespace": "public",
        "bindable": ["horizontalScrollPolicyChanged"],
        "details": [],
        "deprecated": {},
          "description": "A property that indicates whether the horizontal scroll bar is always on, always off, or automatically changes based on the parameters passed to the <code>setScrollBarProperties()</code> method. Allowed values are <code>ScrollPolicy.ON</code>, <code>ScrollPolicy.OFF</code>, and <code>ScrollPolicy.AUTO</code>. MXML values can be <code>&quot;on&quot;</code>, <code>&quot;off&quot;</code>, and <code>&quot;auto&quot;</code>.  <p>Setting this property to <code>ScrollPolicy.OFF</code> for ListBase subclasses does not affect the <code>horizontalScrollPosition</code> property; you can still scroll the contents programmatically.</p>  <p>Note that the policy can affect the measured size of the component If the policy is <code>ScrollPolicy.AUTO</code> the scrollbar is not factored in the measured size.  This is done to keep the layout from recalculating when the scrollbar appears.  If you know that you will have enough data for scrollbars you should set the policy to <code>ScrollPolicy.ON</code>.  If you don't know, you may need to set an explicit width or height on the component to allow for scrollbars to appear later.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["ScrollPolicy.OFF"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "maxHorizontalScrollPosition",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The maximum value for the <code>horizontalScrollPosition</code> property. Note that this is not the width of the content because the <code>maxHorizontalScrollPosition</code> property contains the width of the content minus the width of the displayable area.  <p>In most components, the value of the <code>maxHorizontalScrollPosition</code> property is computed from the data and size of component, and must not be set by the application code.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "maxVerticalScrollPosition",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The maximum value for the <code>verticalScrollPosition</code> property. Note that this is not the height of the content because the <code>maxVerticalScrollPosition</code> property contains the height of the content minus the height of the displayable area.  <p>The value of the <code>maxVerticalScrollPosition</code> property is computed from the data and size of component, and must not be set by the application code.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "verticalScrollPosition",
        "namespace": "public",
        "bindable": ["viewChanged","scroll"],
        "details": [],
        "deprecated": {},
          "description": "The offset into the content from the top edge.  This can be a pixel offset in some subclasses or some other metric like number of lines in a List or number of tiles in a TileList.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "verticalScrollPolicy",
        "namespace": "public",
        "bindable": ["verticalScrollPolicyChanged"],
        "details": [],
        "deprecated": {},
          "description": "A property that indicates whether the vertical scroll bar is always on, always off, or automatically changes based on the parameters passed to the <code>setScrollBarProperties()</code> method. Allowed values are <code>ScrollPolicy.ON</code>, <code>ScrollPolicy.OFF</code>, and <code>ScrollPolicy.AUTO</code>. MXML values can be <code>&quot;on&quot;</code>, <code>&quot;off&quot;</code>, and <code>&quot;auto&quot;</code>.  <p>Setting this property to <code>ScrollPolicy.OFF</code> for ListBase subclasses does not affect the <code>verticalScrollPosition</code> property; you can still scroll the contents programmatically.</p>  <p>Note that the policy can affect the measured size of the component If the policy is <code>ScrollPolicy.AUTO</code> the scrollbar is not factored in the measured size.  This is done to keep the layout from recalculating when the scrollbar appears.  If you know that you will have enough data for scrollbars you should set the policy to <code>ScrollPolicy.ON</code>.  If you don't know, you may need to set an explicit width or height on the component to allow for scrollbars to appear later.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["ScrollPolicy.AUTO"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "textDecoration",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "method",
        "qname": "addedToParent",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "getHorizontalScrollElement",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "return": "HTMLElement",
          "params": []}
      ,
      { "type": "method",
        "qname": "getVerticalScrollElement",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "return": "HTMLElement",
          "params": []}
      ]
  ,
  "events": [
  { "qname": "scroll",
        "type": "mx.events.ScrollEvent"
      ,
          "description": "Dispatched when the content is scrolled.",
        "tags": [
        {  "tagName": "helpid",
               "values": ["3269"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.ScrollEvent.SCROLL"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
