{ "type": "class",
  "qname": "mx.core.UIComponentDescriptor",
  "baseClassname": "mx.core.ComponentDescriptor"
  ,
    "description": "A UIComponentDescriptor instance encapsulates the information that you specified in an MXML tag for an instance of a visual component.  <p>Most of the tags in an MXML file describe a tree of UIComponent objects. For example, the <code>&lt;mx:Application&gt;</code> tag represents a UIComponent object, and its child containers and controls are all UIComponent objects.</p>  <p>The MXML compiler compiles each of these MXML tags into a UIComponentDescriptor instance. To be precise, the MXML compiler autogenerates an ActionScript data structure which is a tree of UIComponentDescriptor objects.</p>  <p>At runtime, the <code>createComponentsFromDescriptors()</code> method of the Container class uses the information in the UIComponentDescriptor objects in the container's <code>childDescriptors</code> array to create the actual UIComponent objects that are the container's children, plus deeper descendants as well. Depending on the value of the container's <code>creationPolicy</code>, property, the descendants might be created at application startup, when some part of the component is about to become visible, or when the application developer manually calls the <code>createComponentsFromDescriptors()</code> method.</p>  <p>You do not typically create UIComponentDescriptor instances yourself; you can access the ones that the MXML compiler autogenerates via the <code>childDescriptors</code> array of the Container class.</p>",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.core.Container#childDescriptors", "mx.core.Container#creationPolicy", "mx.core.Container#createComponentsFromDescriptors()"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.core.UIComponentDescriptor",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.  for the  properties of the UIComponentDescriptor object, such as its <code>type</code>, <code>id</code>, <code>propertiesFactory</code>, <code>events</code>, <code>stylesFactory</code>, and <code>effects</code>.",
        "tags": [
        {  "tagName": "param",
               "values": ["descriptorProperties An Object containing name/value pairs"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "descriptorProperties", "type": "Object"}]}
      ,
      { "type": "field",
        "qname": "effects",
        "return": "Array",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An Array containing the effects for the component, as specified in MXML.  <p>For example, if you write the following code:</p>  <pre>\\n &lt;mx:TextInput showEffect=&quot;Fade&quot; hideEffect=&quot;Fade&quot;/&gt;</pre>  <p>The descriptor's <code>effects</code> property is the Array <code>[ &quot;showEffect&quot;, &quot;hideEffect&quot; ]</code>.</p>  <p>The <code>effects</code>property is <code>null</code> if no MXML effects were specified for the component.</p>  <p>Note that the values of the effect attributes are not specified in this property. Instead, effects are treated like styles and therefore are include in the <code>stylesFactory</code> property. The <code>effect</code> Array simply keeps track of which styles in the <code>stylesFactory</code> are actually effects.</p>  <p>This property is used by the Container method <code>createComponentsFromDescriptors()</code> to register the effects with the EffectManager.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "stylesFactory",
        "return": "Function",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A Function that constructs an Object containing name/value pairs for the instance styles for the component, as specified in MXML.  <p>For example, if you write the following code:</p>  <pre>\\n &lt;mx:TextInput borderColor=&quot;0x888888&quot; color=&quot;0xDDDDDD&quot;/&gt;</pre>  <p>Then the descriptors' <code>stylesFactory</code> property is the Function:</p>  <pre>\\n function():void { this.borderColor = 0x888888; this.color = 0xDDDDDD };</pre>  <p>The <code>stylesFactory</code> property is <code>null</code> if no MXML styles were specified for the component instance.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  ,
  "events": [
  ]
  }
