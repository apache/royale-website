{ "type": "class",
  "qname": "mx.core.BitmapAsset",
  "baseClassname": "mx.display.Bitmap"
  ,
    "description": "BitmapAsset is a subclass of the flash.display.Bitmap class which represents bitmap images that you embed in a Flex application. It implements the IFlexDisplayObject interface, which makes it possible for an embedded bitmap image to be displayed in an Image control, or to be used as a container background or a component skin.  <p>The bitmap image that you're embedding can be in a JPEG, GIF, or PNG file. You can also embed a bitmap symbol that is in a SWF file produced by Flash. In each of these cases, the MXML compiler autogenerates a class that extends BitmapAsset to represent the embedded bitmap image.</p>  <p>You don't generally have to use the BitmapAsset class directly when you write a Flex application. For example, you can embed a GIF file and display the image in an Image control by writing the gollowing:</p>  <pre>\\n &lt;mx:Image id=&quot;logo&quot; source=&quot;&#64;Embed(source='Logo.gif')&quot;/&gt;</pre>  <p>or use it as the application's background image in CSS syntax by writing</p>  <pre>\\n &lt;fx:Style&gt;\\n &#64;namespace mx &quot;library://ns.apache.org/royale/mx&quot;\\n mx|Application {\\n backgroundImage: Embed(source=&quot;Logo.gif&quot;)\\n }\\n &lt;fx:Style/&gt;</pre>  <p>without having to understand that the MXML compiler has created a subclass of BitmapAsset for you.</p>  <p>However, it may be useful to understand what is happening at the ActionScript level. To embed a bitmap image in ActionScript, you declare a variable of type Class, and put <code>[Embed]</code> metadata on it. For example, you embed a GIF file like this:</p>  <pre>\\n [Bindable]\\n [Embed(source=&quot;Logo.gif&quot;)]\\n private var logoClass:Class;</pre>  <p>The MXML compiler sees the .gif extension, transcodes the GIF data into the bitmap format that the player uses, autogenerates a subclass of the BitmapAsset class, and sets your variable to be a reference to this autogenerated class. You can then use this class reference to create instances of the BitmapAsset using the <code>new</code> operator, and you can use APIs of the BitmapAsset class on them:</p>  <pre>\\n var logo:BitmapAsset = BitmapAsset(new logoClass());\\n logo.bitmapData.noise(4);</pre>  <p>However, you rarely need to create BitmapAsset instances yourself because image-related properties and styles can simply be set to an image-producing class, and components will create image instances as necessary. For example, to display this image in an Image control, you can set the Image's <code>source</code> property to <code>logoClass</code>. In MXML you could do this as follows:</p>  <pre>\\n &lt;mx:Image id=&quot;logo&quot; source=&quot;{logoClass}&quot;/&gt;</pre>",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.core.BitmapAsset",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "return": "",
          "params": [{ "name": "bitmapData", "type": "flash.display.BitmapData"},
        { "name": "pixelSnapping", "type": "String"},
        { "name": "smoothing", "type": "Boolean"}]}
      ]
  }
