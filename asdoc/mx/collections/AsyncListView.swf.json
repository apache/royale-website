{ "type": "class",
  "qname": "mx.collections.AsyncListView",
  "baseClassname": "org.apache.royale.events.EventDispatcher"
  ,
    "description": "The AsyncListView class is an implementation of the IList interface that handles ItemPendingErrors errors thrown by the <code>getItemAt()</code>, <code>removeItemAt()</code>, and <code>toArray()</code> methods.  <p>The <code>getItemAt()</code> method handles ItemPendingErrors by returning a provisional &quot;pending&quot; item until the underlying request succeeds or fails.  The provisional item is produced by calling the function specified by the <code>createPendingItemFunction</code> property. .  If the request succeeds, the actual item replaces the provisional one. If it fails,  the provisional item is replaced with the item returned by calling the function specified by the <code>createFailedItemFunction</code> property.</p>  <p>This class delegates the IList methods and properties to its <code>list</code>. If a list isn't specified, methods that mutate the collection are no-ops, and methods that query the collection return an empty value, such as null or zero as appropriate.</p>  <p>This class is intended to be used with Spark components based on DataGroup, such as List and ComboBox. The Spark classes do not provide intrinsic support for ItemPendingError handling.</p>  <p>AsyncListView does not support re-insertion of pending or failed items.  Once a failed or pending item is removed, its connection to a pending request for data is lost.  Using drag and drop to move a pending item in an ASyncListView, or sorting an ASyncListView that contains pending or failed items, is not supported because these operations remove and then re-insert list items.</p>   <p>The <code>&lt;mx:AsyncListView&gt;</code> tag inherits all the attributes of its superclass, and adds the following attributes:</p>  <pre>\\n &lt;mx:AsyncListView\\n <b>Properties</b>\\n createFailedItemFunction=&quot;null&quot;\\n createPendingItemFunction=&quot;null&quot;\\n list=&quot;null&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.collections.AsyncListView",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "param",
               "values": ["list Initial value of the list property, the IList we're delegating to."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "list", "type": "mx.collections.IList"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.collections.IList",
        "qname": "list",
        "namespace": "public",
        "bindable": ["listChanged"],
        "details": [],
        "deprecated": {},
          "description": "The IList object that this collection wraps. That means the object to which all of the IList methods are delegated.  <p>If this property is null, the IList mutation methods, such as <code>setItemAt()</code>, are no-ops. The IList query methods, such <code>getItemAt()</code>, return null or zero (-1 for <code>getItemIndex()</code>), as appropriate.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Function",
        "qname": "createPendingItemFunction",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A callback function used to create a provisional item when the initial request causes an <code>ItemPendingError</code> to be thrown. If the request eventually succeeds, the provisional item is automatically replaced by the actual item.  If the request fails, then the item is replaced with one created with the callback function specified by the <code>createFailedItemFunction</code> property.  <p>The value of this property must be a function with two parameters: the index of the requested data provider item, and the ItemPendingError itself. In most cases, the second parameter can be ignored. The following example shows an implementation of the callback function:  <pre>\\n function createPendingItem(index:int, ipe:ItemPendingError):Object\\n {\\n return &quot;[&quot; + index + &quot;request is pending...]&quot;;\\n }\\n </pre> </p>  <p>Setting this property does not affect provisional pending items that were already created.  Setting this property to null prevents provisional pending items from being created.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["A function that unconditionally returns null."]},
            {  "tagName": "see",
               "values": ["#getItemAt()", "#createFailedItemFunction", "mx.collections.errors.ItemPendingError"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Function",
        "qname": "createFailedItemFunction",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A callback function used to create a substitute item when a request which had caused an <code>ItemPendingError</code> to be thrown, subsequently fails.  The existing item, typically a pending item created by the callback function specified by the <code>createPendingItemFunction()</code> property, is replaced with the failed item.  <p>The value of this property must be a function with two parameters: the index of the requested item, and the failure &quot;info&quot; object, which is passed along from the IResponder <code>fault()</code> method. In most cases you can ignore the second parameter. Shown below is an example implementation of the callback function:</p>  <pre>\\n function createFailedItem(index:int, info:Object):Object\\n {\\n return &quot;[&quot; + index + &quot;request failed]&quot;;\\n }\\n </pre>   <p>Setting this property does not affect failed items that were already created.  Setting this property to null prevents failed items from being created. </p>",
        "tags": [
        {  "tagName": "default",
               "values": ["A function that unconditionally returns null."]},
            {  "tagName": "see",
               "values": ["#getItemAt()", "#createPendingItemFunction", "mx.rpc.IResponder#fault"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "length",
        "namespace": "public",
        "bindable": ["collectionChange"],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "addItem",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "addItemAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"},
        { "name": "index", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "getItemAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the value of <code>list.getItemAt(index)</code>.  <p>This method catches ItemPendingErrors (IPEs) generated as a consequence of calling <code>getItemAt()</code>.  If an IPE is thrown, an <code>IResponder</code> is added to the IPE and a provisional &quot;pending&quot; item, created with the <code>createPendingItemFunction</code> is returned.   If the underlying request eventually succeeds, the pending item is replaced with the real item.  If it fails, the pending item is replaced with a value produced by calling <code>createFailedItemFunction</code>.</p>   and number of items to fetch during the request if the item is not local.",
        "tags": [
        {  "tagName": "see",
               "values": ["#createPendingItemFunction", "#createFailedItemFunction", "mx.collections.errors.ItemPendingError", "mx.rpc.IResponder"]},
            {  "tagName": "param",
               "values": ["index The list index from which to retrieve the item.", "prefetch An <code>int</code> indicating both the direction"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "throws",
               "values": ["RangeError if <code>index &lt; 0</code> or <code>index >= length</code>."]},
            {  "tagName": "return",
               "values": ["The list item at the specified index."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "index", "type": "int"},
        { "name": "prefetch", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "getItemIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "int",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "itemUpdated",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"},
        { "name": "property", "type": "Object"},
        { "name": "oldValue", "type": "Object"},
        { "name": "newValue", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "removeAll",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "removeItem",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Removes the specified item from this list, should it exist. Relies on ArrayList implementation",
        "tags": [
        {  "tagName": "param",
               "values": ["item Object reference to the item that should be removed."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Apache Flex 4.10"]},
            {  "tagName": "return",
               "values": ["Boolean indicating if the item was removed."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "removeItemAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Removes the actual or pending item at the specified index and returns it. All items whose index is greater than the specified index have their index reduced by 1.  <p>If there is no actual or pending item at the specified index, for example because a call to <code>getItemAt(index)</code> hasn't caused the data to be paged in, then the underlying <code>list</code> may throw an ItemPendingError. The  implementation ignores the ItemPendingError and returns null.</p>",
        "tags": [
        {  "tagName": "param",
               "values": ["index The list index from which to retrieve the item."]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "throws",
               "values": ["RangeError if <code>index &lt; 0</code> or <code>index >= length</code>."]},
            {  "tagName": "return",
               "values": ["The item that was removed or null."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "index", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "setItemAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "item", "type": "Object"},
        { "name": "index", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "toArray",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns an array with the same elements as this AsyncListView.  The array is initialized by retrieving each item with <code>getItemAt()</code>, so pending items are substituted where actual values aren't available yet.   The array will not be updated when the AsyncListView replaces the pending items with actual (or failed) values.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "return",
               "values": ["an array with the same elements as this AsyncListView."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Array",
          "params": []}
      ,
      { "type": "method",
        "qname": "toString",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Returns a string that contains the list's length and the number of pending item requests. It does not trigger pending requests.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Flex 4"]},
            {  "tagName": "return",
               "values": ["A brief description of the list."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": []}
      ]
  ,
  "events": [
  { "qname": "collectionChange",
        "type": "mx.events.CollectionEvent"
      ,
          "description": "Dispatched when the list's length has changed or when a list element is replaced.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.CollectionEvent.COLLECTION_CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }



