{ "type": "class",
  "qname": "mx.modules.Module",
  "baseClassname": "mx.core.Container"
  ,
    "description": "The base class for MXML-based dynamically-loadable modules. You extend this class in MXML by using the <code>&lt;mx:Module&gt;</code> tag in an MXML file, as the following example shows:  <pre>\\n &lt;?xml version=&quot;1.0&quot;?&gt;\\n &lt;!-- This module loads an image. --&gt;\\n &lt;mx:Module  width=&quot;100%&quot; height=&quot;100%&quot; xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot;&gt;\\n \\n &lt;mx:Image source=&quot;trinity.gif&quot;/&gt;\\n \\n &lt;/mx:Module&gt;\\n </pre>  <p>Extending the Module class in ActionScript is the same as using the <code>&lt;mx:Module&gt;</code> tag in an MXML file. You extend this class if your module interacts with the framework. To see an example of an ActionScript class that extends the Module class, create an MXML file with the root tag of <code>&lt;mx:Module&gt;</code>. When you compile this file, set the value of the <code>keep-generated-actionscript</code> compiler option to <code>true</code>. The Flex compiler stores the generated ActionScript class in a directory called generated, which you can look at.</p>  <p>If your module does not include any framework code, you can create a class that extends the ModuleBase class. If you use the ModuleBase class, your module will typically be smaller than if you create a module that is based on the Module class because it does not have any framework class dependencies.</p>   cornerRadius=&quot;0&quot; fontWeight=&quot;normal&quot; paddingLeft=&quot;0&quot; verticalAlign=&quot;top|bottom|middle&quot; verticalScrollPolicy=&quot;auto|on|off&quot;",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.modules.ModuleBase"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.modules.Module",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "layout",
        "namespace": "public",
        "bindable": ["layoutChanged"],
        "details": [],
        "deprecated": {},
          "description": "Specifies the layout mechanism used for this application. Applications can use <code>&quot;vertical&quot;</code>, <code>&quot;horizontal&quot;</code>, or <code>&quot;absolute&quot;</code> positioning. Vertical positioning lays out each child component vertically from the top of the application to the bottom in the specified order. Horizontal positioning lays out each child component horizontally from the left of the application to the right in the specified order. Absolute positioning does no automatic layout and requires you to explicitly define the location of each child component.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"vertical\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "_keepcode",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Object",
          "params": [{ "name": "obj", "type": "Object"}]}
      ]
  ,
  "events": [
  ]
  }
