{ "type": "interface",
  "qname": "mx.validators.IValidator",
"baseInterfaceNames": [
]
,
    "description": "This interface specifies the methods and properties that a Validator object must implement. <p>This interface allows to validate multiple data types like numbers, currency, phone numbers, zip codes etc that are defined in both mx and spark namespaces. The classes mx:Validator and spark:GlobaliationValidatorBase implement this interface. The validateAll() method in these classes use this interface type to call the validate() method on multiple validator objects.</p>",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.validators.Validator", "spark.validators.GlobalizationValidatorBase"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4.5"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
    "access": "read-write",
    "return": "Boolean",
    "qname": "enabled",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Property to enable/disable validation process. <p>Setting this value to <code>false</code> will stop the validator from performing validation. When a validator is disabled, it dispatches no events, and the <code>validate()</code> method returns null.</p>",
    "tags": [
    {  "tagName": "default",
           "values": ["true"]},
        {  "tagName": "playerversion",
           "values": ["Flash 10.1", "AIR 2.0"]},
        {  "tagName": "productversion",
           "values": ["Flex 4.5"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "method",
    "qname": "validate",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Performs validation and optionally notifies the listeners of the result.  If null, then the validator uses the <code>source</code> and <code>property</code> properties to determine the value. If you specify this argument, you should also set the <code>listener</code> property to specify the target component for any validation error messages.  the validator will notify the listener of the result.  containing the results of the validation. For a successful validation, the <code>ValidationResultEvent.results</code> Array property is empty. For a validation failure, the <code>ValidationResultEvent.results</code> Array property contains one ValidationResult object for each field checked by the validator, both for fields that failed the validation and for fields that passed. Examine the <code>ValidationResult.isError</code> property to determine if the field passed or failed the validation.",
    "tags": [
    {  "tagName": "see",
           "values": ["mx.events.ValidationResultEvent", "mx.validators.ValidationResult"]},
        {  "tagName": "param",
           "values": ["value Optional value to validate.", "suppressEvents If <code>false</code>, then after validation,"]},
        {  "tagName": "playerversion",
           "values": ["Flash 10.1", "AIR 2.5"]},
        {  "tagName": "productversion",
           "values": ["Flex 4.5"]},
        {  "tagName": "return",
           "values": ["A ValidationResultEvent object"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "mx.events.ValidationResultEvent",
      "params": [{ "name": "value", "type": "Object"},
    { "name": "suppressEvents", "type": "Boolean"}]}
  ]
  }
