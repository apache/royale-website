{ "type": "class",
  "qname": "mx.validators.EmailValidator",
  "baseClassname": "mx.validators.Validator"
  ,
    "description": "The EmailValidator class validates that a String has a single &#64; sign, a period in the domain name and that the top-level domain suffix has two, three, four, or six characters. IP domain names are valid if they are enclosed in square brackets. The validator does not check whether the domain and user name actually exist.  <p>You can use IP domain names if they are enclosed in square brackets; for example, myname&#64;[206.132.22.1]. You can use individual IP numbers from 0 to 255.</p>   <p>The <code>&lt;mx:EmailValidator&gt;</code> tag inherits all of the tag attributes of its superclass, and adds the following tag attributes:</p>  <pre>\\n &lt;mx:EmailValidator\\n invalidCharError=&quot;Your e-mail address contains invalid characters.&quot;\\n invalidDomainError= &quot;The domain in your e-mail address is incorrectly formatted.&quot;\\n invalidIPDomainError=&quot;The IP domain in your e-mail address is incorrectly formatted.&quot;\\n invalidPeriodsInDomainError=&quot;The domain in your e-mail address has consecutive periods.&quot;\\n missingAtSignError=&quot;An at sign (&64;) is missing in your e-mail address.&quot;\\n missingPeriodInDomainError=&quot;The domain in your e-mail address is missing a period.&quot;\\n missingUsernameError=&quot;The username in your e-mail address is missing.&quot;\\n tooManyAtSignsError=&quot;Your e-mail address contains too many &64; characters.&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/EmailValidatorExample.mxml"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "validateEmail",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Convenience method for calling a validator from within a custom validation function. Each of the standard Flex validators has a similar convenience method.    specified in the value parameter. For example, if the <code>value</code> parameter specifies value.email, the <code>baseField</code> value is &quot;email&quot;.  ValidationResult object for each field examined by the validator.",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.validators.ValidationResult"]},
            {  "tagName": "param",
               "values": ["validator The EmailValidator instance.", "value A field to validate.", "baseField Text representation of the subfield"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["An Array of ValidationResult objects, with one"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Array",
          "params": [{ "name": "validator", "type": "mx.validators.EmailValidator"},
        { "name": "value", "type": "Object"},
        { "name": "baseField", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "mx.validators.EmailValidator",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "invalidCharError",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Error message when there are invalid characters in the e-mail address.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"Your e-mail address contains invalid characters.\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "invalidDomainError",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Error message when the suffix (the top level domain) is not 2, 3, 4 or 6 characters long.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"The domain in your e-mail address is incorrectly formatted.\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "invalidIPDomainError",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Error message when the IP domain is invalid. The IP domain must be enclosed by square brackets.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"The IP domain in your e-mail address is incorrectly formatted.\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "invalidPeriodsInDomainError",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Error message when there are continuous periods in the domain.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"The domain in your e-mail address has continous periods.\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "missingAtSignError",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Error message when there is no at sign in the email address.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"An at sign (&64;) is missing in your e-mail address.\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "missingPeriodInDomainError",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Error message when there is no period in the domain.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"The domain in your e-mail address is missing a period.\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "missingUsernameError",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Error message when there is no username.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"The username in your e-mail address is missing.\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "tooManyAtSignsError",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Error message when there is more than one at sign in the e-mail address. This property is optional.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"Your e-mail address contains too many &64; characters.\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "doValidation",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Override of the base class <code>doValidation()</code> method to validate an e-mail address.  <p>You do not call this method directly; Flex calls it as part of performing a validation. If you create a custom Validator class, you must implement this method. </p>   object for each field examined by the validator.",
        "tags": [
        {  "tagName": "param",
               "values": ["value Either a String or an Object to validate."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["An Array of ValidationResult objects, with one ValidationResult"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Array",
          "params": [{ "name": "value", "type": "Object"}]}
      ]
  ,
  "events": [
  ]
  }
