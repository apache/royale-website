{ "type": "class",
  "qname": "mx.managers.ToolTipManager",
  "baseClassname": "org.apache.royale.events.EventDispatcher"
  ,
    "description": "The ToolTipManager lets you set basic ToolTip and error tip functionality, such as display delay and the disabling of ToolTips.",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.controls.ToolTip", "mx.validators.Validator"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
        "access": "read-write",
        "return": "mx.core.IToolTip",
        "qname": "currentToolTip",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The ToolTip object that is currently visible, or <code>null</code> if none is shown.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "enabled",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "If <code>true</code>, the ToolTipManager will automatically show ToolTips when the user moves the mouse pointer over components. If <code>false</code>, no ToolTips will be shown.",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "hideDelay",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The amount of time, in milliseconds, that Flex waits to hide the ToolTip after it appears. Once Flex hides a ToolTip, the user must move the mouse off the component and then back onto it to see the ToolTip again. If you set <code>hideDelay</code> to <code>Infinity</code>, Flex does not hide the ToolTip until the user triggers an event, such as moving the mouse off of the component.",
        "tags": [
        {  "tagName": "default",
               "values": ["10000"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.effects.IAbstractEffect",
        "qname": "hideEffect",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The effect that plays when a ToolTip is hidden, or <code>null</code> if the ToolTip should disappear with no effect.",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "scrubDelay",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The amount of time, in milliseconds, that a user can take when moving the mouse between controls before Flex again waits for the duration of <code>showDelay</code> to display a ToolTip.  <p>This setting is useful if the user moves quickly from one control to another; after displaying the first ToolTip, Flex will display the others immediately rather than waiting. The shorter the setting for <code>scrubDelay</code>, the more likely that the user must wait for an amount of time specified by <code>showDelay</code> in order to see the next ToolTip. A good use of this property is if you have several buttons on a toolbar, and the user will quickly scan across them to see brief descriptions of their functionality.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["100"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "showDelay",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The amount of time, in milliseconds, that Flex waits before displaying the ToolTip box once a user moves the mouse over a component that has a ToolTip. To make the ToolTip appear instantly, set <code>showDelay</code> to 0.",
        "tags": [
        {  "tagName": "default",
               "values": ["500"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.effects.IAbstractEffect",
        "qname": "showEffect",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The effect that plays when a ToolTip is shown, or <code>null</code> if the ToolTip should appear with no effect.",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Class",
        "qname": "toolTipClass",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The class to use for creating ToolTips.",
        "tags": [
        {  "tagName": "default",
               "values": ["mx.controls.ToolTip"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "createToolTip",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Creates an instance of the ToolTip class with the specified text and displays it at the specified location in stage coordinates.  <p>ToolTips appear in their own layer, on top of everything except cursors.</p>  <p>The standard way of using ToolTips is to let the ToolTipManager automatically show and hide them as the user moves the mouse over the objects that have the <code>toolTip</code> property set. You can turn off this automatic ToolTip management by setting the ToolTipManager's <code>enabled</code> property to <code>false</code>.</p>  <p>By contrast, this method&#x2014;along with <code>destroyToolTip()</code>&#x2014;gives you programmatic control over ToolTips. You can show them when and where you choose, and you can even show more than one at once if you need to. (The ToolTipManager never does this, because it is generally confusing to the user).</p>  <p>This method first creates a new instance of ToolTip and calls the <code>addChild()</code> method to put it into the SystemManager's toolTips layer. If you are showing an error tip, it sets the appropriate styles. Then it sets the text for the ToolTip, sizes the ToolTip based on its text, and positions it where you specified.</p>  <p>You must save the reference to the ToolTip that this method returns so that you can pass it to the <code>destroyToolTip()</code> method.</p>   In case of multiple stages, the relevant stage is determined from the <code>context</code> argument.  In case of multiple stages, the relevant stage is determined from the <code>context</code> argument.  argument can be null, &quot;errorTipRight&quot;, &quot;errorTipAbove&quot;, or &quot;errorTipBelow&quot;. If it is null, then the <code>createToolTip()</code> method creates a normal ToolTip. If it is &quot;errorTipRight&quot;, &quot;errorTipAbove&quot;, or &quot;errorTipBelow&quot;, then the <code>createToolTip()</code> method creates an error tip, and this parameter determines where the arrow of the error tip points to (the error's target). For example, if you pass &quot;errorTipRight&quot;, Flex positions the error tip (via the x and y arguments) to the right of the error target; the arrow is on the left edge of the error tip.  which the ToolTip appears, so that the ToolTip's StyleManager is the same one that is used by that object.",
        "tags": [
        {  "tagName": "param",
               "values": ["text The text to display in the ToolTip instance.", "x The horizontal coordinate of the ToolTip in stage coordinates.", "y The vertical coordinate of the ToolTip in stage coordinates.", "errorTipBorderStyle The border style of an error tip. This method", "context Determines which StyleManager is used. Typically, you pass the object on"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The newly created ToolTip."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.core.IToolTip",
          "params": [{ "name": "text", "type": "String"},
        { "name": "x", "type": "Number"},
        { "name": "y", "type": "Number"},
        { "name": "errorTipBorderStyle", "type": "String"},
        { "name": "context", "type": "mx.core.IUIComponent"}]}
      ,
      { "type": "method",
        "qname": "destroyToolTip",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Destroys a specified ToolTip that was created by the <code>createToolTip()</code> method.  <p>This method calls the <code>removeChild()</code> method to remove the specified ToolTip from the SystemManager's ToolTips layer. It will then be garbage-collected unless you keep a reference to it.</p>  <p>You should not call this method on the ToolTipManager's <code>currentToolTip</code>.</p>",
        "tags": [
        {  "tagName": "param",
               "values": ["toolTip The ToolTip instance to destroy."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "toolTip", "type": "mx.core.IToolTip"}]}
      ]
  ,
  "events": [
  ]
  }
