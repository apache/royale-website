{ "type": "class",
  "qname": "mx.resources.ResourceBundle",
  "baseClassname": ""
  ,
    "description": "Provides an implementation of the IResourceBundle interface. The IResourceManager and IResourceBundle interfaces work together to provide internationalization support for Flex applications.  <p>A Flex application typically has multiple instances of this class, all managed by a single instance of the ResourceManager class. It is possible to have ResourceBundle instances for multiple locales, one for each locale. There can be multiple ResourceBundle instances with different bundle names.</p>",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.resources.IResourceBundle", "mx.resources.IResourceManager"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.resources.ResourceBundle",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.   such as <code>&quot;MyResources&quot;</code>.",
        "tags": [
        {  "tagName": "param",
               "values": ["locale A locale string, such as <code>\"en_US\"</code>.", "bundleName A name that identifies this bundle,"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "locale", "type": "String"},
        { "name": "bundleName", "type": "String"}]}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "String",
        "qname": "bundleName",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "copy",
               "values": ["mx.resources.IResourceBundle#bundleName"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Object",
        "qname": "content",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "copy",
               "values": ["mx.resources.IResourceBundle#content"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "String",
        "qname": "locale",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "copy",
               "values": ["mx.resources.IResourceBundle#locale"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "getContent",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "When a properties file is compiled into a resource bundle, the MXML compiler autogenerates a subclass of ResourceBundle. The subclass overrides this method to return an Object that contains key-value pairs for the bundle's resources.  <p>If you create your own ResourceBundle instances, you can set the key-value pairs on the <code>content</code> object.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The Object that contains key-value pairs for the bundle's resources."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": []}
      ]
  ,
  "events": [
  ]
  }
