{ "type": "class",
  "qname": "mx.effects.effectClasses.TweenEffectInstance",
  "baseClassname": "mx.effects.EffectInstance"
  ,
    "description": "The TweenEffectInstance class implements the instance class for the TweenEffect. Flex creates an instance of this class when it plays a TweenEffect; you do not create one yourself.",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.effects.Tween", "mx.effects.TweenEffect"]},
      {  "tagName": "royalesuppresspublicvarwarning",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.effects.effectClasses.TweenEffectInstance",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "param",
               "values": ["target The Object to animate with this effect."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "target", "type": "Object"}]}
      ,
      { "type": "field",
        "qname": "easingFunction",
        "return": "Function",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The easing function for the animation. By default, effects use the same easing function as the TweenEffect class.",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.effects.TweenEffect#easingFunction"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "tween",
        "return": "mx.effects.Tween",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The Tween object, which determines the animation. To create an effect, you must create a Tween instance in the override of the <code>EffectInstance.play()</code> method and assign it to the <code>tween</code> property. Use the <code>createTween()</code> method to create your Tween object.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "createTween",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Creates a Tween instance, assigns it the start, end, and duration values. If an easing function has been specified, then it is assigned to the Tween instance. The Tween instance is assigned event listeners for the TweenEvents: <code>tweenStart</code>, <code>tweenUpdate</code>, and <code>tweenEnd</code>. Typically, you call this method from your override of the <code>EffectInstance.play()</code> method which effectively starts the animation timer.  of the animation. You typically pass the <code>this</code> keyword as the value. The <code>listener</code> must define the <code>onTweenUpdate()</code> method and optionally the <code>onTweenEnd()</code> method. The <code>onTweenUpdate()</code> method is invoked for each interval of the animation, and the <code>onTweenEnd()</code> method is invoked just after the animation finishes.  Either a number or an Array of numbers. If a number is passed, the Tween interpolates between this number and the number passed in the <code>endValue</code> parameter. If an Array of numbers is passed, each number in the Array is interpolated.  The type of this argument must match the <code>startValue</code> parameter.   <code>onTweenUpdate()</code> method should be called every second. The tween code tries to call the <code>onTweenUpdate()</code> method as frequently as possible (up to 100 times per second). However, if the frequency falls below <code>minFps</code>, the duration of the animation automatically increases. As a result, an animation that temporarily freezes (because it is not getting any CPU cycles) begins again where it left off, instead of suddenly jumping ahead.",
        "tags": [
        {  "tagName": "param",
               "values": ["listener Object that is notified at each interval", "startValue Initial value(s) of the animation.", "endValue Final value(s) of the animation.", "duration Duration of the animation, in milliseconds.", "minFps Minimum number of times that the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.3"]},
            {  "tagName": "return",
               "values": ["The newly created Tween instance."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.effects.Tween",
          "params": [{ "name": "listener", "type": "Object"},
        { "name": "startValue", "type": "Object"},
        { "name": "endValue", "type": "Object"},
        { "name": "duration", "type": "Number"},
        { "name": "minFps", "type": "Number"}]}
      ,
      { "type": "method",
        "qname": "applyTweenStartValues",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "onTweenUpdate",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Callback method that is called when the target should be updated by the effect. The Tween class uses the easing function and the <code>Tween.startValue</code>, <code>Tween.endValue</code> and <code>Tween.duration</code> properties to calculate the value of the <code>value</code> argument. The <code>value</code> argument can be either a Number or an Array of Numbers.  <p>All subclasses must override this method. It is not necessary to call the super version of this function when overriding this method.</p>  is an interpolated value determined by the <code>Tween.startValue</code> property, <code>Tween.endValue</code> property, and interpolation function specified by the implementation of the effect in its <code>play()</code> method. The <code>play()</code> method uses these values to create a Tween object that plays the effect over a time period. The <code>value</code> argument can be either a Number or an Array of Numbers.",
        "tags": [
        {  "tagName": "param",
               "values": ["value The value of the <code>value</code> argument"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "value", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "onTweenEnd",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Callback method that is called when the target should be updated by the effect for the last time. The Tween class passes <code>Tween.endValue</code> as the value of the <code>value</code> argument. The <code>value</code> argument can be either a Number or an Array of Numbers.  <p>Overriding this function is optional. You must also call the super version of this method from the end of your override, <code>super.onTweenEnd(val)</code>, after your logic.</p>  is an interpolated value determined by the <code>Tween.startValue</code> property, <code>Tween.endValue</code> property, and interpolation function specified by the implementation of the effect in its <code>play()</code> method. The <code>play()</code> method  uses these values to create a Tween object that plays the effect over a time period. The <code>value</code> argument can be either a Number or an Array of Numbers.",
        "tags": [
        {  "tagName": "param",
               "values": ["value The value of the <code>value</code> argument"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "value", "type": "Object"}]}
      ]
  ,
  "events": [
  ]
  }
