{ "type": "class",
  "qname": "mx.effects.EffectTargetFilter",
  "baseClassname": ""
  ,
    "description": "The EffectTargetFilter class defines a custom filter that is executed by each transition effect on each target of the effect.  <p>The EffectTargetFilter class defines a <code>defaultFilterFunction()</code> method that uses the <code>filterProperties</code> and <code>filterStyles</code> properties to determine whether to play the effect on each effect target.</p>  <p>You can also define a custom filter function to implement your own filtering logic. To do so, define your filter function, and then specify that function to an EffectTargetFilter object using the <code>filterFunction</code> property.</p>  <p>To configure an effect to use a custom filter, you pass an EffectTargetFilter object to the <code>Effect.customFilter</code> property of the effect.</p>",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.effects.EffectTargetFilter",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "field",
        "qname": "filterFunction",
        "return": "Function",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A function that defines custom filter logic. Flex calls this method on every target of the effect. If the function returns <code>true</code>, the effect plays on the target; if it returns <code>false</code>, the target is skipped by the effect. A custom filter function gives you greater control over filtering than the <code>Effect.filter</code> property.  <p>The filter function has the following signature:</p>  <pre>\\n filterFunc(propChanges:Array, instanceTarget:Object):Boolean\\n {\\n // Return true to play the effect on instanceTarget,\\n // or false to not play the effect.\\n }\\n </pre>  <p>where:</p>  <p><code>propChanges</code> - An Array of PropertyChanges objects, one object per target component of the effect. If a property of a target is not modified by the transition, it is not included in this Array.</p>  <p><code>instanceTarget</code> - The specific target component of the effect that you want to filter. Within the custom filter function, you first search the <code>propChanges</code> Array for the PropertyChanges object that matches the <code>instanceTarget</code> argument by comparing the <code>instanceTarget</code> argument to the <code>propChanges.target</code> property.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.effects.effectClasses.PropertyChanges"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "filterProperties",
        "return": "Array",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An Array of Strings specifying component properties. If any of the properties in the Array changed on the target component, play the effect on the target.  <p>If you define a custom filter function, you can examine the <code>filterProperties</code> property from within your function.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "filterStyles",
        "return": "Array",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An Array of Strings specifying style properties. If any of the style properties in the Array changed on the target component, play the effect on the target.  <p>If you define a custom filter function, you can examine the <code>filterStyles</code> property from within your function.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "requiredSemantics",
        "return": "Object",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A collection of properties and associated values which must be associated with a target for the effect to be played.  <p>When working with data effects, you can use this property to filter effects. If you want to play a data effect on all targets of a list control that are not added by the effect, meaning targets that is removed, replaced, moved, or affected in any other way, you can write the effect definition as shown below: </p>  <pre>\\n &lt;mx:Blur&gt;\\n &lt;mx:customFilter&gt;\\n &lt;mx:EffectTargetFilter requiredSemantics=&quot;{{'added':false}}&quot;/&gt;\\n &lt;/mx:customFilter&gt;\\n &lt;/mx:Blur&gt; </pre>  <p>To play a data effect on all targets that are not added or not removed by the effect, you can write the effect definition as shown below:</p>  <pre>\\n &lt;mx:Blur&gt;\\n &lt;mx:customFilter&gt;\\n &lt;mx:EffectTargetFilter requiredSemantics=&quot;{{'added':false}, {'removed':false}}&quot;/&gt;\\n &lt;/mx:customFilter&gt;\\n &lt;/mx:Blur&gt;</pre>  <p>The allowed list of properties that you can specify includes <code>added</code>, <code>removed</code>, <code>replaced</code>, and <code>replacement</code>. The allowed values for the properties are <code>true</code> and <code>false</code>.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "filterInstance",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Determines whether a target should be filtered, returning true if it should be included in an effect.  The determination is made by calling filterFunction and semanticFilterFunction, returning true if and only if both functions return true. The default functions with the default values will always return true.  Typically, an EffectTargetFilter will use one type of filter or the other, but not both.  each PropertyChanges object is equal to the effect's target. If a property of a target is not modified by a transition, the corresponding PropertyChanges object is not included in this array.  specified in requiredSemantics for the target, normally the effectTargetHost of the effect. For item change effects, when the targets of the effect are item renderers, this will be the List or TileList containing the item renderers.  effect has multiple targets, this function is called once per target.  otherwise returns <code>false</code>.",
        "tags": [
        {  "tagName": "param",
               "values": ["propChanges An Array of PropertyChanges objects. The target property of", "semanticsProvider The IEffectTargetHost used to evaluate the properties", "target The target of the EffectInstance that calls this function. If an"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Returna <code>true</code>, if the target should be included in the effect;"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "propChanges", "type": "Array"},
        { "name": "semanticsProvider", "type": "mx.effects.IEffectTargetHost"},
        { "name": "target", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "defaultFilterFunction",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The default filter function for the EffectTargetFilter class. If the <code>instanceTarget</code> has different start and end values for any of the values specified by the <code>filterProperties</code> or <code>filterStyles</code> properties, play the effect on the target.  The <code>target</code> property of each PropertyChanges object is equal to the effect's target. If a property of a target is not modified by a transition, the corresponding PropertyChanges object is not included in this array.  that calls this function. If an effect has multiple targets, this function is called once per target.",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.effects.effectClasses.PropertyChanges"]},
            {  "tagName": "param",
               "values": ["propChanges An Array of PropertyChanges objects.", "instanceTarget The target of the EffectInstance"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Returns <code>true</code> to allow the effect instance to play."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "propChanges", "type": "Array"},
        { "name": "instanceTarget", "type": "Object"}]}
      ]
  ,
  "events": [
  ]
  }
