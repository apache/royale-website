{ "type": "interface",
  "qname": "mx.effects.IEffect",
"baseInterfaceNames": [
"mx.effects.IAbstractEffect"]
,
    "description": "The IEffect interface defines the base interface of all Flex effects. The IEffectInstance interface defines the base interface for all effect instance subclasses.",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.effects.IEffectInstance"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
    "access": "read-only",
    "return": "String",
    "qname": "className",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The name of the effect class, such as <code>&quot;Fade&quot;</code>.  <p>This is a short, or unqualified, class name that does not include the package name. If you need the qualified name, use the <code>getQualifiedClassName()</code> method in the flash.utils package.</p>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "mx.effects.EffectTargetFilter",
    "qname": "customFilter",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Specifies a custom filter object, of type EffectTargetFilter, used by the effect to determine the targets on which to play the effect.  <p>Target filtering is only performed if you call the <code>captureStartValues()</code> method before playing the effect. Flex automatically calls the <code>captureStartValues()</code> method when the effect is part of a transition.</p>  <p>Use the <code>filter</code> property for simple filtering. If the <code>customFilter</code> property is non-null, the <code>filter</code> property is ignored.</p>",
    "tags": [
    {  "tagName": "default",
           "values": ["null"]},
        {  "tagName": "see",
           "values": ["mx.effects.EffectTargetFilter"]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "Number",
    "qname": "duration",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Duration of the effect in milliseconds.  <p>In a Parallel or Sequence effect, the <code>duration</code> property sets the duration of each effect. For example, if a Sequence effect has its <code>duration</code> property set to 3000, each effect in the Sequence takes 3000 ms to play.</p>  <p>For a repeated effect, the <code>duration</code> property specifies  the duration of a single instance of the effect. Therefore, if an effect has a <code>duration</code> property set to 2000, and a <code>repeatCount</code> property set to 3, the effect takes a total of 6000 ms (6 seconds) to play.</p>",
    "tags": [
    {  "tagName": "default",
           "values": ["500"]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "mx.effects.IEffectTargetHost",
    "qname": "effectTargetHost",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "A property that lets you access the target list-based control of a data effect. This property enables an instance of an effect class to communicate with the list-based control on which the effect is playing.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "String",
    "qname": "filter",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Specifies an algorithm for filtering targets for an effect. A value of <code>null</code> specifies no filtering.  <p>Target filtering is only performed if you call the <code>captureStartValues()</code> method before playing the effect. Flex automatically calls the <code>captureStartValues()</code> method when the effect is part of a transition, or part of a data effect for a list-based control.</p>  <p>Use this property for simple filtering. Use the <code>customFilter</code> property for more complex filtering. If the <code>customFilter</code> property has a non-null value, this property is ignored.</p>  <p>You can use the following values for the <code>filter</code> property:</p>  <ul> <li>A value of <code>&quot;add&quot;</code> plays the effect on any targets that are added as a child to a container.</li> <li>A value of <code>&quot;addItem&quot;</code> plays the effect on the item renderer for any list items added to a List or TileList control.</li> <li>A value of <code>&quot;hide&quot;</code> plays the effect on any targets whose visible property changed from <code>true</code> to <code>false</code>.</li> <li>A value of <code>&quot;move&quot;</code> plays the effect on any targets that changed their <code>x</code> or <code>y</code> properties.</li> <li>A value of <code>&quot;remove&quot;</code> plays the effect on any targets that are removed as a child of a container.</li> <li>A value of <code>&quot;removeItem&quot;</code> plays the effect on the item renderer for any list items removed from a List or TileList control.</li> <li>A value of <code>&quot;replacedItem&quot;</code> plays the effect on the item renderer for any list items replaced in a List or TileList control by a new item.</li> <li>A value of <code>&quot;replacementItem&quot;</code> plays the effect on the item renderer for any list items added to a List or TileList control that replaces an existing item.</li> <li>A value of <code>&quot;resize&quot;</code> plays the effect on any targets that changed their <code>width</code> or <code>height</code> properties.</li> <li>A value of <code>&quot;show&quot;</code> plays the effect on any targets whose visible property changed from <code>false</code> to <code>true</code>.</li> <li>A value of <code>&quot;&quot;</code> specifies no filtering.</li> </ul>",
    "tags": [
    {  "tagName": "default",
           "values": ["null"]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "Boolean",
    "qname": "hideFocusRing",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Determines whether the effect should hide the focus ring when starting the effect. The effect target is responsible for the hiding the focus ring. Subclasses of the UIComponent class hide the focus ring automatically. If the effect target is not a subclass of the UIComponent class, add functionality to it to hide the focus ring.  <p>Set this property to <code>true</code> to hide the focus ring during the effect.</p>  <p>For subclasses of Effect, the default value is <code>false</code>. For subclasses of MaskEffect, the default value is <code>true</code>. </p>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "Boolean",
    "qname": "isPlaying",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "A read-only flag which is true if any instances of the effect are currently playing, and false if none are.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "Number",
    "qname": "perElementOffset",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Additional delay, in milliseconds, for effect targets after the first target of the effect. This value is added to the value of the <code>startDelay</code> property.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "Array",
    "qname": "relevantProperties",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "An Array of property names to use when performing filtering. This property is used internally and should not be set by effect users.  <p>The default value is equal to the Array returned by the <code>getAffectedProperties()</code> method.</p>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "Array",
    "qname": "relevantStyles",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "An Array of style names to use when performing filtering. This property is used internally and should not be set by effect users.  <p>The default value is equal to the Array returned by the <code>getAffectedProperties()</code> method.</p>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "Object",
    "qname": "target",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The object to which this effect is applied. When an effect is triggered by an effect trigger, the <code>target</code> property is automatically set to be the object that triggers the effect.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "Array",
    "qname": "targets",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "An Array of objects that are targets for the effect. When the effect is playing, it performs the effect on each target in parallel. Setting the <code>target</code> property replaces all objects in this Array. When the <code>targets</code> property is set, the <code>target</code> property returns the first item in this Array.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "org.apache.royale.events.Event",
    "qname": "triggerEvent",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The Event object passed to this Effect by the EffectManager when an effect is triggered, or <code>null</code> if the effect is not being played by the EffectManager.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "Number",
    "qname": "playheadTime",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Current time position of the effect. This property has a value between 0 and the total duration, which includes the Effect's <code>startDelay</code>, <code>repeatCount</code>, and <code>repeatDelay</code>.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "method",
    "qname": "getAffectedProperties",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Returns an Array of Strings, where each String is the name of a property changed by this effect. For example, the Move effect returns an Array that contains <code>&quot;x&quot;</code> and <code>&quot;y&quot;</code>.  <p>Every subclass of Effect must implement this method. The EffectManager uses this method to ensure that no two effects are trying to animate the same property of the same object at the same time.</p>  properties modified by this effect.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["An Array of Strings specifying the names of the"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Array",
      "params": []}
  ,
  { "type": "method",
    "qname": "createInstances",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Takes an Array of target objects and invokes the <code>createInstance()</code> method on each target.   for the effect.",
    "tags": [
    {  "tagName": "param",
           "values": ["targets Array of objects to animate with this effect."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["Array of effect instance objects, one per target,"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Array",
      "params": [{ "name": "targets", "type": "Array"}]}
  ,
  { "type": "method",
    "qname": "createInstance",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Creates a single effect instance and initializes it. Use this method instead of the <code>play()</code> method to manipulate the effect instance properties before the effect instance plays.  <p>The effect instance is created with the type specified in the <code>instanceClass</code> property. It is then initialized using the <code>initInstance()</code> method. If the instance was created by the EffectManager (when the effect is triggered by an effect trigger), the effect is further initialized by a call to the <code>EffectInstance.initEffect()</code> method.</p>  <p>Calling the <code>createInstance()</code> method does not play the effect. Call the <code>startEffect()</code> method on the returned effect instance. </p>  <p>This function is automatically called by the <code>Effect.play()</code> method. </p>",
    "tags": [
    {  "tagName": "param",
           "values": ["target Object to animate with this effect."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["The effect instance object for the effect."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "mx.effects.IEffectInstance",
      "params": [{ "name": "target", "type": "Object"}]}
  ,
  { "type": "method",
    "qname": "deleteInstance",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Removes event listeners from an instance and removes it from the list of instances.",
    "tags": [
    {  "tagName": "param",
           "values": ["instance The effect instance."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "instance", "type": "mx.effects.IEffectInstance"}]}
  ,
  { "type": "method",
    "qname": "play",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Begins playing the effect. You typically call the <code>end()</code> method before you call the <code>play()</code> method to ensure that any previous instance of the effect has ended before you start a new one.  <p>All subclasses must implement this method.</p>  If this parameter is specified, then the effect's <code>targets</code> property is not used.  play the effect backwards.  for the effect.",
    "tags": [
    {  "tagName": "param",
           "values": ["targets Array of target objects on which to play this effect.", "playReversedFromEnd If <code>true</code>,"]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["Array of EffectInstance objects, one per target,"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Array",
      "params": [{ "name": "targets", "type": "Array"},
    { "name": "playReversedFromEnd", "type": "Boolean"}]}
  ,
  { "type": "method",
    "qname": "pause",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Pauses the effect until you call the <code>resume()</code> method.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": []}
  ,
  { "type": "method",
    "qname": "stop",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Stops the effect, leaving the effect targets in their current state. Unlike a call to the <code>pause()</code> method, you cannot call the <code>resume()</code> method after calling the <code>stop()</code> method. However, you can call the <code>play()</code> method to restart the effect.  <p>The effect instance dispatches an <code>effectEnd</code> event when you call this method as part of ending the effect.</p>  <p>For mask effects, the mask is not removed automatically when the effect is stopped. Running further mask effects on the same target(s) without first removing the mask can produce unexpected results.</p>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": []}
  ,
  { "type": "method",
    "qname": "resume",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Resumes the effect after it has been paused by a call to the <code>pause()</code> method.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": []}
  ,
  { "type": "method",
    "qname": "reverse",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Plays the effect in reverse, if the effect is currently playing, starting from the current position of the effect.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": []}
  ,
  { "type": "method",
    "qname": "end",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Interrupts an effect that is currently playing, and jumps immediately to the end of the effect. Calling this method invokes the <code>EffectInstance.end()</code> method.  <p>The effect instance dispatches an <code>effectEnd</code> event when you call this method as part of ending the effect.</p>  <p>If you pass an effect instance as an argument, just that instance is interrupted. If no argument is passed in, all effect instances currently spawned from the effect are interrupted.</p>",
    "tags": [
    {  "tagName": "see",
           "values": ["mx.effects.EffectInstance#end()"]},
        {  "tagName": "param",
           "values": ["effectInstance EffectInstance to terminate."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "effectInstance", "type": "mx.effects.IEffectInstance"}]}
  ,
  { "type": "method",
    "qname": "captureStartValues",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Captures the current values of the relevant properties on the effect's targets. Flex automatically calls the <code>captureStartValues()</code> method when the effect is part of a transition.  <p>Use this function when you want the effect to figure out the start and end values of the effect. The proper usage of this function is to use it in the following steps:</p>  <ol> <li>Call the <code>captureStartValues()</code> method. The effect captures the starting effect values.</li> <li>Make changes to your effect targets, such as adding/removing children, altering properties, changing location, or changing dimensions.</li> <li>Call the <code>play()</code> method. The effect captures the end values. This function populates the <code>EffectInstance.propertyChanges</code> property for each effect instance created by this effect. Effect developers can use the <code>propertyChanges</code> property to retrieve the start and end values for their effect.</li> </ol>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": []}
  ,
  { "type": "method",
    "qname": "captureMoreStartValues",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Captures the current values of the relevant properties of an additional set of targets  <p>Flex uses this function when a data change effect is run.</p>",
    "tags": [
    {  "tagName": "param",
           "values": ["targets Array of targets for which values are captured"]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "targets", "type": "Array"}]}
  ,
  { "type": "method",
    "qname": "captureEndValues",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Captures the current values of the relevant properties on the effect's targets and saves them as end values.  <p>Flex automatically calls the <code>captureEndValues()</code> method when the effect is part of a data change effect.</p>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": []}
  ]
  }
