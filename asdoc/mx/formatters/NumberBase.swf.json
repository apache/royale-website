{ "type": "class",
  "qname": "mx.formatters.NumberBase",
  "baseClassname": ""
  ,
    "description": "The NumberBase class is a utility class that contains general number formatting capabilities, including rounding, precision, thousands formatting, and negative sign formatting. The implementation of the formatter classes use this class.",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.formatters.NumberFormatter", "mx.formatters.NumberBaseRoundType"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.formatters.NumberBase",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.  when parsing an input String.  as the thousands separator in the input String.  when outputting formatted decimal numbers.  as the thousands separator in the output String.",
        "tags": [
        {  "tagName": "param",
               "values": ["decimalSeparatorFrom Decimal separator to use", "thousandsSeparatorFrom Character to use", "decimalSeparatorTo Decimal separator character to use", "thousandsSeparatorTo Character to use"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "decimalSeparatorFrom", "type": "String"},
        { "name": "thousandsSeparatorFrom", "type": "String"},
        { "name": "decimalSeparatorTo", "type": "String"},
        { "name": "thousandsSeparatorTo", "type": "String"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "decimalSeparatorFrom",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Decimal separator character to use when parsing an input String.",
        "tags": [
        {  "tagName": "default",
               "values": ["\".\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "decimalSeparatorTo",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Decimal separator character to use when outputting formatted decimal numbers.",
        "tags": [
        {  "tagName": "default",
               "values": ["\".\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "isValid",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If <code>true</code>, the format succeeded, otherwise it is <code>false</code>.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "thousandsSeparatorFrom",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Character to use as the thousands separator in the input String.",
        "tags": [
        {  "tagName": "default",
               "values": ["\",\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "thousandsSeparatorTo",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Character to use as the thousands separator in the output String.",
        "tags": [
        {  "tagName": "default",
               "values": ["\",\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "formatRounding",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Formats a number by rounding it. The possible rounding types are defined by mx.formatters.NumberBaseRoundType.   NumberBaseRoundType.NONE, NumberBaseRoundType.UP, NumberBaseRoundType.DOWN, or NumberBaseRoundType.NEAREST.",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.formatters.NumberBaseRoundType"]},
            {  "tagName": "param",
               "values": ["value Value to be rounded.", "roundType The type of rounding to perform:"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Formatted number."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "String"},
        { "name": "roundType", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "formatRoundingWithPrecision",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Formats a number by rounding it and setting the decimal precision. The possible rounding types are defined by mx.formatters.NumberBaseRoundType.   NumberBaseRoundType.NONE, NumberBaseRoundType.UP, NumberBaseRoundType.DOWN, or NumberBaseRoundType.NEAREST.",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.formatters.NumberBaseRoundType"]},
            {  "tagName": "param",
               "values": ["value Value to be rounded.", "roundType The type of rounding to perform:", "precision int of decimal places to use."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Formatted number."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "String"},
        { "name": "roundType", "type": "String"},
        { "name": "precision", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "formatDecimal",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Formats a number by replacing the default decimal separator, &quot;.&quot;, with the decimal separator specified by <code>decimalSeparatorTo</code>.  (formatted American style ####.##).  with the decimal formatting character.",
        "tags": [
        {  "tagName": "param",
               "values": ["value The String value of the Number"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["String representation of the input where \".\" is replaced"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "formatThousands",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Formats a number by using the <code>thousandsSeparatorTo</code> property as the thousands separator and the <code>decimalSeparatorTo</code> property as the decimal separator.",
        "tags": [
        {  "tagName": "param",
               "values": ["value Value to be formatted."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Formatted number."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "formatPrecision",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Formats a number by setting its decimal precision by using the <code>decimalSeparatorTo</code> property as the decimal separator.",
        "tags": [
        {  "tagName": "param",
               "values": ["value Value to be formatted.", "precision Number of decimal points to use."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Formatted number."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "String"},
        { "name": "precision", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "formatNegative",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Formats a negative number with either a minus sign (-) or parentheses ().   If <code>false</code>, use parentheses ().",
        "tags": [
        {  "tagName": "param",
               "values": ["value Value to be formatted.", "useSign If <code>true</code>, use a minus sign (-)."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Formatted number."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "String"},
        { "name": "useSign", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "parseNumberString",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Extracts a number from a formatted String. Examines the String from left to right and returns the first number sequence. Ignores thousands separators and includes the decimal and numbers trailing the decimal.",
        "tags": [
        {  "tagName": "param",
               "values": ["str String to parse for the numeric value."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Value, which can be a decimal."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "str", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "expandExponents",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Formats a number in exponent notation, into a number in decimal notation.",
        "tags": [
        {  "tagName": "param",
               "values": ["str String to process in exponent notation."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Formatted number."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "String"}]}
      ]
  ,
  "events": [
  ]
  }
