{ "type": "class",
  "qname": "mx.rpc.xml.SchemaManager",
  "baseClassname": "mx.rpc.xml.QualifiedResourceManager"
  ,
    "description": "SchemaManager manages multiple Schema definitions by target namespace.",
  "tags": [
  {  "tagName": "private",
         "values": []}  ],
  "members": [
  { "type": "method",
        "qname": "mx.rpc.xml.SchemaManager",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "namespaces",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.rpc.xml.SchemaConstants",
        "qname": "schemaConstants",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The constants for the version of Schema that is to be used in the type system associated with this manager, such as a WSDL types definition.  FIXME: Verify that it is legal for a type system to refer to two different Schemas that use different version of the XML Schema specification? If so, then the schemaConstants could be obtained from each Schema.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "mx.rpc.xml.SchemaMarshaller",
        "qname": "schemaMarshaller",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "mx.rpc.xml.SchemaDatatypes",
        "qname": "schemaDatatypes",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "method",
        "qname": "addNamespaces",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": [{ "name": "map", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "addSchema",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Adds a Schema to the current scope. If a Schema already exists in the scope then the scope is promoted to an Array of Schemas.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "schema", "type": "mx.rpc.xml.Schema"},
        { "name": "toCurrentScope", "type": "Boolean"}]}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "mx.rpc.xml.Schema",
        "qname": "currentSchema",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the Schema that was last used to retrieve a definition.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "currentScope",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Array",
          "params": []}
      ,
      { "type": "method",
        "qname": "getNamedDefinition",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Look for the definition of the given QName in all schemas in the current scope. If the definition could not be found the function returns null.  the name provided, such as &lt;element&gt;, &lt;complexType&gt;, &lt;simpleType&gt;, &lt;attribute&gt; or &lt;attributeGroup&gt;. The first one found is returned.",
        "tags": [
        {  "tagName": "param",
               "values": ["name The name of the component defined in a schema.", "componentTypes A list of structural element types that may have"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "XML",
          "params": [{ "name": "name", "type": "QName"},
        { "name": "componentTypes", "type": "Array"}]}
      ,
      { "type": "method",
        "qname": "pushNamespaceInScope",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Locate a schema for the given namespace and push it to a new scope level.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "nsParam", "type": "*"}]}
      ,
      { "type": "method",
        "qname": "pushSchemaInScope",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Push the given Schema to a new scope level, and set it as the current schema for that scope.",
        "tags": [
        {  "tagName": "param",
               "values": ["schema The Schema to push to a new scope"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "schema", "type": "mx.rpc.xml.Schema"}]}
      ,
      { "type": "method",
        "qname": "getQNameForAttribute",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "QName",
          "params": [{ "name": "ncname", "type": "String"},
        { "name": "form", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "getQNameForElement",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "QName",
          "params": [{ "name": "ncname", "type": "String"},
        { "name": "form", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "getQNameForPrefixedName",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Resolves a prefixed name back into a QName based on the prefix to namespace mappings.  declarations to be examined unqualified names. If false, unqualified names are assumed to be prefixed by &quot;&quot; and a xmlns=&quot;...&quot; declaration is looked up. If no xmlns=&quot;..&quot; declaration is in scope, and the parent node is in the default namespace, the prefixedName is resolved to the default namespace. Otherwise, it is resolved to the targetNamespace of the current schema. If qualifyToTargetNamespace is true, unqualified names are assumed to be in the target namespace of the current schema, regardless of declarations for unprefixed namespaces. qualifyToTargetNamespace should be true when resolving names coming from the following schema attributes: name, ref.",
        "tags": [
        {  "tagName": "param",
               "values": ["prefixedName The name to be resolved. Can be prefixed or unqualified.", "parent The XML node where prefixedName appears. Allows local xmlns", "qualifyToTargetNamespace A switch controlling the behavior for"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "QName",
          "params": [{ "name": "prefixedName", "type": "String"},
        { "name": "parent", "type": "XML"},
        { "name": "qualifyToTargetNamespace", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "marshall",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Converts ActionScript to XML based on default rules established for each of the built-in XML Schema types.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "releaseScope",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Informs the SchemaManager that the current definition is no longer being processed so we release the associated Schema from the current scope of qualified definitions.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "*",
          "params": []}
      ,
      { "type": "method",
        "qname": "reset",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Reverts to initialScope.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "unmarshall",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Converts XML to ActionScript based on default rules established for each of the built-in XML Schema types.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "*",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ]
  ,
  "events": [
  ]
  }
