{ "type": "class",
  "qname": "mx.rpc.xml.XMLDecoder",
  "baseClassname": "mx.rpc.xml.SchemaProcessor"
  ,
    "description": "Decodes an XML document to an object graph based on XML Schema definitions.",
  "tags": [
  {  "tagName": "private",
         "values": []}  ],
  "members": [
  { "type": "method",
        "qname": "mx.rpc.xml.XMLDecoder",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "makeObjectsBindable",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "When makeObjectsBindable is set to true, anonymous Objects and Arrays are wrapped to make them bindable. Objects are wrapped with <code>mx.utils.ObjectProxy</code> and Arrays are wrapped with <code>mx.collections.ArrayCollection</code>.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "recordXSIType",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "When recordXSIType is set to true, if an encoded complexType has an <code>xsi:type</code> attribute the type information will be recorded on the decoded instance if it is strongly typed and implements <code>mx.rpc.xml.IXMLSchemaInstance</code> or is an anonymous <code>mx.utils.ObjectProxy</code>. This type information can be used to post process the decoded objects and identify which concrete implementation of a potentially abstract type was used. The default is false.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.rpc.xml.SchemaTypeRegistry",
        "qname": "typeRegistry",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Maps XML Schema types by QName to ActionScript Classes in order to create strongly typed objects when decoding content.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "decode",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Decodes an XML document to an ActionScript object.  This may be an XML instance, an XMLList of length 1 or a String that is valid XML. describes how to decode the value, or the name to be used for the decoded value when a type parameter is also specified. <code>complexType</code> definition that describes how to decode the value. schema to describe how to decode this value, a custom element definition can be provided.",
        "tags": [
        {  "tagName": "param",
               "values": ["xml The XML instance to decode to an ActionScript object.", "name The QName of an XML Schema <code>element</code> that", "type The QName of an XML Schema <code>simpleType</code> or", "definition If neither a top level element nor type exists in the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "*",
          "params": [{ "name": "xml", "type": "*"},
        { "name": "name", "type": "QName"},
        { "name": "type", "type": "QName"},
        { "name": "definition", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "decodeAnyType",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": [{ "name": "parent", "type": "*"},
        { "name": "name", "type": "QName"},
        { "name": "valueElements", "type": "XMLList"}]}
      ,
      { "type": "method",
        "qname": "reset",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Resets the decoder to its initial state, including resetting any Schema scope to the top level and releases the current XML document by setting it to null.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "getValue",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Assuming the parent is XML, the decoder looks for child element(s) with the given name. If a single child element exists that contains simple content, the simple content is returned unwrapped.",
        "tags": [
        {  "tagName": "see",
               "values": ["#parseValue"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "*",
          "params": [{ "name": "parent", "type": "*"},
        { "name": "name", "type": "*"},
        { "name": "index", "type": "Number"}]}
      ,
      { "type": "method",
        "qname": "includeNamespace",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Tests whether a given namespace is included in a wildcard definition. If no restrictions are provided the default behavior is to include all namespaces.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "namespaceURI", "type": "String"},
        { "name": "includedNamespaces", "type": "Array"}]}
      ,
      { "type": "method",
        "qname": "isXSINil",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Boolean",
          "params": [{ "name": "value", "type": "*"}]}
      ,
      { "type": "method",
        "qname": "getUnqualifiedClassName",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Returns the name of the specified object's class, such as <code>&quot;Button&quot;</code>  <p>This string does not include the package name. If you need the package name as well, call the <code>getQualifiedClassName()</code> method in the flash.utils package. It will return a string such as <code>&quot;mx.controls::Button&quot;</code>.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "object", "type": "Object"}]}
      ,
      { "type": "field",
        "qname": "listClass",
        "return": "Class",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The <code>mx.collections.IList</code> implementation to use when decoding an array of values and <code>makeObjectsBindable</code> is set to true. The default is <code>mx.collections.ArrayCollection</code>.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "document",
        "return": "XML",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The current, top level XML document to decode.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  ,
  "events": [
  ]
  }
