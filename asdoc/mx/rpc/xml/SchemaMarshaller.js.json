{ "type": "class",
  "qname": "mx.rpc.xml.SchemaMarshaller",
  "baseClassname": ""
  ,
    "description": "FIXME: Derivations and restrictions need to be considered in addition to base schema types",
  "tags": [
  {  "tagName": "private",
         "values": []}  ],
  "members": [
  { "type": "method",
        "qname": "mx.rpc.xml.SchemaMarshaller",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "",
          "params": [{ "name": "constants", "type": "mx.rpc.xml.SchemaConstants"},
        { "name": "datatypes", "type": "mx.rpc.xml.SchemaDatatypes"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "validating",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Determines whether this marshaller will throw errors for input that violates the specified format or restrictions for the associated type. Type errors are still thrown for unexpected input types.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "marshall",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "This function converts an ActionScript value to a String for XML simple content based on a built-in XML Schema type. If a type is not provided, the <code>anyType</code> is assumed.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "*",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshall",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "This function converts XML simple content (formatted based on a built-in XML Schema type) to an ActionScript value. If a type is not provided, the <code>anyType</code> is assumed.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "*",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "marshallAny",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "In the case of XML Schema ur-types such as <code>anyType</code> and <code>anySimpleType</code> we try to guess what the equivalent XML Schema simple datatype should be based on the ActionScript type. As a last resort, the <code>string</code> datatype is used.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "*",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "marshallBase64Binary",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "marshallBoolean",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The boolean schema type allows the string values 'true' or '1' for true values and 'false' or '0' for false values. This marshaller, by default, represents values using 'true' or false. If a String value of '1' or '0' is passed, however, it is preserved.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "marshallDatetime",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "marshallDecimal",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "FIXME: Handle precision and exponent restrictions.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "marshallDouble",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "FIXME: Handle precision and exponent restrictions.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "marshallDuration",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "marshallFloat",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "FIXME: Handle precision and exponent restrictions.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "marshallGregorian",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "marshallHexBinary",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The schema type hexBinary represents arbitrary hex-encoded binary data. Each binary octet is encoded as a character tuple consisting of two hexadecimal digits (which is treated case insensitively although capital letters A-F are always used on encoding). These tuples are added to a String to serialize the binary data.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "marshallInteger",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The schema type integer is dervied from the decimal type via restrictions by fixing the value of fractionDigits to be 0 and disallowing the trailing decimal point. The schema types long, int, short, byte are derived from integer by restricting the maxInclusive and minInclusive properties. Other types such as nonPositiveInteger, negativeInteger, nonNegativeInteger, positiveInteger, unsignedLong, unsignedInt, unsignedShort and unsignedByte are also dervied from integer through similar restrictions.  This method first calls parses the <code>value</code> as a Number. It then uses <code>Math.floor()</code> on the number to remove any fraction digits and then checks that the result is within the specified <code>min</code> and <code>max</code> for the type. Note that decimal values are not rounded. This method handles integers longer than 32-bit so ActionScript int or uint types are not used internally.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "marshallString",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallAny",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "*",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallBase64Binary",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "mx.utils.ByteArray",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallBoolean",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Boolean",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallDate",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Object",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallDatetime",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Handles dateTime and time types.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallDecimal",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Number",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallDouble",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Number",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallDuration",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "*",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallFloat",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Number",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallGregorian",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "*",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallHexBinary",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "mx.utils.ByteArray",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallInteger",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Number",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "unmarshallString",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "String",
          "params": [{ "name": "value", "type": "*"},
        { "name": "type", "type": "QName"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "guessSimpleType",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "*",
          "params": [{ "name": "value", "type": "*"}]}
      ,
      { "type": "field",
        "qname": "byteArrayAsBase64Binary",
        "return": "Boolean",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "A Boolean flag to determines whether ActionScript ByteArrays should be serialized as base64Binary or hexBinary when specific XML Schema type information has not been provided. The default is true meaning base64Binary.",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.utils.ByteArray"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "whitespaceReplacePattern",
        "return": "RegExp",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "A RegEx pattern to help replace all whitespace characters in the content of certain simple types with #x20 (space) characters. The XML Schema specification defines whitespace as #x9 (tab), #xA (line feed) and #xD (carriage return).",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "whitespaceCollapsePattern",
        "return": "RegExp",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "A RegEx pattern to help collapse all consecutive whitespace characters in the content of certain simple types to a single #x20 (space) character. The XML Schema specification defines whitespace as #x9 (tab), #xA (line feed) and #xD (carriage return).",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "whitespaceTrimPattern",
        "return": "RegExp",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "A RegEx pattern to help trim all leading and trailing spaces in the content of certain simple types. For whitespace <code>collapse</code>, this RegEx is executed after the whitespaceCollapsePattern RegEx has been executed.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "FLOAT_MAX_VALUE",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "FLOAT_MIN_VALUE",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "LONG_MAX_VALUE",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "LONG_MIN_VALUE",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "SHORT_MAX_VALUE",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "SHORT_MIN_VALUE",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "BYTE_MAX_VALUE",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "BYTE_MIN_VALUE",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "ULONG_MAX_VALUE",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "USHORT_MAX_VALUE",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "UBYTE_MAX_VALUE",
        "return": "Number",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]}]
  ,
  "events": [
  ]
  }
