{ "type": "class",
  "qname": "mx.rpc.xml.XMLEncoder",
  "baseClassname": "mx.rpc.xml.SchemaProcessor"
  ,
    "description": "Encodes an ActionScript Object graph to XML based on an XML Schema.",
  "tags": [
  {  "tagName": "private",
         "values": []}  ],
  "members": [
  { "type": "method",
        "qname": "mx.rpc.xml.XMLEncoder",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "",
          "params": []}
      ,
      { "type": "method",
        "qname": "encode",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Encodes an ActionScript value as XML.  describes how to encode the value, or the name to be used for the encoded XML node when a type parameter is also specified. <code>complexType</code> definition that describes how to encode the schema to describe how to encode this value, a custom element definition can be provided.",
        "tags": [
        {  "tagName": "param",
               "values": ["value The ActionScript value to encode as XML.", "name The QName of an XML Schema <code>element</code> that", "type The QName of an XML Schema <code>simpleType</code> or", "definition If neither a top level element nor type exists in the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "XMLList",
          "params": [{ "name": "value", "type": "*"},
        { "name": "name", "type": "QName"},
        { "name": "type", "type": "QName"},
        { "name": "definition", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "encodeComplexType",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": [{ "name": "definition", "type": "XML"},
        { "name": "parent", "type": "XML"},
        { "name": "name", "type": "QName"},
        { "name": "value", "type": "*"},
        { "name": "restriction", "type": "XML"}]}
      ,
      { "type": "method",
        "qname": "encodeXSINil",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Sets the xsi:nil attribute when necessary  nillable is strictly enforced, this definition must explicitly specify nillable=true.    not set.",
        "tags": [
        {  "tagName": "param",
               "values": ["definition The Schema definition of the expected type. If", "name The name of the element to be created", "value The value to check"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["content The element where xsi:nil was set, or null if xsi:nil was"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "XML",
          "params": [{ "name": "definition", "type": "XML"},
        { "name": "name", "type": "QName"},
        { "name": "value", "type": "*"},
        { "name": "isRequired", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "getXSIType",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Checks to see whether a value defines a custom XSI type to be used during encoding, otherwise the default type is returned.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "QName",
          "params": [{ "name": "value", "type": "*"}]}
      ,
      { "type": "method",
        "qname": "setXSIType",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Record custom XSI type information for this XML node by adding an xsi:type attribute with the value set to the qualified type name.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "parent", "type": "XML"},
        { "name": "type", "type": "QName"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "strictNillability",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Function",
        "qname": "xmlSpecialCharsFilter",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Function to be used for escaping XML special characters in simple content. Returns default implementation in this class.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  ,
  "events": [
  ]
  }
