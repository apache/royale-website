{ "type": "class",
  "qname": "mx.rpc.AbstractOperation",
  "baseClassname": "mx.rpc.AbstractInvoker"
  ,
    "description": "The AbstractOperation class represents an individual method on a service. An Operation can be called either by invoking the function of the same name on the service or by accessing the Operation as a property on the service and calling the <code>send()</code> method.",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.rpc.AbstractService", "mx.rpc.remoting.RemoteObject", "mx.rpc.soap.WebService"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.rpc.AbstractOperation",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Creates a new Operation. This is usually done directly by the MXML compiler or automatically by the service when an unknown Operation has been accessed. It is not recommended that a developer use this constructor directly.",
        "tags": [
        {  "tagName": "param",
               "values": ["service The service on which the Operation is being invoked.", "name The name of the new Operation."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "service", "type": "mx.rpc.AbstractService"},
        { "name": "name", "type": "String"}]}
      ,
      { "type": "field",
        "qname": "arguments",
        "return": "Object",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The arguments to pass to the Operation when it is invoked. If you call the <code>send()</code> method with no parameters, an array based on this object is sent. If you call the <code>send()</code> method with parameters (or call the function directly on the service) those parameters are used instead of whatever is stored in this property. For RemoteObject Operations the associated argumentNames array determines the order of the arguments passed.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]},
            {  "tagName": "royalesuppresspublicvarwarning",
               "values": []}  ]},
      { "type": "field",
        "qname": "properties",
        "return": "Object",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "This is a hook primarily for framework developers to register additional user specified properties for your operation.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]},
            {  "tagName": "royalesuppresspublicvarwarning",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "name",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The name of this Operation. This is how the Operation is accessed off the service. It can only be set once.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "mx.rpc.AbstractService",
        "qname": "service",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Provides convenient access to the service on which the Operation is being invoked. Note that the service cannot be changed after the Operation is constructed.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "send",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Executes the method. Any arguments passed in are passed along as part of the method call. If there are no arguments passed, the arguments object is used as the source of parameters.  are no arguments passed, the arguments object is used as the source of parameters.  The same object is available in the <code>result</code> and <code>fault</code> events from the <code>token</code> property.",
        "tags": [
        {  "tagName": "param",
               "values": ["args Optional arguments passed in as part of the method call. If there"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["AsyncToken object."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.rpc.AsyncToken",
          "params": [{ "name": "args", "type": "Array"}]}
      ,
      { "type": "method",
        "qname": "dispatchRpcEvent",
        "namespace": "mx_internal",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.rpc.events.AbstractEvent"}]}
      ,
      { "type": "field",
        "qname": "_service",
        "return": "mx.rpc.AbstractService",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]}]
  ,
  "events": [
  { "qname": "result",
        "type": "mx.rpc.events.ResultEvent"
      ,
          "description": "Dispatched when an Operation invocation successfully returns.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.rpc.events.ResultEvent.RESULT"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "fault",
        "type": "mx.rpc.events.FaultEvent"
      ,
          "description": "Dispatched when an Operation call fails.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.rpc.events.FaultEvent.FAULT"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
