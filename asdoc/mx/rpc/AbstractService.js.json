{ "type": "class",
  "qname": "mx.rpc.AbstractService",
  "baseClassname": "org.apache.royale.utils.Proxy"
  ,
    "description": "The AbstractService class is the base class for the HTTPMultiService, WebService, and RemoteObject classes. This class does the work of creating Operations which do the actual execution of remote procedure calls.",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.rpc.AbstractService",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "param",
               "values": ["destination The destination of the service."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "destination", "type": "String"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.messaging.ChannelSet",
        "qname": "channelSet",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": [],
        "deprecated": {},
          "description": "Provides access to the ChannelSet used by the service. The ChannelSet can be manually constructed and assigned, or it will be dynamically created to use the configured Channels for the <code>destination</code> for this service.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "destination",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": [],
        "deprecated": {},
          "description": "The destination of the service. This value should match a destination entry in the services-config.xml file.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "managers",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": [],
        "deprecated": {},
          "description": "The managers property stores a list of data managers which modify the behavior of this service.  You can use this hook to define one or more manager components associated with this service.  When this property is set, if the managers have a property called &quot;service&quot; that property is set to the value of this service.  When this service is initialized, we also call the initialize method on any manager components.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "operations",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": [],
        "deprecated": {},
          "description": "The Operations array is usually only set by the MXML compiler if you create a service using an MXML tag.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "requestTimeout",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": [],
        "deprecated": {},
          "description": "Provides access to the request timeout in seconds for sent messages. A value less than or equal to zero prevents request timeout.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "_keepLastResult",
        "return": "Boolean",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "keepLastResult",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": [],
        "deprecated": {},
          "description": "Flag indicating whether the service's operations should keep their last call result for later access. <p>Setting this flag at the service level will set <code>keepLastResult</code> for each operation, unless explicitly  set in the operation.</p> <p> If set to true or not set, each operation's last call result will be accessible through its <code>lastResult</code> bindable property. </p> <p> If set to false, each operation's last call result will be cleared after the call, and must be processed in the operation's result handler. This will allow the result object to be garbage collected, which is especially useful if the operation is only called a few times and returns a large result. </p>",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.rpc.AbstractInvoker#keepLastResult"]},
            {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 3"]},
            {  "tagName": "productversion",
               "values": ["Flex 4.11"]}  ]},
      { "type": "method",
        "qname": "initialize",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": [],
        "deprecated": {},
          "description": "Called to initialize the service.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "getProperty",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "*",
          "params": [{ "name": "propName", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "setProperty",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": [{ "name": "propName", "type": "String"},
        { "name": "value", "type": "*"}]}
      ,
      { "type": "method",
        "qname": "hasProperty",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Boolean",
          "params": [{ "name": "propName", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "deleteProperty",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Boolean",
          "params": [{ "name": "propName", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "callProperty",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "*",
          "params": [{ "name": "name", "type": "*"},
        { "name": "args", "type": "Array"}]}
      ,
      { "type": "method",
        "qname": "propertyNames",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "Array",
          "params": []}
      ,
      { "type": "method",
        "qname": "getLocalName",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "String",
          "params": [{ "name": "name", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "getOperation",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": [],
        "deprecated": {},
          "description": "Returns an Operation of the given name. If the Operation wasn't created beforehand, subclasses are responsible for creating it during this call. Operations are usually accessible by simply naming them after the service variable (<code>myService.someOperation</code>), but if your Operation name happens to match a defined method on the service (like <code>setCredentials</code>), you can use this method to get the Operation instead.",
        "tags": [
        {  "tagName": "param",
               "values": ["name Name of the Operation."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Operation that executes for this name."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.rpc.AbstractOperation",
          "params": [{ "name": "name", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "disconnect",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": [],
        "deprecated": {},
          "description": "Disconnects the service's network connection and removes any pending request responders. This method does not wait for outstanding network operations to complete.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "setCredentials",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": [],
        "deprecated": {},
          "description": "Sets the credentials for the destination accessed by the service when using Data Services on the server side. The credentials are applied to all services connected over the same ChannelSet. Note that services that use a proxy or a third-party adapter to a remote endpoint will need to setRemoteCredentials instead.  credentials. The default is null, which implies the legacy charset of ISO-Latin-1. The only other supported charset is &quot;UTF-8&quot;.",
        "tags": [
        {  "tagName": "param",
               "values": ["username The username for the destination.", "password The password for the destination.", "charset The character set encoding to use while encoding the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "username", "type": "String"},
        { "name": "password", "type": "String"},
        { "name": "charset", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "logout",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": [],
        "deprecated": {},
          "description": "Logs the user out of the destination. Logging out of a destination applies to everything connected using the same ChannelSet as specified in the server configuration. For example, if you're connected over the my-rtmp channel and you log out using one of your RPC components, anything that was connected over the same ChannelSet is logged out.  <p><b>Note:</b> Adobe recommends that you use the mx.messaging.ChannelSet.logout() method rather than this method. </p>",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.messaging.ChannelSet#logout()"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "setRemoteCredentials",
        "namespace": "public",
        "bindable": ["operationsChange"],
        "details": [],
        "deprecated": {},
          "description": "The username and password to be used to authenticate a user when accessing a remote, third-party endpoint such as a web service through a proxy or a remote object through a custom adapter when using Data Services on the server side.  remote credentials. The default is null, which implies the legacy charset of ISO-Latin-1. The only other supported charset is &quot;UTF-8&quot;.",
        "tags": [
        {  "tagName": "param",
               "values": ["remoteUsername The username to pass to the remote endpoint", "remotePassword The password to pass to the remote endpoint", "charset The character set encoding to use while encoding the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "remoteUsername", "type": "String"},
        { "name": "remotePassword", "type": "String"},
        { "name": "charset", "type": "String"}]}
      ,
      { "type": "field",
        "qname": "_availableChannelIds",
        "return": "Array",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "asyncRequest",
        "return": "mx.rpc.AsyncRequest",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]}]
  ,
  "events": [
  { "qname": "invoke",
        "type": "mx.rpc.events.InvokeEvent"
      ,
          "description": "The invoke event is dispatched when a service Operation is invoked so long as an Error is not thrown before the Channel attempts to send the message.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.rpc.events.InvokeEvent.INVOKE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "result",
        "type": "mx.rpc.events.ResultEvent"
      ,
          "description": "The result event is dispatched when a service call successfully returns and isn't handled by the Operation itself.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.rpc.events.ResultEvent.RESULT"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "fault",
        "type": "mx.rpc.events.FaultEvent"
      ,
          "description": "The fault event is dispatched when a service call fails and isn't handled by the Operation itself.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.rpc.events.FaultEvent.FAULT"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
