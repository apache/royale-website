{ "type": "class",
  "qname": "mx.rpc.http.Operation",
  "baseClassname": "mx.rpc.http.AbstractOperation"
  ,
    "description": "An Operation used specifically by an HTTPMultiService.  An Operation is an individual operation on a service usually corresponding to a single operation on the server side.  An Operation can be called either by invoking the function of the same name on the service or by accessing the Operation as a property on the service and calling the <code>send(param1, param2)</code> method.  HTTP services also support a sendBody method which allows you to directly specify the body of the HTTP response.  If you use the send(param1, param2) method, the body is typically formed by combining the argumentNames property of the operation with the parameters sent.  An Object is created which uses the argumentNames[i] as the key and the corresponding parameter as the value.  <p>The exact way in which the HTTP operation arguments is put into the HTTP body is determined by the serializationFilter used.</p>",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.rpc.http.Operation",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Creates a new Operation.     Creates a new Operation.",
        "tags": [
        {  "tagName": "param",
               "values": ["service The HTTPMultiService object defining the service.", "name The name of the service.", "service The HTTPMultiService object defining the service.", "name The name of the service."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "service", "type": "mx.rpc.http.HTTPMultiService"},
        { "name": "name", "type": "String"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "concurrency",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Value that indicates how to handle multiple calls to the same service operation. The default value is <code>multiple</code>. The following values are permitted: <ul> <li><code>multiple</code> Existing requests are not cancelled, and the developer is responsible for ensuring the consistency of returned data by carefully managing the event stream. This is the default value.</li> <li><code>single</code> Only a single request at a time is allowed on the operation; multiple requests generate a fault.</li> <li><code>last</code> Making a request cancels any existing request.</li> </ul>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "makeObjectsBindable",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "When this value is true, anonymous objects returned are forced to bindable objects.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "method",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []}  ]},
      { "type": "method",
        "qname": "setService",
        "namespace": "mx_internal",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": [{ "name": "s", "type": "mx.rpc.AbstractService"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "showBusyCursor",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "rootURL",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "The rootURL is used to compute the URL for an HTTP service operation when the a relative URL is specified for the operation.  The directory name of the rootURL is prepended to any relative URLs for the operation.  It is typically more convenient to set the baseURL since baseURL specifies the directory name directly whereas rootURL specifies the name of a file whose directory name is prepended.  If neither rootURL nor baseURL are set explicitly, the directory name of the .swf file is prepended to relative paths.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "useProxy",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "contentType",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []}  ]},
      { "type": "method",
        "qname": "send",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Executes the http operation. Any arguments passed in are passed along as part of the operation call. If there are no arguments passed, the arguments property of class is used as the source of parameters.  HTTP operations commonly take named parameters, not positional parameters.  To supply the names for these parameters, you can also set the argumentNames property to an array of the property names.  are no arguments passed, the arguments object is used as the source of parameters.  The same object is available in the <code>result</code> and <code>fault</code> events from the <code>token</code> property.",
        "tags": [
        {  "tagName": "param",
               "values": ["args Optional arguments passed in as part of the method call. If there"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["AsyncToken Call using the asynchronous completion token pattern."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.rpc.AsyncToken",
          "params": [{ "name": "args", "type": "Array"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "resultFormat",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.rpc.AsyncRequest",
        "qname": "asyncRequest",
        "namespace": "mx_internal",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Use the asyncRequest from the parent service",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  ,
  "events": [
  ]
  }
