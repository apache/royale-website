{ "type": "class",
  "qname": "mx.controls.sliderClasses.Slider",
  "baseClassname": "mx.core.UIComponent"
  ,
    "description": "The Slider class is the base class for the Flex slider controls. The slider controls let users select a value by moving a slider thumb between the end points of the slider track. The current value of the slider is determined by the relative location of the thumb between the end points of the slider, corresponding to the slider's minimum and maximum values. The Slider class is subclassed by HSlider and VSlider.   <p>The Slider class cannot be used as an MXML tag. Use the <code>&lt;mx:HSlider&gt;</code> and <code>&lt;mx:VSlider&gt;</code> tags instead. However, the Slider class does define tag attributes used by the <code>&lt;mx:HSlider&gt;</code> and <code>&lt;mx:VSlider&gt;</code> tags. </p>  <p>The Slider class inherits all of the tag attributes of its superclass, and adds the following tag attributes:</p>  <pre>\\n &lt;mx:<i>tagname</i>\\n <strong>Properties</strong>\\n allowThumbOverlap=&quot;false|true&quot;\\n allowTrackClick=&quot;true|false&quot;\\n dataTipFormatFunction=&quot;undefined&quot;\\n direction=&quot;horizontal|vertical&quot;\\n labels=&quot;undefined&quot;\\n liveDragging=&quot;false|true&quot;\\n maximum=&quot;10&quot;\\n minimum=&quot;0&quot;\\n showDataTip=&quot;true|false&quot;\\n sliderDataTipClass=&quot;sliderDataTip&quot;\\n sliderThumbClass=&quot;SliderThumb&quot;\\n snapInterval=&quot;0&quot;\\n thumbCount=&quot;1&quot;\\n tickInterval=&quot;0&quot;\\n tickValues=&quot;undefined&quot;\\n value=&quot;<i>The value of the minimum property.</i>&quot;\\n \\n <strong>Styles</strong>\\n borderColor=&quot;0x919999&quot;\\n dataTipOffset=&quot;16&quot;\\n dataTipPrecision=&quot;2&quot;\\n dataTipStyleName=&quot;undefined&quot;\\n fillAlphas=&quot;[0.6, 0.4, 0.75, 0.65]&quot;\\n fillColors=&quot;[0xFFFFFF, 0xCCCCCC, 0xFFFFFF, 0xEEEEEE;]&quot;\\n labelOffset=&quot;-10&quot;\\n labelStyleName=&quot;undefined&quot;\\n showTrackHighlight=&quot;false&quot;\\n slideDuration=&quot;300&quot;\\n slideEasingFunction=&quot;undefined&quot;\\n thumbDisabledSkin=&quot;SliderThumbSkin&quot;\\n thumbDownSkin=&quot;SliderThumbSkin&quot;\\n thumbOffset=&quot;0&quot;\\n thumbOverSkin=&quot;SliderThumbSkin&quot;\\n thumbUpSkin=&quot;SliderThumbSkin&quot;\\n tickColor=&quot;0x6F7777&quot;\\n tickLength=&quot;3&quot;\\n tickOffset=&quot;-6&quot;\\n tickThickness=&quot;1&quot;\\n trackColors=&quot;[ 0xEEEEEE, 0xFFFFFF ]&quot;\\n tracHighlightSkin=&quot;SliderHighlightSkin&quot;\\n trackMargin=&quot;undefined&quot;\\n trackSkin=&quot;SliderTrackSkin&quot;\\n \\n <strong>Events</strong>\\n change=&quot;<i>No default</i>&quot;\\n thumbDrag=&quot;<i>No default</i>&quot;\\n thumbPress=&quot;<i>No default</i>&quot;\\n thumbRelease=&quot;<i>No default</i>&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.controls.sliderClasses.Slider",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "method",
        "qname": "addedToParent",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "setActualSize",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": [{ "name": "w", "type": "Number"},
        { "name": "h", "type": "Number"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "measuredWidth",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "measuredHeight",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "method",
        "qname": "invalidateDisplayList",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "invalidateProperties",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "baselinePosition",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "enabled",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "tabIndex",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "allowThumbOverlap",
        "return": "Boolean",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If set to <code>false</code>, then each thumb can only be moved to the edge of the adjacent thumb. If <code>true</code>, then each thumb can be moved to any position on the track.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "allowTrackClick",
        "return": "Boolean",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies whether clicking on the track will move the slider thumb.",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Function",
        "qname": "dataTipFormatFunction",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Callback function that formats the data tip text. The function takes a single Number as an argument and returns a formatted String.  <p>The function has the following signature:</p> <pre>\\n funcName(value:Number):String\\n </pre>  <p>The following example prefixes the data tip text with a dollar sign and formats the text using the <code>dataTipPrecision</code> of a Slider Control named 'slide': </p>  <pre>\\n import mx.formatters.NumberBase;\\n function myDataTipFormatter(value:Number):String {\\n var dataFormatter:NumberBase = new NumberBase(&quot;.&quot;, &quot;,&quot;, &quot;.&quot;, &quot;&quot;);\\n return   &quot;$ &quot; + dataFormatter.formatPrecision(String(value), slide.getStyle(&quot;dataTipPrecision&quot;));\\n }\\n </pre>",
        "tags": [
        {  "tagName": "default",
               "values": ["undefined"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "direction",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The orientation of the slider control. Valid values in MXML are <code>&quot;horizontal&quot;</code> or <code>&quot;vertical&quot;</code>.  <p>In ActionScript, you use the following constants to set this property: <code>SliderDirection.VERTICAL</code> and <code>SliderDirection.HORIZONTAL</code>.</p>  The HSlider and VSlider controls set this property for you; do not set it when using those controls.",
        "tags": [
        {  "tagName": "default",
               "values": ["SliderDirection.HORIZONTAL"]},
            {  "tagName": "see",
               "values": ["mx.controls.sliderClasses.SliderDirection"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "labels",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An array of strings used for the slider labels. Flex positions the labels at the beginning of the track, and spaces them evenly between the beginning of the track and the end of the track.  <p>For example, if the array contains three items, the first item is placed at the beginning of the track, the second item in the middle, and the last item at the end of the track.</p>  <p>If only one label is specified, it is placed at the beginning of the track. By default, labels are placed above the tick marks (if present) or above  the track. To align the labels with the tick marks, make sure that the number of tick marks is equal to the number of labels.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["undefined"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "liveDragging",
        "return": "Boolean",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies whether live dragging is enabled for the slider. If <code>false</code>, Flex sets the <code>value</code> and <code>values</code> properties and dispatches the <code>change</code> event when the user stops dragging the slider thumb. If <code>true</code>,  Flex sets the <code>value</code> and <code>values</code> properties and dispatches the <code>change</code> event continuously as the user moves the thumb.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "maximum",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The maximum allowed value on the slider.",
        "tags": [
        {  "tagName": "default",
               "values": ["10"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "minimum",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The minimum allowed value on the slider control.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "showDataTip",
        "return": "Boolean",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If set to <code>true</code>, show a data tip during user interaction containing the current value of the slider.",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Class",
        "qname": "sliderThumbClass",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A reference to the class to use for each thumb.",
        "tags": [
        {  "tagName": "default",
               "values": ["SliderThumb"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Class",
        "qname": "sliderDataTipClass",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A reference to the class to use for the data tip.",
        "tags": [
        {  "tagName": "default",
               "values": ["SliderDataTip"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "snapInterval",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies the increment value of the slider thumb as the user moves the thumb. For example, if <code>snapInterval</code> is 2, the <code>minimum</code> value is 0, and the <code>maximum</code> value is 10, the thumb snaps to the values 0, 2, 4, 6, 8, and 10 as the user move the thumb. A value of 0, means that the slider moves continuously between the <code>minimum</code> and <code>maximum</code> values.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "thumbCount",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The number of thumbs allowed on the slider. Possible values are 1 or 2. If set to 1, then the <code>value</code> property contains the current value of the slider. If set to 2, then the <code>values</code> property contains an array of values representing the value for each thumb.",
        "tags": [
        {  "tagName": "default",
               "values": ["1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Object",
        "qname": "thumbStyleFilters",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Set of styles to pass from the Slider to the thumbs.",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.styles.StyleProxy"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "tickInterval",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The spacing of the tick marks relative to the <code>maximum</code> value of the control. Flex displays tick marks whenever you set the <code>tickInterval</code> property to a nonzero value.  <p>For example, if <code>tickInterval</code> is 1 and <code>maximum</code> is 10,  then a tick mark is placed at each 1/10th interval along the slider. A value of 0 shows no tick marks. If the <code>tickValues</code> property is set to a non-empty Array, then this property is ignored.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "tickValues",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The positions of the tick marks on the slider. The positions correspond to the values on the slider and should be between the <code>minimum</code> and <code>maximum</code> values. For example, if the <code>tickValues</code> property is [0, 2.5, 7.5, 10] and <code>maximum</code> is 10, then a tick mark is placed in the following positions along the slider: the beginning of the slider, 1/4 of the way in from the left, 3/4 of the way in from the left, and at the end of the slider.  <p>If this property is set to a non-empty Array, then the <code>tickInterval</code> property is ignored.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["undefined"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "value",
        "namespace": "public",
        "bindable": ["change","valueCommit"],
        "details": [],
        "deprecated": {},
          "description": "Contains the position of the thumb, and is a number between the <code>minimum</code> and <code>maximum</code> properties. Use the <code>value</code> property when <code>thumbCount</code> is 1. When <code>thumbCount</code> is greater than 1, use the <code>values</code> property instead. The default value is equal to the minimum property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "values",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "An array of values for each thumb when <code>thumbCount</code> is greater than 1.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "measure",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Calculates the amount of space that the component takes up. A horizontal slider control calculates its height by examining the position of its labels, tick marks, and thumbs relative to the track. The height of the control is equivalent to the position of the bottom of the lowest element subtracted from the position of the top of the highest element. The width of a horizontal slider control defaults to 250 pixels. For a vertical slider control, the width and the length measurements are reversed.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "updateDisplayList",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Positions the elements of the control. The track, thumbs, labels, and tick marks are all positioned and sized by this method. The track is sized based on the length of the labels and on the track margin. If you specify a <code>trackMargin</code>, then the size of the track is equal to the available width minus the <code>trackMargin</code> times 2.  <p>Tick marks are spaced at even intervals along the track starting from the beginning of the track. An additional tick mark is placed at the end of the track if one doesn't already exist (if the tick interval isn't a factor of the maximum value). The tick mark y-position is based on the <code>tickOffset</code>. An offset of 0 places the bottom of the tick at the top of the track. Negative offsets move the ticks upwards while positive offsets move them downward through the track.</p>  <p>Labels are positioned at even intervals along the track. The labels are always horizontally centered above their interval position unless the <code>trackMargin</code> setting is too small. If you specify a <code>trackMargin</code>, then the first and last labels will position themselves at the left and right borders of the control. Labels will not crop or resize themselves if they overlap, so be sure to allow enough space for them to fit on the track. The y-position is based on the <code>labelOffset</code> property. An offset of 0 places the bottom of the label at the top of the track. Unlike tick marks, the labels can not be positioned to overlap the track. If the offset is a positive number, then the top of the label will be positioned below the bottom of the track.</p>  <p>The thumbs are positioned to overlap the track. Their x-position is determined by their value. The y-position is controlled by the <code>thumbOffset</code> property. An offset of 0 places the center of the thumb at the center of the track. A negative offset moves the thumbs upwards while a positive offset moves the thumbs downwards.</p>  <p>The placement of the tick marks, labels and thumbs are all independent from each other. They will not attempt to reposition themselves if they overlap.</p>  <p>For a vertical slider control, the same rules apply. In the above description, substitute width for height, height for width, left for up or top, right for down or bottom, x-position for y-position, and y-position for x-position.</p>  in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.  in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.",
        "tags": [
        {  "tagName": "param",
               "values": ["unscaledWidth Specifies the width of the component, in pixels,", "unscaledHeight Specifies the height of the component, in pixels,"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "unscaledWidth", "type": "Number"},
        { "name": "unscaledHeight", "type": "Number"}]}
      ,
      { "type": "method",
        "qname": "getThumbAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the thumb object at the given index. Use this method to style and customize individual thumbs in a slider control.",
        "tags": [
        {  "tagName": "param",
               "values": ["index The zero-based index number of the thumb."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["A reference to the SliderThumb object."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.controls.sliderClasses.SliderThumb",
          "params": [{ "name": "index", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "setThumbValueAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "This method sets the value of a slider thumb, and updates the display.  the value of, where a value of 0 corresponds to the first thumb.",
        "tags": [
        {  "tagName": "param",
               "values": ["index The zero-based index number of the thumb to set", "value The value to set the thumb to"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "index", "type": "int"},
        { "name": "value", "type": "Number"}]}
      ]
  ,
  "events": [
  { "qname": "change",
        "type": "mx.events.SliderEvent"
      ,
          "description": "Dispatched when the slider changes value due to mouse or keyboard interaction.  <p>If the <code>liveDragging</code> property is <code>true</code>, the event is dispatched continuously as the user moves the thumb. If <code>liveDragging</code> is <code>false</code>, the event is dispatched when the user releases the slider thumb.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.SliderEvent.CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "thumbDrag",
        "type": "mx.events.SliderEvent"
      ,
          "description": "Dispatched when the slider's thumb is pressed and then moved by the mouse. This event is always preceded by a <code>thumbPress</code> event.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.SliderEvent.THUMB_DRAG"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "thumbPress",
        "type": "mx.events.SliderEvent"
      ,
          "description": "Dispatched when the slider's thumb is pressed, meaning the user presses the mouse button over the thumb.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.SliderEvent.THUMB_PRESS"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "thumbRelease",
        "type": "mx.events.SliderEvent"
      ,
          "description": "Dispatched when the slider's thumb is released, meaning the user releases the mouse button after a <code>thumbPress</code> event.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.SliderEvent.THUMB_RELEASE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
