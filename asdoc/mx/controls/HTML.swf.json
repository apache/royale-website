{ "type": "class",
  "qname": "mx.controls.HTML",
  "baseClassname": "mx.core.ScrollControlBase"
  ,
    "description": "The HTML control lets you display HTML content in your application.  <p>You use the <code>location</code> property to specify the URL of an HTML page whose content is displayed in the control, or you can set the <code>htmlText</code> property to specify a String containing HTML-formatted text that is rendered in the control.</p>   <p>The <code>&lt;mx:HTML&gt;</code> tag inherits all of the tag attributes of its superclass and adds the following tag attributes:</p>  <pre>\\n &lt;mx:HTML\\n <strong>Properties</strong>\\n data=&quot;<i>null</i>&quot;\\n historyPosition=&quot;0&quot;\\n htmlHost=&quot;<i>null</i>&quot;\\n htmlLoaderFactory=&quot;mx.core.ClassFactory&quot;\\n htmlText=&quot;&quot;\\n listData=&quot;<i>null</i>&quot;\\n location=&quot;&quot;\\n paintsDefaultBackground=&quot;false&quot;\\n runtimeApplicationDomain=&quot;<i>null</i>&quot;\\n userAgent=&quot;<i>null</i>&quot;\\n \\n <strong>Styles</strong>\\n paddingBottom=&quot;0&quot;\\n paddingLeft=&quot;0&quot;\\n paddingRight=&quot;0&quot;\\n paddingTop=&quot;0&quot;\\n \\n <strong>Events</strong>\\n complete=&quot;<i>No default</i>&quot;\\n htmlDOMInitialize=&quot;<i>No default</i>&quot;\\n htmlRender=&quot;<i>No default</i>&quot;\\n locationChange=&quot;<i>No default</i>&quot;\\n uncaughtScriptException=&quot;<i>No default</i>&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "see",
         "values": ["../../flash/html/HTMLLoader.html HTMLLoader"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "pdfCapability",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The type of PDF support on the user's system, defined as an integer code value.  <p>An HTML object can display PDF content only if this property evaluates to <code>PDFCapability.STATUS_OK</code>. The PDFCapability class defines constants for possible values of the <code>pdfCapability</code> property, as follows:</p>  <table class=&quot;innertable&quot;> <tr> <th>PDFCapability constant</th> <th>Meaning</th> </tr> <tr> <td><code>STATUS_OK</code></td> <td>A sufficient version (8.1 or later) of Acrobat Reader is detected and PDF content can be loaded in an HTML object. <p><em>Note:</em> On Windows, if a Acrobat Acrobat or Acrobat Reader version 7.x or above is currently running on the user's system, that version is used even if a later version that supports loading PDF loaded in an HTML object is installed. In this case, if the the value of the <code>pdfCampability</code> property is <code>PDFCapability.STATUS_OK</code>, when an AIR application attempts to load PDF content into an HTML object, the older version of Acrobat or Reader displays an alert, without an error message displayed the AIR runtime. If this is a possible situation for your end users, you may consider providing them with instructions to close Acrobat while running your application. You may consider displaying these instructions if the PDF content does not load within an acceptable timeframe.</p></td> </tr> <tr> <td><code>ERROR_INSTALLED_READER_NOT_FOUND</code></td> <td>No version of Acrobat Reader is detected. An HTML object cannot display PDF content.</td> </tr> <tr> <td><code>ERROR_INSTALLED_READER_TOO_OLD</code></td> <td>Acrobat Reader has been detected, but the version is too old. An HTML object cannot display PDF content.</td> </tr> <tr> <td><code>ERROR_PREFERED_READER_TOO_OLD</code></td> <td>A sufficient version (8.1 or later) of Acrobat Reader is detected, but the the version of Acrobat Reader that is setup to handle PDF content is older than Reader 8.1. An HTML object cannot display PDF content.</td> </tr> </table>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "mx.controls.HTML",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "verticalScrollPosition",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "The offset into the content from the top edge.  This can be a pixel offset in some subclasses or some other metric like number of lines in a List or number of tiles in a TileList.",
        "tags": [
        {  "tagName": "default",
               "values": ["0", "0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3", "Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "contentHeight",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The height, in pixels, of the HTML content.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "contentWidth",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The width, in pixels, of the HTML content.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "data",
        "namespace": "public",
        "bindable": ["dataChange"],
        "details": [],
        "deprecated": {},
          "description": "Lets you pass a value to the component when you use it in an item renderer or item editor. You typically use data binding to bind a field of the <code>data</code> property to a property of this component.  <p>When you use the control as a drop-in item renderer or drop-in item editor, Flex automatically writes the current value of the item to the <code>text</code> property of this control.</p>  <p>You cannot set this property in MXML.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "see",
               "values": ["mx.core.IDataRenderer"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "historyLength",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The overall length of the history list, including back and forward entries.  This property has the same value as the <code>window.history.length</code> JavaScript property of the the HTML content.",
        "tags": [
        {  "tagName": "see",
               "values": ["#historyPosition"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "historyPosition",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The current position in the history list.  <p>The history list corresponds to the <code>window.history</code> object of the HTML content. Entries less than the current position are the &quot;back&quot; list; entries greater are &quot;forward.&quot; Attempting to set the position beyond the end sets it to the end.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "htmlLoader",
        "return": "org.apache.royale.utils.HTMLLoader",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The internal HTMLLoader object that renders the HTML content for this control.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.core.IFactory",
        "qname": "htmlLoaderFactory",
        "namespace": "public",
        "bindable": ["htmlLoaderFactoryChanged"],
        "details": [],
        "deprecated": {},
          "description": "The IFactory that creates an HTMLLoader-derived instance to use as the htmlLoader.  <p>The default value is an IFactory for HTMLLoader.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "htmlHost",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The HTMLHost object is used to handle changes to certain user interface elements in the HTML content, such as the <code>window.document.title</code> property.  <p>To override default behaviors for the HTMLLoader, create a subclass of the HTMLHost class, override its member functions to handle various user interface changes in the HTML content, and set this property to an instance of your subclass.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "htmlText",
        "namespace": "public",
        "bindable": ["htmlTextChanged"],
        "details": [],
        "deprecated": {},
          "description": "Specifies an HTML-formatted String for display by the control.  <p>Setting this property has the side effect of setting the <code>location</code> property to <code>null</code>, and vice versa.</p>  <p>Content added via the <code>htmlText</code> property is put in the application security sandbox. If an AIR application includes an HTML control located in the application sandbox, and remote HTML code is directly added into the control by setting the  <code>htmlText</code> property, any script contained in the HTML text is executed in the application sandbox.</p>",
        "tags": [
        {  "tagName": "default",
               "values": [""""]},
            {  "tagName": "see",
               "values": ["#location"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Object",
        "qname": "domWindow",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The JavaScript <code>window</code> object for the root frame of the HTML DOM inside this control.  <p>This property is <code>null</code> until the <code>htmlDOMInitialize</code> event has been dispatched.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "imeMode",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies the IME (input method editor) mode. The IME enables users to enter text in Chinese, Japanese, and Korean. Flex sets the specified IME mode when the control gets the focus, and sets it back to the previous value when the control loses the focus.  <p>The flash.system.IMEConversionMode class defines constants for the valid values for this property. You can also specify <code>null</code> to specify no IME.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "see",
               "values": ["flash.system.IMEConversionMode"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.controls.listClasses.BaseListData",
        "qname": "listData",
        "namespace": "public",
        "bindable": ["dataChange"],
        "details": [],
        "deprecated": {},
          "description": "When a component is used as a drop-in item renderer or drop-in item editor, Flex initializes the <code>listData</code> property of the component with the appropriate data from the List control. The component can then use the <code>listData</code> property to initialize the <code>data</code> property of the drop-in item renderer or drop-in item editor.  <p>You do not set this property in MXML or ActionScript; Flex sets it when the component is used as a drop-in item renderer or drop-in item editor.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "see",
               "values": ["mx.controls.listClasses.IDropInListItemRenderer"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Boolean",
        "qname": "loaded",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag which indicates whether the JavaScript <code>load</code> event corresponding to the previous loading operation has been delivered to the HTML DOM in this control.  <p>This property is <code>true</code> before the <code>complete</code> event is dispatched.</p>  <p>It is possible that this property never becomes <code>true</code>. This happens in the same cases in which the <code>complete</code> event is never dispatched.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "location",
        "namespace": "public",
        "bindable": ["locationChange"],
        "details": [],
        "deprecated": {},
          "description": "The URL of an HTML page to be displayed by this control.  <p>Setting this property has the side effect of setting the <code>htmlText</code> property to <code>null</code>, and vice versa.</p>",
        "tags": [
        {  "tagName": "default",
               "values": [""""]},
            {  "tagName": "see",
               "values": ["#htmlText"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "paintsDefaultBackground",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Whether this control's HTML content has a default opaque white background or not.  <p>If this property is <code>false</code>, then the background specified for this Flex control, if any, appears behind the HTML content.</p>  <p>However, if any HTML element has its own opaque background color (specified by style=&quot;background-color:gray&quot;, for instance), then that background appears behind that element.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false;"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.system.ApplicationDomain",
        "qname": "runtimeApplicationDomain",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The ApplicationDomain to use for HTML's <code>window.runtime</code> scripting.  <p>If this property is <code>null</code>, or if it specifies an ApplicationDomain from a different security domain than the HTML content, the HTML page uses a default <code>ApplicationDomain</code> for the page's domain.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "userAgent",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The user agent string to be used in content requests from this control.  <p>You can set the default user agent string used by all HTML controls in an application domain by setting the static <code>URLRequestDefaults.userAgent</code> property. If no value is set for the <code>userAgent</code> property (or if the value is set to <code>null</code>), the user agent string is set to the value of <code>URLRequestDefaults.userAgent</code>.</p>  <p>If neither the <code>userAgent</code> property of this control nor for <code>URLRequestDefaults.userAgent</code>, has a value set, a default value is used as the user agent string. This default value varies depending on the runtime operating system (such as Mac OS or Windows), the runtime language, and the runtime version, as in the following two examples:</p>  <pre>\\n &quot;Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) AdobeAIR/1.0&quot;\\n &quot;Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) AdobeAIR/1.0&quot;\\n </pre>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "see",
               "values": ["flash.net.URLRequest#userAgent", "flash.net.URLRequestDefaults#userAgent"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "cancelLoad",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Cancels any load operation in progress.  <p>This method does nothing if it is called before this component's internal HTMLLoader (the <code>htmlLoader</code> property) has been created.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "historyBack",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Navigates back in this control's history list, if possible.  <p>Calling this method of the HTMLLoader object has the same effect as calling the <code>back()</code> method of the <code>window.history</code> property in JavaScript in the HTML content.</p>  <p>This method does nothing if it is called before this component's internal HTMLLoader (the <code>htmlLoader</code> property) has been created.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#historyPosition", "#historyForward()"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "historyForward",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Navigates forward in this control's history list, if possible.  <p>Calling this method of the HTMLLoader object has the same effect as calling the <code>forward()</code> method of the <code>window.history</code> property in JavaScript in the HTML content.</p>  <p>This function throws no errors.</p>  <p>This method does nothing if it is called before this component's internal HTMLLoader (the <code>htmlLoader</code> property) has been created.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["#historyPosition", "#historyBack()"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "historyGo",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Navigates the specified number of steps in this control's history list.  <p>This method navigates forward if the number of steps is positive and backward if it is negative. Navigation by zero steps is equivalent to calling <code>reload()</code>.</p>  <p>This method is equivalent to calling the <code>go()</code> method of the <code>window.history</code> property in JavaScript in the HTML content.</p>  <p>This method does nothing if it is called before this component's internal HTMLLoader (the <code>htmlLoader</code> property) has been created.</p>  to move forward (positive) or backward (negative).",
        "tags": [
        {  "tagName": "param",
               "values": ["steps The number of steps in the history list"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "steps", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "reload",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Reloads the HTML content from the current <code>location</code>.  <p>This method does nothing if it is called before this component's internal HTMLLoader (the <code>htmlLoader</code> property) has been created.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ]
  ,
  "events": [
  { "qname": "complete",
        "type": "org.apache.royale.events.Event"
      ,
          "description": "Dispatched after the last loading operation caused by setting the <code>location</code> or <code>htmlText</code> property has completed.  <p>This event is always dispatched asynchronously, after the JavaScript <code>load</code> event has been dispatched in the HTML DOM.</p>  <p>An event handler for this event may call any method or access any property of this control or its internal <code>htmlLoader</code>.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["location", "htmlText"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["org.apache.royale.events.Event.COMPLETE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "htmlDOMInitialize",
        "type": "org.apache.royale.events.Event"
      ,
          "description": "Dispatched after the HTML DOM has been initialized in response to a loading operation caused by setting the <code>location</code> or <code>htmlText</code> property.  <p>When this event is dispatched, no JavaScript methods have yet executed. The <code>domWindow</code>and <code>domWindow.document</code> objects exist, but other DOM objects may not. You can use this event to set properties onto the <code>domWindow</code> and <code>domWindow.document</code> objects for JavaScript methods to later access.</p>  <p>A handler for this event should not set any properties or call any methods which start another loading operation or which affect the URL for the current loading operation; doing so causes either an ActionScript or a JavaScript exception.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["location", "htmlText"]},
            {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["org.apache.royale.events.Event.HTML_DOM_INITIALIZE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "htmlRender",
        "type": "org.apache.royale.events.Event"
      ,
          "description": "Dispatched when this control's HTML content initially renders, and each time that it re-renders.  <p>Because an HTML control can dispatch many of these events, you should avoid significant processing in a <code>render</code> handler that might negatively impact performance.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["org.apache.royale.events.Event.HTML_RENDER"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "locationChange",
        "type": "org.apache.royale.events.Event"
      ,
          "description": "Dispatched when the <code>location</code> property changes.  <p>This event is always dispatched asynchronously. An event handler for this event may call any method or access any property of this control or its internal <code>htmlLoader</code>.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["org.apache.royale.events.Event.LOCATION_CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
