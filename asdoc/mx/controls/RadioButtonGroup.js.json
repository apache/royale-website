{ "type": "class",
  "qname": "mx.controls.RadioButtonGroup",
  "baseClassname": "org.apache.royale.events.EventDispatcher"
  ,
    "description": "The RadioButtonGroup control defines a group of RadioButton controls that act as a single mutually exclusive control; therefore, a user can select only one RadioButton control at a time. While grouping RadioButton instances in a RadioButtonGroup is optional, a group lets you do things like set a single event handler on a group of buttons, rather than on each individual button.  <p>The <code>id</code> property is required when you use the <code>&lt;mx:RadioButtonGroup&gt;</code> tag to define the name of the group.</p>  <p>Notice that the RadioButtonGroup control is a subclass of EventDispatcher, not UIComponent, and implements the IMXMLObject interface. All other Flex visual components are subclasses of UIComponent, which implements the IUIComponent interface. The RadioButtonGroup control has support built into the Flex compiler that allows you to use the RadioButtonGroup control as a child of a Flex container, even though it does not implement IUIComponent. All other container children must implement the IUIComponent interface.</p>  <p>Therefore, if you try to define a visual component as a subclass of EventDispatcher that implements the IMXMLObject interface, you will not be able to use it as the child of a container.</p>   <p>The <code>&lt;mx:RadioButtonGroup&gt;</code> tag inherits all of the tag attributes of its superclass, and adds the following tag attributes:</p>  <pre>\\n &lt;mx:RadioButtonGroup\\n <strong>Properties</strong>\\n enabled=&quot;true|false&quot;\\n id=&quot;<i>No default</i>&quot;\\n labelPlacement=&quot;right|left|top|bottom&quot;\\n \\n <strong>Events</strong>\\n change=&quot;<i>No default</i>&quot;\\n itemClick=&quot;<i>No default</i>&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/RadioButtonGroupExample.mxml"]},
      {  "tagName": "see",
         "values": ["mx.controls.RadioButton"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.controls.RadioButtonGroup",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.  the <code>document</code> parameter should not be used.",
        "tags": [
        {  "tagName": "see",
               "values": ["flash.events.EventDispatcher"]},
            {  "tagName": "param",
               "values": ["document In simple cases where a class extends EventDispatcher,"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "document", "type": "org.apache.royale.core.IDocument"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "enabled",
        "namespace": "public",
        "bindable": ["enabledChanged"],
        "details": [],
        "deprecated": {},
          "description": "Determines whether selection is allowed.",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "labelPlacement",
        "namespace": "public",
        "bindable": ["labelPlacementChanged"],
        "details": [],
        "deprecated": {},
          "description": "Position of the RadioButton label relative to the RadioButton icon for each control in the group. You can override this setting for the individual controls.  <p>Valid values in MXML are <code>&quot;right&quot;</code>, <code>&quot;left&quot;</code>, <code>&quot;bottom&quot;</code>, and <code>&quot;top&quot;</code>. </p>  <p>In ActionScript, you use the following constants to set this property: <code>ButtonLabelPlacement.RIGHT</code>, <code>ButtonLabelPlacement.LEFT</code>, <code>ButtonLabelPlacement.BOTTOM</code>, and <code>ButtonLabelPlacement.TOP</code>.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["\"right\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "numRadioButtons",
        "namespace": "public",
        "bindable": ["numRadioButtonsChanged"],
        "details": [],
        "deprecated": {},
          "description": "The number of RadioButtons that belong to this RadioButtonGroup.",
        "tags": [
        {  "tagName": "default",
               "values": ["\"undefined\""]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "selectedValue",
        "namespace": "public",
        "bindable": ["change","valueCommit"],
        "details": [],
        "deprecated": {},
          "description": "The value of the <code>value</code> property of the selected RadioButton control in the group, if this has been set to be something other than <code>null</code> (the default value). Otherwise, <code>selectedValue</code> is the value of the <code>label</code> property of the selected RadioButton. If no RadioButton is selected, this property is <code>null</code>.  <p>If you set <code>selectedValue</code>, Flex selects the RadioButton control whose <code>value</code> or <code>label</code> property matches this value.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.controls.RadioButton",
        "qname": "selection",
        "namespace": "public",
        "bindable": ["change","valueCommit"],
        "details": [],
        "deprecated": {},
          "description": "Contains a reference to the currently selected RadioButton control in the group. You can access the property in ActionScript only; it is not settable in MXML. Setting this property to <code>null</code> deselects the currently selected RadioButton control.",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "getRadioButtonAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the RadioButton control at the specified index.  RadioButtonGroup control, where the index of the first control is 0.",
        "tags": [
        {  "tagName": "param",
               "values": ["index The index of the RadioButton control in the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The specified RadioButton control."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.controls.RadioButton",
          "params": [{ "name": "index", "type": "int"}]}
      ]
  ,
  "events": [
  { "qname": "change",
        "type": "org.apache.royale.events.Event"
      ,
          "description": "Dispatched when the value of the selected RadioButton control in this group changes.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["flash.events.Event.CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemClick",
        "type": "mx.events.ItemClickEvent"
      ,
          "description": "Dispatched when a user selects a RadioButton control in the group. You can also set a handler for individual RadioButton controls.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.ItemClickEvent.ITEM_CLICK"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
