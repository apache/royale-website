{ "type": "class",
  "qname": "mx.controls.DataGrid",
  "baseClassname": "mx.controls.listClasses.DataGridListBase"
  ,
    "description": "The <code>DataGrid</code> control is like a List except that it can show more than one column of data making it suited for showing objects with multiple properties. <p> The DataGrid control provides the following features: <ul> <li>Columns of different widths or identical fixed widths</li> <li>Columns that the user can resize at runtime </li> <li>Columns that the user can reorder at runtime </li> <li>Optional customizable column headers</li> <li>Ability to use a custom item renderer for any column to display data other than text</li> <li>Support for sorting the data by clicking on a column</li> </ul> </p> The DataGrid control is intended for viewing data, and not as a layout tool like an HTML table. The mx.containers package provides those layout tools.  <p>The DataGrid control has the following default sizing characteristics:</p> <table class=&quot;innertable&quot;> <tr> <th>Characteristic</th> <th>Description</th> </tr> <tr> <td>Default size</td> <td>If the columns are empty, the default width is 300 pixels. If the columns contain information but define no explicit widths, the default width is 100 pixels per column. The DataGrid width is sized to fit the width of all columns, if possible. The default number of displayed rows, including the header is 7, and each row, by default, is 20 pixels high. </td> </tr> <tr> <td>Minimum size</td> <td>0 pixels.</td> </tr> <tr> <td>Maximum size</td> <td>5000 by 5000.</td> </tr> </table>  <p> The <code>&lt;mx:DataGrid&gt;</code> tag inherits all of the tag attributes of its superclass, except for <code>labelField</code>, <code>iconField</code>, and <code>iconFunction</code>, and adds the following tag attributes: </p> <pre>\\n &lt;mx:DataGrid\\n <b>Properties</b>\\n columns=&quot;<i>From dataProvider</i>&quot;\\n draggableColumns=&quot;true|false&quot;\\n editable=&quot;false|true&quot;\\n editedItemPosition=&quot;<code>null</code>&quot;\\n horizontalScrollPosition=&quot;null&quot;\\n imeMode=&quot;null&quot;\\n itemEditorInstance=&quot;null&quot;\\n minColumnWidth=&quot;<code>NaN</code>&quot;\\n resizableColumns=&quot;true|false&quot;\\n sortableColumns=&quot;true|false&quot;\\n \\n <b>Styles</b>\\n backgroundDisabledColor=&quot;0xEFEEEF&quot;\\n columnDropIndicatorSkin=&quot;DataGridColumnDropIndicator&quot;\\n columnResizeSkin=&quot;DataGridColumnResizeSkin&quot;\\n disabledIconColor=&quot;0x999999&quot;\\n headerColors=&quot;[#FFFFFF, #E6E6E6]&quot;\\n headerDragProxyStyleName=&quot;headerDragProxyStyle&quot;\\n headerSeparatorSkin=&quot;DataGridHeaderSeparator&quot;\\n headerStyleName=&quot;dataGridStyles&quot;\\n horizontalGridLineColor=&quot;0xF7F7F7&quot;\\n horizontalGridLines=&quot;false|true&quot;\\n horizontalLockedSeparatorSkin=&quot;undefined&quot;\\n horizontalSeparatorSkin=&quot;undefined&quot;\\n iconColor=&quot;0x111111&quot;\\n rollOverColor=&quot;0xB2E1FF&quot;\\n selectionColor=&quot;0x7FCEFF&quot;\\n sortArrowSkin=&quot;DataGridSortArrow&quot;\\n stretchCursor=&quot;<i>&quot;cursorStretch&quot; symbol from the Assets.swf file</i>&quot;\\n verticalGridLineColor=&quot;0xCCCCCC&quot;\\n verticalGridLines=&quot;false|true&quot;\\n verticalLockedSeparatorSkin=&quot;undefined&quot;\\n verticalSeparatorSkin=&quot;undefined&quot;\\n \\n <b>Events</b>\\n columnStretch=&quot;<i>No default</i>&quot;\\n headerRelease=&quot;<i>No default</i>&quot;\\n headerShift=&quot;<i>No default</i>&quot;\\n itemEditBegin=&quot;<i>No default</i>&quot;\\n itemEditBeginning=&quot;<i>No default</i>&quot;\\n itemEditEnd=&quot;<i>No default</i>&quot;\\n itemFocusIn=&quot;<i>No default</i>&quot;\\n itemFocusOut=&quot;<i>No default</i>&quot;\\n /&gt;\\n \\n <b>The following DataGrid code sample specifies the column order:</b>\\n &lt;mx:DataGrid&gt;\\n &lt;mx:dataProvider&gt;\\n &lt;mx:Object Artist=&quot;Pavement&quot; Price=&quot;11.99&quot;\\n Album=&quot;Slanted and Enchanted&quot;/&gt;\\n &lt;mx:Object Artist=&quot;Pavement&quot;\\n Album=&quot;Brighten the Corners&quot; Price=&quot;11.99&quot;/&gt;\\n &lt;/mx:dataProvider&gt;\\n &lt;mx:columns&gt;\\n &lt;mx:DataGridColumn dataField=&quot;Album&quot;/&gt;\\n &lt;mx:DataGridColumn dataField=&quot;Price&quot;/&gt;\\n &lt;/mx:columns&gt;\\n &lt;/mx:DataGrid&gt;\\n </pre> </p>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/SimpleDataGrid.mxml"]},
      {  "tagName": "see",
         "values": ["mx.controls.dataGridClasses.DataGridItemRenderer", "mx.controls.dataGridClasses.DataGridColumn", "mx.controls.dataGridClasses.DataGridDragProxy", "mx.events.DataGridEvent"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.controls.DataGrid",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "field",
        "qname": "itemEditorInstance",
        "return": "mx.controls.listClasses.IListItemRenderer",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "field",
        "qname": "resizableColumns",
        "return": "Boolean",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether the user can change the size of the columns. If <code>true</code>, the user can stretch or shrink the columns of the DataGrid control by dragging the grid lines between the header cells. If <code>true</code>, individual columns must also have their <code>resizable</code> properties set to <code>false</code> to prevent the user from resizing a particular column.",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "sortableColumns",
        "return": "Boolean",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether the user can sort the data provider items by clicking on a column header cell. If <code>true</code>, the user can sort the data provider items by clicking on a column header cell. The <code>DataGridColumn.dataField</code> property of the column or the <code>DataGridColumn.sortCompareFunction</code> property of the column is used as the sort field. If a column is clicked more than once the sort alternates between ascending and descending order. If <code>true</code>, individual columns can be made to not respond to a click on a header by setting the column's <code>sortable</code> property to <code>false</code>.  <p>When a user releases the mouse button over a header cell, the DataGrid control dispatches a <code>headerRelease</code> event if both this property and the column's sortable property are <code>true</code>. If no handler calls the <code>preventDefault()</code> method on the event, the DataGrid sorts using that column's <code>DataGridColumn.dataField</code> or <code>DataGridColumn.sortCompareFunction</code> properties.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "see",
               "values": ["mx.controls.dataGridClasses.DataGridColumn#dataField", "mx.controls.dataGridClasses.DataGridColumn#sortCompareFunction"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "createColumnItemRenderer",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the item renderer for a column cell or for a column header. This method returns the default item renderer if no custom render is assigned to the column.  <p>This method is public so that is can be accessed by the DataGridHeader class, and is primarily used in subclasses of the DataGrid control.</p>   and <code>false</code> to return the item render for the column cells.  the <code>data</code> Object for the item renderer. If <code>forHeader</code> is <code>true</code>, the DataGridColumn instance.",
        "tags": [
        {  "tagName": "param",
               "values": ["c The DataGridColumn instance of the item renderer.", "forHeader <code>true</code> to return the header item renderer,", "data If <code>forHeader</code> is <code>false</code>,"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The item renderer."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.controls.listClasses.IListItemRenderer",
          "params": [{ "name": "c", "type": "mx.controls.dataGridClasses.DataGridColumn"},
        { "name": "forHeader", "type": "Boolean"},
        { "name": "data", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "destroyItemEditor",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "This method closes an item editor currently open on an item renderer. You typically only call this method from within the event listener for the <code>itemEditEnd</code> event, after you have already called the <code>preventDefault()</code> method to prevent the default event listener from executing.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "drawRowBackground",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": [{ "name": "s", "type": "mx.core.UIComponent"},
        { "name": "rowIndex", "type": "int"},
        { "name": "y", "type": "Number"},
        { "name": "height", "type": "Number"},
        { "name": "color", "type": "uint"},
        { "name": "dataIndex", "type": "int"}]}
      ,
      { "type": "accessor",
        "access": "write-only",
        "return": "Boolean",
        "qname": "horizontalGridLines",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "write-only",
        "return": "uint",
        "qname": "horizontalGridLineColor",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "write-only",
        "return": "uint",
        "qname": "selectionColor",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "write-only",
        "return": "Class",
        "qname": "headerSeparatorSkin",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "editable",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether or not the user can edit items in the data provider. If <code>true</code>, the item renderers in the control are editable. The user can click on an item renderer to open an editor.  <p>You can turn off editing for individual columns of the DataGrid control using the <code>DataGridColumn.editable</code> property, or by handling the <code>itemEditBeginning</code> and <code>itemEditBegin</code> events</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "editedItemPosition",
        "namespace": "public",
        "bindable": ["itemFocusIn"],
        "details": [],
        "deprecated": {},
          "description": "The column and row index of the item renderer for the data provider item being edited, if any.  <p>This Object has two fields, <code>columnIndex</code> and <code>rowIndex</code>, the zero-based column and row indexes of the item. For example: {columnIndex:2, rowIndex:3}</p>  <p>Setting this property scrolls the item into view and dispatches the <code>itemEditBegin</code> event to open an item editor on the specified item renderer.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "headerHeight",
        "namespace": "public",
        "bindable": ["resize"],
        "details": [],
        "deprecated": {},
          "description": "The height of the header cell of the column, in pixels. If set explicitly, that height will be used for all of the headers. If not set explicitly, the height will based on style settings and the header renderer.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "showHeaders",
        "namespace": "public",
        "bindable": ["showHeadersChanged"],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether the control should show column headers. If <code>true</code>, the control shows column headers.",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "minColumnWidth",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The minimum width of the columns, in pixels.  If not NaN, the DataGrid control applies this value as the minimum width for all columns.  Otherwise, individual columns can have their own minimum widths.",
        "tags": [
        {  "tagName": "default",
               "values": ["NaN"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "columns",
        "namespace": "public",
        "bindable": ["columnsChanged"],
        "details": [],
        "deprecated": {},
          "description": "An array of DataGridColumn objects, one for each column that can be displayed.  If not explicitly set, the DataGrid control attempts to examine the first data provider item to determine the set of properties and display those properties in alphabetic order.  <p>If you want to change the set of columns, you must get this array, make modifications to the columns and order of columns in the array, and then assign the new array to the columns property.  This is because the DataGrid control returned a new copy of the array of columns and therefore did not notice the changes.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "columnCount",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["org.apache.royale.core.IDataGridModel"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "draggableColumns",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether the user is allowed to reorder columns. If <code>true</code>, the user can reorder the columns of the DataGrid control by dragging the header cells.",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "org.apache.royale.core.IBead",
        "qname": "presentationModel",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "The DataGrid's presentation model",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.2", "AIR 2.6"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9"]},
            {  "tagName": "royaleignorecoercion",
               "values": ["org.apache.royale.core.IDataGridPresentationModel", "org.apache.royale.core.IBead"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "showDropFeedback",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Displays a drop indicator under the mouse pointer to indicate that a drag and drop operation is allowed and where the items will be dropped.  the mouse is.",
        "tags": [
        {  "tagName": "param",
               "values": ["event A DragEvent object that contains information as to where"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.DragEvent"}]}
      ,
      { "type": "method",
        "qname": "addedToParent",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "getVerticalScrollElement",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "HTMLElement",
          "params": []}
      ,
      { "type": "method",
        "qname": "getHorizontalScrollElement",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "HTMLElement",
          "params": []}
      ]
  ,
  "events": [
  { "qname": "itemEditBegin",
        "type": "mx.events.DataGridEvent"
      ,
          "description": "Dispatched when the <code>editedItemPosition</code> property has been set and the item can be edited.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.DataGridEvent.ITEM_EDIT_BEGIN"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemEditEnd",
        "type": "mx.events.DataGridEvent"
      ,
          "description": "Dispatched when an item editing session ends for any reason.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.DataGridEvent.ITEM_EDIT_END"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemFocusIn",
        "type": "mx.events.DataGridEvent"
      ,
          "description": "Dispatched when an item renderer gets focus, which can occur if the user clicks on an item in the DataGrid control or navigates to the item using a keyboard.  Only dispatched if the item is editable.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.DataGridEvent.ITEM_FOCUS_IN"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemFocusOut",
        "type": "mx.events.DataGridEvent"
      ,
          "description": "Dispatched when an item renderer loses focus, which can occur if the user clicks another item in the DataGrid control or clicks outside the control, or uses the keyboard to navigate to another item in the DataGrid control or outside the control. Only dispatched if the item is editable.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.DataGridEvent.ITEM_FOCUS_OUT"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "headerRelease",
        "type": "mx.events.DataGridEvent"
      ,
          "description": "Dispatched when the user releases the mouse button on a column header to request the control to sort the grid contents based on the contents of the column. Only dispatched if the column is sortable and the data provider supports sorting. The DataGrid control has a default handler for this event that implements a single-column sort.  Multiple-column sort can be implemented by calling the <code>preventDefault()</code> method to prevent the single column sort and setting the <code>sort</code> property of the data provider. <p> <b>Note</b>: The sort arrows are defined by the default event handler for the headerRelease event. If you call the <code>preventDefault()</code> method in your event handler, the arrows are not drawn. </p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.DataGridEvent.HEADER_RELEASE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "headerShift",
        "type": "mx.events.IndexChangedEvent"
      ,
          "description": "Dispatched when the user releases the mouse button on a column header after having dragged the column to a new location resulting in shifting the column to a new index.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.IndexChangedEvent.HEADER_SHIFT"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
