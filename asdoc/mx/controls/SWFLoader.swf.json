{ "type": "class",
  "qname": "mx.controls.SWFLoader",
  "baseClassname": "mx.core.UIComponent"
  ,
    "description": "The SWFLoader control loads and displays a specified SWF file. You typically use SWFLoader for loading one Flex application into a host Flex application.  <p><strong>Note:</strong> You can use the SWFLoader control to load a GIF, JPEG, or PNG image file at runtime, to load a ByteArray representing a SWF, GIF, JPEG, or PNG image at runtime, or load an embedded version of any of these file types, and SVG files, at compile time by using <code>&#64;Embed(source='filename')</code>. However, the Image control is better suited for this capability and should be used for most image loading. The Image control is also designed to be used in custom item renderers and item editors. When using either SWFLoader or Image with an SVG file, you can only load the SVG if it has been embedded in your application using an Embed statement; you cannot load an SVG from the network at runtime.</p>  <p>The SWFLoader control lets you scale its content and set its size. It can also resize itself to fit the size of its content. By default, content is scaled to fit the size of the SWFLoader control. It can also load content on demand programmatically, and monitor the progress of a load.</p>  <p>A SWFLoader control cannot receive focus. However, the contents of a SWFLoader control can accept focus and have its own focus interactions.</p>  <p>The SWFLoader control has the following default characteristics:</p> <table class=&quot;innertable&quot;> <tr> <th>Characteristic</th> <th>Description</th> </tr> <tr> <td>Default size</td> <td>Width and height large enough for the loaded content</td> </tr> <tr> <td>Minimum size</td> <td>0 pixels</td> </tr> <tr> <td>Maximum size</td> <td>Undefined</td> </tr> </table>   <p>The &lt;mx:SWFLoader&gt; tag inherits all of the tag attributes of its superclass and adds the following tag attributes:</p>  <pre>\\n &lt;mx:SWFLoader\\n <strong>Properties</strong>\\n autoLoad=&quot;true|false&quot;\\n loadForCompatibility=&quot;false|true&quot;\\n loaderContext=&quot;null&quot;\\n maintainAspectRatio=&quot;true|false&quot;\\n scaleContent=&quot;true|false&quot;\\n showBusyCursor=&quot;false|true&quot;\\n source=&quot;<i>No default</i>&quot;\\n trustContent=&quot;false|true&quot;\\n \\n <strong>Styles</strong>\\n brokenImageBorderSkin=&quot;BrokenImageBorderSkin&quot;\\n brokenImageSkin=&quot;<i>'__brokenImage' symbol in Assets.swf</i>&quot;\\n horizontalAlign=&quot;left|center|right&quot;\\n verticalAlign=&quot;top|middle|bottom&quot;\\n \\n <strong>Effects</strong>\\n completeEffect=&quot;<i>No default</i>&quot;\\n \\n <strong>Events</strong>\\n complete=&quot;<i>No default</i>&quot;\\n httpStatus=&quot;<i>No default</i>&quot;\\n init=&quot;<i>No default</i>&quot;\\n ioError=&quot;<i>No default</i>&quot;\\n open=&quot;<i>No default</i>&quot;\\n progress=&quot;<i>No default</i>&quot;\\n securityError=&quot;<i>No default</i>&quot;\\n unload=&quot;<i>No default</i>&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/local.mxml -noswf", "examples/SimpleLoader.mxml"]},
      {  "tagName": "see",
         "values": ["mx.controls.Image"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.controls.SWFLoader",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "source",
        "namespace": "public",
        "bindable": ["sourceChanged"],
        "details": [],
        "deprecated": {},
          "description": "The URL, object, class or string name of a class to load as the content. The <code>source</code> property takes the following form:  <p><pre>\\n <code>source=&quot;<i>URLOrPathOrClass</i>&quot;</code></pre></p>  <p><pre>\\n <code>source=&quot;&#64;Embed(source='<i>PathOrClass</i>')&quot;</code></pre></p>  <p>The value of the <code>source</code> property represents a relative or absolute URL; a ByteArray representing a SWF, GIF, JPEG, or PNG; an object that implements IFlexDisplayObject; a class whose type implements IFlexDisplayObject; or a String that represents a class. </p>  <p>When you specify a path to a SWF, GIF, JPEG, PNG, or SVG file, Flex automatically converts the file to the correct data type for use with the SWFLoader control.</p>  <p>If you omit the Embed statement, Flex loads the referenced file at runtime; it is not packaged as part of the generated SWF file. At runtime, the <code>source</code> property only supports the loading of GIF, JPEG, PNG images, and SWF files.</p>  <p>Flex Data Services users can use the SWFLoader control to load a Flex application by using the following form:</p>  <p><pre>\\n <code>source=&quot;<i>MXMLPath</i>.mxml.swf&quot;</code></pre></p>  <p>Flex Data Services compiles the MXML file, and returns the SWF file to the main application. This technique works well with SWF files that add graphics or animations to an application, but are not intended to have a large amount of user interaction. If you import SWF files that require a large amount of user interaction, you should build them as custom components. </p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "load",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ],
          "return": "void",
          "params": [{ "name": "url", "type": "Object"}]}
      ]
  ,
  "events": [
  { "qname": "complete",
        "type": "org.apache.royale.events.Event"
      ,
          "description": "Dispatched when content loading is complete.  <p>This event is dispatched regardless of whether the load was triggered by an autoload or an explicit call to the <code>load()</code> method.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["org.apache.royale.events.Event.COMPLETE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "httpStatus",
        "type": "mx.events.HTTPStatusEvent"
      ,
          "description": "Dispatched when a network request is made over HTTP and Flash Player or AIR can detect the HTTP status code.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.HTTPStatusEvent.HTTP_STATUS"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "init",
        "type": "org.apache.royale.events.Event"
      ,
          "description": "Dispatched when the properties and methods of a loaded SWF file are accessible. The following two conditions must exist for this event to be dispatched:  <ul> <li>All properties and methods associated with the loaded object and those associated with the control are accessible.</li> <li>The constructors for all child objects have completed.</li> </ul>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["org.apache.royale.events.Event.INIT"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "ioError",
        "type": "mx.events.IOErrorEvent"
      ,
          "description": "Dispatched when an input/output error occurs.",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.events.IOErrorEvent"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.IOErrorEvent.IO_ERROR"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "open",
        "type": "org.apache.royale.events.Event"
      ,
          "description": "Dispatched when a network operation starts.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["org.apache.royale.events.Event.OPEN"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "progress",
        "type": "mx.events.ProgressEvent"
      ,
          "description": "Dispatched when content is loading.  <p>This event is dispatched regardless of whether the load was triggered by an autoload or an explicit call to the <code>load()</code> method.</p>  <p><strong>Note:</strong> The <code>progress</code> event is not guaranteed to be dispatched. The <code>complete</code> event may be received, without any <code>progress</code> events being dispatched. This can happen when the loaded content is a local file.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.ProgressEvent.PROGRESS"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "securityError",
        "type": "mx.events.SecurityErrorEvent"
      ,
          "description": "Dispatched when a security error occurs while content is loading. For more information, see the SecurityErrorEvent class.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.SecurityErrorEvent.SECURITY_ERROR"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "unload",
        "type": "org.apache.royale.events.Event"
      ,
          "description": "Dispatched when a loaded object is removed, or when a second load is performed by the same SWFLoader control and the original content is removed prior to the new load beginning.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["org.apache.royale.events.Event.UNLOAD"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
