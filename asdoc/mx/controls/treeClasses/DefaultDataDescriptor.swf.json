{ "type": "class",
  "qname": "mx.controls.treeClasses.DefaultDataDescriptor",
  "baseClassname": ""
  ,
    "description": "The DefaultDataDescriptor class provides a default implementation for accessing and manipulating data for use in controls such as Tree and Menu.  This implementation handles e4x XML and object nodes in similar but different ways. See each method description for details on how the method accesses values in nodes of various types.  This class is the default value of the Tree, Menu, MenuBar, and PopUpMenuButton control <code>dataDescriptor</code> properties.",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.controls.treeClasses.ITreeDataDescriptor", "mx.controls.menuClasses.IMenuDataDescriptor", "mx.controls.Menu", "mx.controls.MenuBar", "mx.controls.PopUpMenuButton", "mx.controls.Tree"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.controls.treeClasses.DefaultDataDescriptor",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "method",
        "qname": "getChildren",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Provides access to a node's children. Returns a collection of children if they exist. If the node is an Object, the method returns the contents of the object's <code>children</code> field as an ArrayCollection. If the node is XML, the method returns an XMLListCollection containing the child elements.",
        "tags": [
        {  "tagName": "param",
               "values": ["node The node object currently being evaluated.", "model The collection that contains the node; ignored by this class."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["An object containing the children nodes."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.collections.ICollectionView",
          "params": [{ "name": "node", "type": "Object"},
        { "name": "model", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "hasChildren",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Determines if the node actually has children.",
        "tags": [
        {  "tagName": "param",
               "values": ["node The node object currently being evaluated.", "model The collection that contains the node; ignored by this class."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["<code>true</code> if this node currently has children."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "node", "type": "Object"},
        { "name": "model", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "isBranch",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Tests a node for termination. Branches are non-terminating but are not required to have any leaf nodes. If the node is XML, returns <code>true</code> if the node has children or a <code>true isBranch</code> attribute. If the node is an object, returns <code>true</code> if the node has a (possibly empty) <code>children</code> field.",
        "tags": [
        {  "tagName": "param",
               "values": ["node The node object currently being evaluated.", "model The collection that contains the node; ignored by this class."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["<code>true</code> if this node is non-terminating."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "node", "type": "Object"},
        { "name": "model", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "getData",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns a node's data. Currently returns the entire node.",
        "tags": [
        {  "tagName": "param",
               "values": ["node The node object currently being evaluated.", "model The collection that contains the node; ignored by this class."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The node."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "node", "type": "Object"},
        { "name": "model", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "addChildAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Add a child node to a node at the specified index. This implementation does the following:  <ul> <li>If the <code>parent</code> parameter is null or undefined, inserts the <code>child</code> parameter at the specified index in the collection specified by <code>model</code> parameter. </li> <li>If the <code>parent</code> parameter has a <code>children</code> field or property, the method adds the <code>child</code> parameter to it at the <code>index</code> parameter location. In this case, the <code>model</code> parameter is not required. </li> <li>If the <code>parent</code> parameter does not have a <code>children</code> field or property, the method adds the <code>children</code> property to the <code>parent</code>. The method then adds the <code>child</code> parameter to the parent at the <code>index</code> parameter location. In this case, the <code>model</code> parameter is not required. </li> <li>If the <code>index</code> value is greater than the collection length or number of children in the parent, adds the object as the last child. </li> </ul>",
        "tags": [
        {  "tagName": "param",
               "values": ["parent The node object that will parent the child.", "newChild The node object that will be parented by the node.", "index The 0-based index of where to put the child node relative to the parent.", "model The entire collection that this node is a part of."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["<code>true</code> if successful."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "parent", "type": "Object"},
        { "name": "newChild", "type": "Object"},
        { "name": "index", "type": "int"},
        { "name": "model", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "removeChildAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Removes the child node from a node at the specified index. If the <code>parent</code> parameter is null or undefined, the method uses the <code>model</code> parameter to access the child; otherwise, it uses the <code>parent</code> parameter and ignores the <code>model</code> parameter.",
        "tags": [
        {  "tagName": "param",
               "values": ["parent The node object that currently parents the child node.", "child The node that is being removed.", "index The 0-based index of  the child node to remove relative to the parent.", "model The entire collection that this node is a part of."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["<code>true</code> if successful."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "parent", "type": "Object"},
        { "name": "child", "type": "Object"},
        { "name": "index", "type": "int"},
        { "name": "model", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "getType",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the type identifier of a node. This method is used by menu-based controls to determine if the node represents a separator, radio button, a check box, or normal item.   or the empty string if there is no such field.",
        "tags": [
        {  "tagName": "param",
               "values": ["node The node object for which to get the type."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The value of the <code>type</code> attribute or field,"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "node", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "isEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns whether the node is enabled. This method is used by menu-based controls.   attribute or field, or <code>true</code> if there is no such entry or the value is not <code>false</code>.",
        "tags": [
        {  "tagName": "param",
               "values": ["node The node for which to get the status."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The value of the node's <code>enabled</code>"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "node", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "setEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Sets the value of the field or attribute in the data provider that identifies whether the node is enabled. This method sets the value of the node's <code>enabled</code> attribute or field. This method is used by menu-based controls.",
        "tags": [
        {  "tagName": "param",
               "values": ["node The node for which to set the status.", "value Whether the node is enabled."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "node", "type": "Object"},
        { "name": "value", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "isToggled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns whether the node is toggled. This method is used by menu-based controls.   attribute or field, or <code>false</code> if there is no such entry.",
        "tags": [
        {  "tagName": "param",
               "values": ["node The node for which to get the status."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The value of the node's <code>toggled</code>"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "node", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "setToggled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Sets the value of the field or attribute in the data provider that identifies whether the node is toggled. This method sets the value of the node's <code>toggled</code> attribute or field. This method is used by menu-based controls.",
        "tags": [
        {  "tagName": "param",
               "values": ["node The node for which to set the status.", "value Whether the node is toggled."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "node", "type": "Object"},
        { "name": "value", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "getGroupName",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns the name of the radio button group to which the node belongs, if any. This method is used by menu-based controls.  attribute or field, or an empty string if there is no such entry.",
        "tags": [
        {  "tagName": "param",
               "values": ["node The node for which to get the group name."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The value of the node's <code>groupName</code>"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": [{ "name": "node", "type": "Object"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.controls.menuClasses.IMenuDataDescriptor",
        "qname": "dataDescriptor",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The object that accesses and manipulates data in the data provider. The Menu control delegates to the data descriptor for information about its data. This data is then used to parse and move about the data source. The data descriptor defined for the root menu is used for all submenus.  The default value is an internal instance of the DefaultDataDescriptor class.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "getHierarchicalCollectionAdaptor",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.collections.ICollectionView",
          "params": [{ "name": "hierarchicalData", "type": "mx.collections.ICollectionView"},
        { "name": "uidFunction", "type": "Function"},
        { "name": "openItems", "type": "Object"},
        { "name": "model", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "getNodeDepth",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "int",
          "params": [{ "name": "node", "type": "Object"},
        { "name": "iterator", "type": "mx.collections.IViewCursor"},
        { "name": "model", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "getParent",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "node", "type": "Object"},
        { "name": "collection", "type": "mx.collections.ICollectionView"},
        { "name": "model", "type": "Object"}]}
      ]
  }



