{ "type": "class",
  "qname": "mx.charts.chartClasses.ChartBase",
  "baseClassname": "mx.core.UIComponent"
  ,
    "description": "The ChartBase class is the link between the Flex component architecture and the DualStyleObject architecture. It extends the Flex UIComponent base class, but contains DualStyleObject classes.  <p>You typically do not use the ChartBase class directly. Instead you use one of its subclasses, such as PlotChart or BubbleChart. It acts as the base class for the common chart types provided in the mx.charts package.</p>  <p>This class defines a number of CSS styles and properties that provide easy access to the more common features of the framework.</p>  <p>A chart's minimum size is 20 x 20 pixels. A chart's maximum size is unbounded. A chart's preferred size is 400 x 400 pixels.</p>  <p>ChartBase objects, and its subclasses, augment the normal mouse event objects with additional data that describes the nearest chart data point under the mouse. The event object for mouse events contains an additional property, <code>hitData</code>, which contains a HitData object that describes the nearest data point. See mx.charts.HitData for more information on the contents of the HitData object.</p>  <p>ChartBase objects consider data points only within a certain radius of the mouse pointer. You can set this radius using the <code>mouseSensitivity</code> property. If there is no data point within the <code>mouseSensitivity</code> radius, event.hitData is <code>null</code>.</p>   <p>Flex components inherit the following properties from the ChartBase class:</p>  <pre>\\n &lt;mx:<i>tagname</i>\\n <strong>Properties</strong>\\n allElements=&quot;<i>Array; No default</i>&quot;\\n annotationElements=&quot;<i>Array; No default</i>&quot;\\n backgroundElements=&quot;<i>Array; No default</i>&quot;\\n chartState=&quot;<i></i>&quot;\\n clipContent=&quot;false|true&quot;\\n dataProvider=&quot;<i>No default</i>&quot;\\n dataRegion&quot;<i>No default</i>&quot;\\n dataTipFunction=&quot;<i>No default</i>&quot;\\n dataTipLayerIndex&quot;<i>No default</i>&quot;\\n dataTipMode&quot;<i>No default</i>&quot;\\n description&quot;<i>No default</i>&quot;\\n dragEnabled=&quot;false|true&quot;\\n dragMoveEnabled=&quot;false|true&quot;\\n dropEnabled=&quot;false|true&quot;\\n labelElements&quot;<i>No default</i>&quot;\\n legendData&quot;<i>No default</i>&quot;\\n mouseSensitivity=&quot;5&quot;\\n selectedChartItem=<i>ChartItem; No default</i>&quot;\\n selectedChartItems=<i>Array; No default</i>&quot;\\n selectionMode=&quot;none|single|multiple&quot;\\n series=&quot;<i>No default</i>&quot;\\n seriesFilters&quot;<i>No default</i>&quot;\\n showAllDataTips=&quot;true|false&quot;\\n showDataTips=&quot;true|false&quot;\\n transforms=&quot;<i>No default</i>&quot;\\n \\n <strong>Styles</strong>\\n chartSeriesStyles=&quot;<i>Style; No default</i>&quot;\\n dataTipCalloutStroke=&quot;<i>Stroke; No default</i>&quot;\\n dataTipRenderer=&quot;<i>Renderer; No default</i>&quot;\\n fill=&quot;<i>IFill; No default</i>&quot;\\n fontFamily=&quot;<i>Verdana</i>&quot;\\n fontSize=&quot;<i>10</i>&quot;\\n itemDisabledColor=&quot;<i>uint; No default</i>&quot;\\n itemRollOverColor=&quot;<i>uint; No default</i>&quot;\\n itemSelectionColor=&quot;<i>uint; No default</i>&quot;\\n maximumDataTipCount=&quot;NaN&quot;\\n paddingBottom=&quot;<i>No default</i>&quot;\\n paddingTop=&quot;<i>No default</i>&quot;\\n paddingLeft=&quot;<i>0</i>&quot;\\n paddingRight=&quot;<i>0</i>&quot;\\n showDataTipTargets=&quot;true|false&quot;\\n \\n <strong>Events</strong>\\n change=&quot;<i>Event; No default</i>&quot;\\n itemClick=&quot;<i>Event; No default</i>&quot;\\n itemDoubleClick=&quot;<i>Event; No default</i>&quot;\\n itemMouseDown=&quot;<i>Event; No default</i>&quot;\\n itemMouseMove=&quot;<i>Event; No default</i>&quot;\\n itemMouseUp=&quot;<i>Event; No default</i>&quot;\\n itemRollOut=&quot;<i>Event; No default</i>&quot;\\n itemRollOver=&quot;<i>Event; No default</i>&quot;\\n &gt;\\n </pre>",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.charts.HitData", "mx.charts.CategoryAxis", "mx.charts.LinearAxis"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "field",
        "qname": "HORIZONTAL",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The value of this constant is passed to methods such as <code>getNextItem()</code> and <code>getPrevItem()</code>. These methods use this constant to determine which item or series to select when the user presses a key such as the left arrow.  For example, if the left arrow or right arrow key was pressed, the direction is set to &quot;horizontal&quot; (<code>ChartBase.HORIZONTAL</code>).",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "VERTICAL",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "The value of this constant is passed to methods such as <code>getNextItem()</code> and <code>getPrevItem()</code>. These methods use this constant to determine which item or series to select when the user presses a key such as the left arrow.  For example, if the up arrow or down arrow key was pressed, the direction is set to &quot;vertical&quot; (<code>ChartBase.VERTICAL</code>).",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "mx.charts.chartClasses.ChartBase",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "return": "",
          "params": []}
      ,
      { "type": "field",
        "qname": "allElements",
        "return": "Array",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The set of all chart elements displayed in the chart. This set includes series, second series, background elements, and annotation elements.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "labelElements",
        "return": "Array",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The set of display objects that represent the labels for the chart elements. Some series, annotation, and background types include overlays such elements and callouts. Elements can pass a display object to the chart that contains the overlays to be placed on top of all other chart elememnts. Chart implementors can access these overlay objects in the <code>labelElements</code> array.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "annotationElements",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Sets an array of ChartElement objects that appears on top of any data series rendered by the chart. Each item in the array must extend the mx.charts.DualStyleObject class and implement the IChartElement2 interface.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "backgroundElements",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Sets an array of background ChartElement objects that appear below any data series rendered by the chart. Each item in the Array must extend the mx.charts.DualStyleObject class and implement the IChartElement2 interface.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "uint",
        "qname": "chartState",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The current transition state of the chart. Use this property to determine whether the chart is currently transitioning out its old data, transitioning in its new data, or has completed all transitions and is showing its current data set. See the mx.charts.chartClasses.ChartState enumeration for possible values.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "clipContent",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Determines whether Flex clips the chart to the area bounded by the axes. Set to <code>false</code> to clip the chart. Set to <code>true</code> to avoid clipping when the data is rendered.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "dataProvider",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies the data provider for the chart. Data series rendered by the chart are assigned this data provider. To render disparate data series in the same chart, use the <code>dataProvider</code> property on the individual series.  <p>This property can accept an array or any other object that implements the IList or ICollectionView interface.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "org.apache.royale.geom.Rectangle",
        "qname": "dataRegion",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The area of the chart used to display data. This rectangle excludes the area used for gutters, axis lines and labels, and padding.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Function",
        "qname": "dataTipFunction",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies a callback method used to generate data tips from values. This method should use the following signature: <pre>\\n function dataTipFunction(<i>hitData</i>:HitData):String\\n </pre> <p>This method returns a string that is displayed for each data point. The text can include HTML formatting. The single parameter is a HitData object that describes the data point.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "dataTipLayerIndex",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The index of the child that is responsible for rendering data tips. Derived classes that add visual elements to the chart should add them below this layer.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "dataTipMode",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies how Flex displays DataTip controls for the chart. DataTip controls are similar to ToolTip controls, except that they display an appropriate value that represents the nearest chart data point under the mouse pointer.  <p>Possible values of <code>dataTipMode</code> are: <ul> <li><code>&quot;single&quot;</code> - Data tips are shown for the closest data point to the mouse cursor.</li>  <li><code>&quot;multiple&quot;</code> - Data tips are shown for any DataTip control within range of the mouse cursor. You can control the sensitivity with the <code>mouseSensitivity</code> property.</li> </ul> </p>  <p>You can customize DataTip controls with the <code>dataTipFunction</code> property.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "description",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A short description of the data in the chart. When accessibility is enabled, screen readers use this property to describe the chart. <p>This string defaults to the empty string, and must be explicitly assigned by the developer to have meaning.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "dragEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies whether you can drag items out of this chart and drop them on other controls. If <code>true</code>, dragging is enabled for the chart. If the <code>dropEnabled</code> property is also <code>true</code>, you can drag items and drop them in the chart to reorder the items.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "mx.core.IUIComponent",
        "qname": "dragImage",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Gets an instance of a class that displays the visuals during a drag-and-drop operation.",
        "tags": [
        {  "tagName": "default",
               "values": ["mx.controls.chartClasses.ChartItemDragProxy"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "dragMoveEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Indicates which display cursor to show as drag feedback.  If <code>true</code>, and the <code>dragEnabled</code> property is <code>true</code> and the Control key is not held down, <code>moveCursor</code> is shown as feedback. If the Control key is held down, <code>copyCursor</code> is shown.  If <code>false</code> and the <code>dragEnabled</code> property is <code>true</code>, then <code>copyCursor</code> is shown whether the Control key is held down or not.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "dropEnabled",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that specifies whether dragged items can be dropped onto the chart.  <p>If you set this property to <code>true</code>, the chart accepts all data formats, and assumes that the dragged data matches the format of the data in the data provider. To explicitly check the data format of the data being dragged, you must handle one or more of the drag events, such as <code>dragOver</code>, and call the <code>preventDefault()</code> method of the DragEvent to customize the way the list class accepts dropped data.</p>  <p>When <code>dropEnabled</code> is set to <code>true</code>, Flex automatically calls the <code>showDropFeedback()</code> and <code>hideDropFeedback()</code> methods to display the drop indicator.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "legendData",
        "namespace": "public",
        "bindable": ["legendDataChanged"],
        "details": [],
        "deprecated": {},
          "description": "An array of Legend items.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "mouseSensitivity",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies the distance, in pixels, that Flex considers a data point to be under the mouse pointer when the pointer moves around a chart. Flex considers any data point less than <code>mouseSensitivity</code> pixels away to be under the mouse pointer. This value is also used by the <code>findDataPoints</code> method.",
        "tags": [
        {  "tagName": "default",
               "values": ["5"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "mx.charts.ChartItem",
        "qname": "selectedChartItem",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies the selected ChartItem in the chart. If multiple items are selected, this property specifies the most recently selected item.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "selectedChartItems",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies an array of all the selected ChartItem objects in the chart.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "selectionMode",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies whether or not ChartItem objects can be selected. Possible values are <code>none</code>, <code>single</code>, or <code>multiple</code>. Set to <code>none</code> to prevent chart items from being selected. Set to <code>single</code> to allow only one item to be selected at a time. Set to <code>multiple</code> to allow one or more chart items to be selected at a time.  <P>If you set this to <code>single</code> or <code>multiple</code>, you can override this on a per-series basis by setting the value of the series' <code>selectable</code> property to <code>false</code>. If you set the value of the <code>selectionMode</code> property to <code>none</code>, then chart items will not be selectable, regardless of the value of the series' <code>selectable</code> property.</P>",
        "tags": [
        {  "tagName": "default",
               "values": ["none"]},
            {  "tagName": "see",
               "values": ["mx.charts.ChartItem", "mx.charts.chartClasses.Series"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "series",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An array of Series objects that define the chart data. Each chart defines the type of Series objects that you use to populate this array. For example, a ColumnChart control expects ColumnSeries objects as part of this array. Some charts accept any object of type IChartElement2 as part of the array, but in general each chart expects a specific type.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "seriesFilters",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An array of filters that are applied to all series in the chart. Assign an array of bitmap filters to this property to apply them to all the series at once. Set the <code>seriesFilter</code> property to an empty array to clear the default filters on the chart's series. Assigning filters to the <code>seriesFilters</code> property, which applies to all series, is more efficient than assigning them to individual series.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "showAllDataTips",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies whether Flex shows all DataTip controls for the chart. DataTip controls are similar to tool tips, except that they display an appropriate value representing the chart data point.  <p>Different chart elements might show different styles of DataTip controls. For example, a stacked chart element might show both the values of the column and the percentage that it contributes to the whole.</p>  <p>You can customize DataTip controls with the <code>dataTipFunction</code> property.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "showDataTips",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies whether Flex shows DataTip controls for the chart. DataTip controls are similar to tool tips, except that they display an appropriate value that represents the nearest chart data point under the mouse pointer.  <p>Different chart elements might show different styles of DataTip controls. For example, a stacked chart element might show both the values of the column and the percentage that it contributes to the whole.</p>  <p>You can customize DataTip controls with the <code>dataTipFunction</code> property.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "allElementsArray",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "labelElementsArray",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.core.IFlexModuleFactory",
        "qname": "moduleFactory",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "A module factory is used as context for using embedded fonts and for finding the style manager that controls the styles for this component.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "setActualSize",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "w", "type": "Number"},
        { "name": "h", "type": "Number"}]}
      ,
      { "type": "method",
        "qname": "findDataPoints",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns an array of HitData objects that describe the nearest data point to the coordinates passed to the method. The <code>x</code> and <code>y</code> arguments should be values in the coordinate system of the ChartBase object. <p>This method adheres to the limits specified by the <code>mouseSensitivity</code> property of the ChartBase object when looking for nearby data points.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.charts.HitData"]},
            {  "tagName": "param",
               "values": ["x The x coordinate relative to the ChartBase object.", "y The y coordinate relative to the ChartBase object."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["An array of HitData objects."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Array",
          "params": [{ "name": "x", "type": "Number"},
        { "name": "y", "type": "Number"}]}
      ,
      { "type": "method",
        "qname": "getAllDataPoints",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns an array of HitData objects representing the chart items in the underlying objects that implement the IChartElement2 interface.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["An array of HitData objects that represent the data points."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Array",
          "params": []}
      ,
      { "type": "method",
        "qname": "getItemsInRegion",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Gets all the chart items that are within the defined rectangular region. You call this method to determine what chart items are under a particular rectangular region. <p>Individual chart types determine whether their chart item is under the region. The point should be in the global coordinate space.</p>",
        "tags": [
        {  "tagName": "param",
               "values": ["value The rectangular region."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["An array of ChartItem objects."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Array",
          "params": [{ "name": "value", "type": "org.apache.royale.geom.Rectangle"}]}
      ,
      { "type": "method",
        "qname": "getNextItem",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Gets the chart item next to the currently focused item in the chart, with respect to the axes. If no chart items are currently selected, then this method returns the first item in the first series.  are <code>ChartBase.NAVIGATE_HORIZONTAL</code> and <code>ChartBase.NAVIGATE_VERTICAL</code>.",
        "tags": [
        {  "tagName": "param",
               "values": ["direction The direction in which the next item should be returned. Possible values"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The corresponding ChartItem object."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.charts.ChartItem",
          "params": [{ "name": "direction", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "getPreviousItem",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Gets the chart item that is before the currently focused item in the chart, with respect to the axes. If no chart items are currently selected, then this method returns the first item in the first series.  are <code>ChartBase.NAVIGATE_HORIZONTAL</code> and <code>ChartBase.NAVIGATE_VERTICAL</code>.",
        "tags": [
        {  "tagName": "param",
               "values": ["direction The direction in which the previous item should be returned. Possible values"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The corresponding ChartItem object."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.charts.ChartItem",
          "params": [{ "name": "direction", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "getFirstItem",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Gets the first item in the chart, with respect to the axes.  are <code>ChartBase.NAVIGATE_HORIZONTAL</code> and <code>ChartBase.NAVIGATE_VERTICAL</code>.",
        "tags": [
        {  "tagName": "param",
               "values": ["direction The direction in which the first item should be returned. Possible values"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The corresponding ChartItem object."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.charts.ChartItem",
          "params": [{ "name": "direction", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "getLastItem",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Gets the last chart item in the chart, with respect to the axes.  are <code>ChartBase.NAVIGATE_HORIZONTAL</code> and <code>ChartBase.NAVIGATE_VERTICAL</code>.",
        "tags": [
        {  "tagName": "param",
               "values": ["direction The direction in which the last item should be returned. Possible values"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The corresponding ChartItem object."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "mx.charts.ChartItem",
          "params": [{ "name": "direction", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "legendDataChanged",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Dispatches a new LegendDataChanged event.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "hideData",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Informs the chart that the underlying data displayed in the chart has been changed. Chart series and elements call this function when their rendering has changed in order to trigger a coordinated execution of show and hide data effects. You typically do not call this method on the chart directly.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "invalidateSeriesStyles",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Triggers a redraw of the chart. Call this method when you change the style properties of the chart's series.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "invalidateSeries",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Informs the chart that its series array was modified and should be reprocessed. Derived chart classes can call this method to trigger a call to the chart's internal <code>updateSeries()</code> method on the next <code>commitProperties()</code> cycle.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "invalidateChildOrder",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Informs the chart that its child list was modified and should be reordererd. Derived chart classes can call this method to trigger a call to the chart's internal <code>updateChildOrder()</code> method on the next <code>commitProperties()</code> cycle.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "clearSelection",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Deselects all selected chart items in the chart control. Sets the <code>currentState</code> property of all chart items in the chart to <code>none</code>.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "updateAllDataTips",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Displays all noninteractive data tips if <code>showAllDataTips</code> is set.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "positionAllDataTips",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Defines the locations of DataTip objects on the chart when the <code>showAllDataTips</code> property is set to <code>true</code>. This method ensures that DataTips do not overlap each other (if multiple DataTips are visible) or overlap their target data items.",
        "tags": [
        {  "tagName": "param",
               "values": ["hitSet An Array of HitData objects."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "hitSet", "type": "Array"}]}
      ,
      { "type": "method",
        "qname": "positionDataTips",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Defines the locations of DataTip objects on the chart. This method ensures that DataTip objects do not overlap each other (if multiple DataTip objects are visible) or overlap their target data items.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "customizeSeries",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Applies per-series customization and formatting to the series of the chart. This method is called once for each series when the series has been changed by a call to the <code>invalidateSeries()</code> method.",
        "tags": [
        {  "tagName": "param",
               "values": ["seriesGlyph The series to customize.", "i The series' index in the series array."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "seriesGlyph", "type": "mx.charts.chartClasses.Series"},
        { "name": "i", "type": "uint"}]}
      ,
      { "type": "method",
        "qname": "invalidateData",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Triggers a redraw of the chart. Call this method when you add or change the chart's series or data providers.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "applySeriesSet",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Preprocesses the series and transform for display. You typically do not call this method directly. Instead, this method is called automatically during the chart control's <code>commitProperties()</code> cycle when the series has been invalidated by a call to the <code>invalidateSeries()</code> method. <p>By default, this method calls the <code>customizeSeries()</code> method once for each series in the set. Chart subclasses can override this method to add customization logic that is global to the whole series set.</p>",
        "tags": [
        {  "tagName": "param",
               "values": ["seriesSet An array of series to preprocess.", "transform The transform used by the series."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["An array of series with the series set applied."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Array",
          "params": [{ "name": "seriesSet", "type": "Array"},
        { "name": "transform", "type": "mx.charts.chartClasses.DataTransform"}]}
      ,
      { "type": "method",
        "qname": "addDragData",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Adds the selected items to the DragSource object as part of a drag and drop operation. You can override this method to add other data to the drag source.",
        "tags": [
        {  "tagName": "param",
               "values": ["ds The DragSource object to which the data is added."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "ds", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "showDropFeedback",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Displays a drop indicator under the mouse pointer to indicate that a drag-and-drop operation is allowed. The drop indicator also indicates where the items will be dropped.  the mouse pointer is.",
        "tags": [
        {  "tagName": "param",
               "values": ["event A DragEvent object that contains information about where"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.DragEvent"}]}
      ,
      { "type": "method",
        "qname": "hideDropFeedback",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Hides the drop indicator that indicates that a drag-and-drop operation is allowed.  mouse location.",
        "tags": [
        {  "tagName": "param",
               "values": ["event A DragEvent object that contains information about the"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.DragEvent"}]}
      ,
      { "type": "method",
        "qname": "dragStartHandler",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The default handler for the <code>dragStart</code> event.",
        "tags": [
        {  "tagName": "param",
               "values": ["event The DragEvent object."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.DragEvent"}]}
      ,
      { "type": "method",
        "qname": "dragEnterHandler",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Handles events of type <code>DragEvent.DRAG_ENTER</code>. This method determines if the DragSource object contains valid elements and uses the <code>showDropFeedback()</code> method to set up the UI feedback.",
        "tags": [
        {  "tagName": "param",
               "values": ["event The DragEvent object."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.DragEvent"}]}
      ,
      { "type": "method",
        "qname": "dragOverHandler",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Handles events of type <code>DragEvent.DRAG_OVER</code>. This method determines whether the DragSource object contains valid elements and uses the <code>showDropFeedback()</code> method to set up the UI feeback.",
        "tags": [
        {  "tagName": "param",
               "values": ["event The DragEvent object."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.DragEvent"}]}
      ,
      { "type": "method",
        "qname": "dragExitHandler",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Handles events of type <code>DragEvent.DRAG_EXIT</code>. This method hides the UI feeback by calling the <code>hideDropFeedback()</code> method.",
        "tags": [
        {  "tagName": "param",
               "values": ["event The DragEvent object."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.DragEvent"}]}
      ,
      { "type": "method",
        "qname": "dragDropHandler",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Handles events of type <code>DragEvent.DRAG_DROP</code>. This method hides the UI feeback by calling the <code>hideDropFeedback()</code> method.",
        "tags": [
        {  "tagName": "param",
               "values": ["event The DragEvent object."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.DragEvent"}]}
      ,
      { "type": "method",
        "qname": "dragCompleteHandler",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Handles events of type <code>DragEvent.DRAG_COMPLETE</code>. This method removes the item from the data provider.",
        "tags": [
        {  "tagName": "param",
               "values": ["event The DragEvent object."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.DragEvent"}]}
      ]
  ,
  "events": [
  { "qname": "change",
        "type": "mx.charts.events.ChartItemEvent"
      ,
          "description": "Dispatched when the selection changes in the chart.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.charts.events.ChartItemEvent.CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "chartClick",
        "type": "mx.charts.events.ChartEvent"
      ,
          "description": "Dispatched when no data point is found under the mouse pointer when mouse is clicked on chart. Flex considers only data points within the radius determined by the <code>mouseSensitivity</code> property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.charts.events.ChartEvent.CHART_CLICK"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "chartDoubleClick",
        "type": "mx.charts.events.ChartEvent"
      ,
          "description": "Dispatched when no data point is found under the mouse pointer when mouse is double-clicked on chart. Flex considers only data points within the radius determined by the <code>mouseSensitivity</code> property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.charts.events.ChartEvent.CHART_DOUBLE_CLICK"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemClick",
        "type": "mx.charts.events.ChartItemEvent"
      ,
          "description": "Dispatched when a data point is found under the mouse pointer when it is clicked. Flex considers only data points within the radius determined by the <code>mouseSensitivity</code> property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.charts.events.ChartItemEvent.MOUSE_CLICK_DATA"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemDoubleClick",
        "type": "mx.charts.events.ChartItemEvent"
      ,
          "description": "Dispatched when a data point is found under the mouse pointer when it is double clicked. Flex considers only data points within the radius determined by the <code>mouseSensitivity</code> property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.charts.events.ChartItemEvent.ITEM_DOUBLE_CLICK"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemMouseDown",
        "type": "mx.charts.events.ChartItemEvent"
      ,
          "description": "Dispatched when a data point is found under the mouse pointer when it is pressed down. Flex considers only data points within the radius determined by the <code>mouseSensitivity</code> property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.charts.events.ChartItemEvent.ITEM_MOUSE_DOWN"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemMouseMove",
        "type": "mx.charts.events.ChartItemEvent"
      ,
          "description": "Dispatched when the mouse pointer moves while over a data point. Flex considers only data points within the radius determined by the <code>mouseSensitivity</code> property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.charts.events.ChartItemEvent.ITEM_MOUSE_MOVE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemMouseUp",
        "type": "mx.charts.events.ChartItemEvent"
      ,
          "description": "Dispatched when a data point is found under the mouse pointer when it is released. Flex considers only data points within the radius determined by the <code>mouseSensitivity</code> property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.charts.events.ChartItemEvent.ITEM_MOUSE_UP"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemRollOut",
        "type": "mx.charts.events.ChartItemEvent"
      ,
          "description": "Dispatched when the closest data point under the mouse pointer changes. Flex considers only data points within the radius determined by the <code>mouseSensitivity</code> property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.charts.events.ChartItemEvent.ITEM_ROLL_OUT"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemRollOver",
        "type": "mx.charts.events.ChartItemEvent"
      ,
          "description": "Dispatched when a new data point is found under the mouse pointer. Flex only considers data points within the radius determined by the <code>mouseSensitivity</code> property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.charts.events.ChartItemEvent.ITEM_ROLL_OVER"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }












