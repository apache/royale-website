{ "type": "interface",
  "qname": "mx.charts.chartClasses.IStackable",
"baseInterfaceNames": [
]
,
    "description": "The IStackable interface is implemented by any series that can be stacked. Stacking sets (ColumnSet, BarSet, AreaSet) require that any sub-series assigned to it when stacking implement this interface.",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
    "access": "read-write",
    "return": "mx.charts.chartClasses.StackedSeries",
    "qname": "stacker",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The StackedSeries associated with this series. The stacker manages the series's stacking behavior.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "write-only",
    "return": "Object",
    "qname": "stackTotals",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The stack totals for the series.",
    "tags": [
    {  "tagName": "param",
           "values": ["value The totals to set."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "method",
    "qname": "stack",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Stacks the series. Normally, a series implements the <code>updateData()</code> method to load its data out of the data provider. But a stacking series performs special operations because its values are not necessarily stored in its data provider. Its values are whatever is stored in its data provider, summed with the values that are loaded by the object it stacks on top of. <p>A custom stacking series should implement the <code>stack()</code> method by loading its data out of its data provider, adding it to the base values stored in the dictionary to get the real values it should render with, and replacing the values in the dictionary with its new, summed values.</p>  on top of. The keys in the dictionary are the y values, and the values are the x values.  is of the same type, you can use access to this property to avoid duplicate effort when rendering.",
    "tags": [
    {  "tagName": "param",
           "values": ["stackedXValueDictionary Contains the base values that the series should stack", "previousElement The previous element in the stack. If, for example, the element"]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["The maximum value in the newly stacked series."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Number",
      "params": [{ "name": "stackedXValueDictionary", "type": "Object"},
    { "name": "previousElement", "type": "mx.charts.chartClasses.IStackable"}]}
  ]
  }
