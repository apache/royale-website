{ "type": "class",
  "qname": "mx.charts.series.BarSeries",
  "baseClassname": "mx.charts.chartClasses.Series"
  ,
    "description": "Defines a data series for a BarChart control. By default, this class uses the BoxItemRenderer class. Optionally, you can define an itemRenderer for the data series. The itemRenderer must implement the IDataRenderer interface.   <p>The <code>&lt;mx:BarSeries&gt;</code> tag inherits all the properties of its parent classes and adds the following properties:</p>  <pre>\\n &lt;mx:BarSeries\\n <strong>Properties</strong>\\n barWidthRatio=&quot;.65&quot;\\n fillFunction=&quot;<i>Internal fill function</i>&quot;\\n horizontalAxis=&quot;<i>No default</i>&quot;\\n labelField=&quot;<i>No default</i>&quot;\\n labelFunction=&quot;<i>No default</i>&quot;\\n maxBarWidth=&quot;<i>No default</i>&quot;\\n minField=&quot;null&quot;\\n offset=&quot;<i>No default</i>&quot;\\n stacker=&quot;<i>No default</i>&quot;\\n stackTotals=&quot;<i>No default</i>&quot;\\n verticalAxis=&quot;<i>No default</i>&quot;\\n xField=&quot;null&quot;\\n yField=&quot;null&quot;\\n \\n <strong>Styles</strong>\\n fill=&quot;<i>IFill; no default</i>&quot;\\n fills=&quot;<i>IFill; no default</i>&quot;\\n fontFamily=&quot;Verdana&quot;\\n fontSize=&quot;10&quot;\\n fontStyle=&quot;italic|normal&quot;\\n fontWeight=&quot;bold|normal&quot;\\n labelAlign=&quot;center|left|right&quot;\\n labelPosition=&quot;none|inside|outside&quot;\\n labelSizeLimit=&quot;9&quot;\\n itemRenderer=&quot;<i>itemRenderer</i>&quot;\\n legendMarkerRenderer=&quot;<i>Defaults to series's itemRenderer</i>&quot;\\n stroke=&quot;<i>IStroke; no default</i>&quot;\\n textDecoration=&quot;underline|none&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["../examples/Column_BarChartExample.mxml"]},
      {  "tagName": "see",
         "values": ["mx.charts.BarChart"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.charts.series.BarSeries",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "items",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "mx.core.UIComponent",
        "qname": "labelContainer",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Array",
        "qname": "legendData",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Object",
        "qname": "renderData",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Object",
        "qname": "seriesRenderData",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
          ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "barWidthRatio",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies how wide to render the bars relative to the category width. A value of 1 uses the entire space, while a value of .6 uses 60% of the bar's available space. You typically do not set this property directly. The actual bar width used is the smaller of <code>barWidthRatio</code> and the <code>maxbarWidth</code> property",
        "tags": [
        {  "tagName": "default",
               "values": [".65"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Function",
        "qname": "fillFunction",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies a method that returns the fill for the current chart item in the series. If this property is set, the return value of the custom fill function takes precedence over the <code>fill</code> and <code>fills</code> style properties. But if it returns null, then <code>fills</code> and <code>fill</code> will be prefered in that order.  <p>The custom <code>fillFunction</code> has the following signature:  <pre>\\n <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }\\n </pre>  <code>item</code> is a reference to the chart item that is being rendered. <code>index</code> is the index of the chart item in the renderData's cache. This is different from the chart's data provider because it is sorted based on the x, y, and z values. This function returns an object that implements the <code>IFill</code> interface. </p>  <p>An example usage of a customized <code>fillFunction</code> is to return a fill based on some threshold.</p>  <pre>\\n public function myFillFunction(item:ChartItem, index:Number):IFill\\n {\\n var curItem:BarSeriesItem = BarSeriesItem(item);\\n if (curItem.xNumber > 10)\\n return(new SolidColor(0x123456, .75));\\n else\\n return(new SolidColor(0x563412, .75));\\n }\\n </pre>  <p> If you specify a custom fill function for your chart series and you want to have a Legend control, you must manually create a Legend control and add LegendItems to it. </p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "example",
               "values": []},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.charts.chartClasses.IAxis",
        "qname": "horizontalAxis",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Defines the labels, tick marks, and data position for items on the x-axis. Use either the LinearAxis class or the CategoryAxis class to set the properties of the horizontalAxis as a child tag in MXML or create a LinearAxis or CategoryAxis object in ActionScript.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Class",
        "qname": "itemType",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The subtype of ChartItem used by this series to represent individual items. Subclasses can override and return a more specialized class if they need to store additional information in the items.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "labelField",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Name of a field in the data provider whose value appears as the label. This property is ignored if the <code>labelFunction</code> property is specified.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Function",
        "qname": "labelFunction",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies a callback function used to render each label of the Series.  A labelFunction must have the following signature:  <pre>\\n function <i>function_name</i>(<i>element</i>:ChartItem, <i>series</i>:Series):String { ... }\\n </pre>  <code><i>element</i></code> is the chart item that is being rendered.  <code><i>series</i></code> is the series to which the chart item belongs.  The returned String is the label of the current item.  <p>An example usage of a customized labelFunction is as follows:</p> <pre>\\n private function myLabelFunction(element:ChartItem, series:Series):String {\\n var item:BarSeriesItem = BarSeriesItem(element);\\n var ser:BarSeries = BarSeries(series);\\n return(item.item.Country + &quot;:&quot; +&quot;&quot; + ser.xField.toString() +&quot;:&quot;+ item.xNumber);\\n }\\n </pre>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "maxBarWidth",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies the width of the bars, in pixels. The actual bar width used is the smaller of this style and the <code>barWidthRatio</code> property. Clustered bars divide this space proportionally among the bars in each cluster.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "minField",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies the field of the data provider that determines the bottom of each bar. If <code>null</code>, the columns are based at the range minimum (or maximum, if the field value is negative).",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "offset",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies how far to offset the center of the bars from the center of the available space, relative the category width. The range of values is a percentage in the range <code>-100</code> to <code>100</code>. Set to <code>0</code> to center the bars in the space. Set to <code>-50</code> to center the column at the beginning of the available space. You typically do not set this property directly.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Class",
        "qname": "renderDataType",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The subtype of ChartRenderData used by this series to store all data necessary to render. Subclasses can override and return a more specialized class if they need to store additional information for rendering.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.charts.chartClasses.StackedSeries",
        "qname": "stacker",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The StackedSeries associated with this BarSeries. The stacker manages the series's stacking behavior.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.charts.chartClasses.IAxis",
        "qname": "verticalAxis",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Defines the labels, tick marks, and data position for items on the y-axis. Use either the LinearAxis class or the CategoryAxis class to set the properties of the verticalAxis as a child tag in MXML or create a LinearAxis or CategoryAxis object in ActionScript.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "xField",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies the field of the data provider that determines the x-axis location of the top of each bar. If <code>null</code>, the BarSeries assumes that the data provider is an Array of numbers, and uses the numbers as values.",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "yField",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies the field of the data provider that determines the y-axis location of the bottom of each bar in the chart. If <code>null</code>, Flex arranges the bars in the order of the data in the data provider.",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.core.IFlexModuleFactory",
        "qname": "moduleFactory",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "commitProperties",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "createChildren",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "stack",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Stacks the series. Normally, a series implements the <code>updateData()</code> method to load its data out of the data provider. But a stacking series performs special operations because its values are not necessarily stored in its data provider. Its values are whatever is stored in its data provider, summed with the values that are loaded by the object it stacks on top of. <p>A custom stacking series should implement the <code>stack()</code> method by loading its data out of its data provider, adding it to the base values stored in the dictionary to get the real values it should render with, and replacing the values in the dictionary with its new, summed values.</p>  on top of. The keys in the dictionary are the x values, and the values are the y values.  is of the same type, you can use access to this property to avoid duplicate effort when rendering.",
        "tags": [
        {  "tagName": "param",
               "values": ["stackedYValueDictionary Contains the base values that the series should stack", "previousElement The previous element in the stack. If, for example, the element"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["The maximum value in the newly stacked series."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Number",
          "params": [{ "name": "stackedYValueDictionary", "type": "Object"},
        { "name": "previousElement", "type": "mx.charts.chartClasses.IStackable"}]}
      ,
      { "type": "method",
        "qname": "stackAll",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Stacks the series. Normally, a series implements the <code>updateData()</code> method to load its data out of the data provider. But a stacking series performs special operations because its values are not necessarily stored in its data provider. Its values are whatever is stored in its data provider, summed with the values that are loaded by the object it stacks on top of. <p>A custom stacking series should implement the <code>stackAll()</code> method by loading its data out of its data provider, adding it to the base values stored in the dictionary to get the real values it should render with, and replacing the values in the dictionary with its new, summed values.</p>  on top of. The keys in the dictionary are the y values, and the values are the positive x values.  on top of. The keys in the dictionary are the y values, and the values are the negative x values.  is of the same type, you can use access to this property to avoid duplicate effort when rendering.",
        "tags": [
        {  "tagName": "param",
               "values": ["stackedPosYValueDictionary Contains the base values that the series should stack", "stackedNegYValueDictionary Contains the base values that the series should stack", "previousElement The previous element in the stack. If, for example, the element"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["An object representing the maximum and minimum values in the newly stacked series."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "stackedPosYValueDictionary", "type": "Object"},
        { "name": "stackedNegYValueDictionary", "type": "Object"},
        { "name": "previousElement", "type": "mx.charts.chartClasses.IStackable2"}]}
      ,
      { "type": "method",
        "qname": "invalidateData",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "invalid", "type": "Boolean"}]}
      ,
      { "type": "method",
        "qname": "invalidateMapping",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "invalid", "type": "Boolean"}]}
      ,
      { "type": "accessor",
        "access": "write-only",
        "return": "Object",
        "qname": "stackTotals",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The stack totals for the series.",
        "tags": [
        {  "tagName": "param",
               "values": ["totals The totals to set."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "applyItemRendererProperties",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Customizes the item renderer instances that are used to represent the chart. This method is called automatically whenever a new item renderer is needed while the chart is being rendered. You can override this method to add your own customization as necessary.",
        "tags": [
        {  "tagName": "param",
               "values": ["instance The new item renderer instance that is being created.", "cache The InstanceCache that is being used to manage the item renderer instances."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "instance", "type": "mx.core.UIComponent"},
        { "name": "cache", "type": "mx.charts.chartClasses.InstanceCache"}]}
      ]
  ,
  "events": [
  ]
  }
