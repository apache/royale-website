{ "type": "class",
  "qname": "mx.charts.Legend",
  "baseClassname": "mx.core.UIComponent"
  ,
    "description": "The Legend control adds a legend to your charts, where the legend displays the label for each data series in the chart and a key showing the chart element for the series.  <p>You can initialize a Legend control by binding a chart control identifier to the Legend control's <code>dataProvider</code> property, or you can define an Array of LegendItem objects.</p>   <p>The <code>&lt;mx:Legend&gt;</code> tag inherits all the properties of its parent classes and adds the following properties:</p>  <pre>\\n &lt;mx:Legend\\n <strong>Properties</strong>\\n autoLayout=&quot;true|false&quot;\\n clipContent=&quot;true|false&quot;\\n creationIndex=&quot;undefined&quot;\\n creationPolicy=&quot;auto|all|queued|none&quot;\\n dataProvider=&quot;<i>No default</i>&quot;\\n direction=&quot;horizontal|vertical&quot;\\n horizontalScrollPosition=&quot;0&quot;\\n legendItemClass=&quot;<i>No default</i>&quot;\\n verticalScrollPosition=&quot;0&quot;\\n \\n <strong>Styles</strong>\\n backgroundAlpha=&quot;1.0&quot;\\n backgroundAttachment=&quot;scroll&quot;\\n backgroundColor=&quot;undefined&quot;\\n backgroundDisabledColor=&quot;undefined&quot;\\n backgroundImage=&quot;undefined&quot;\\n backgroundSize=&quot;auto&quot;\\n barColor=&quot;undefined&quot;\\n borderColor=&quot;0xAAB3B3&quot;\\n borderSides=&quot;left top right bottom&quot;\\n borderSkin=&quot;mx.skins.halo.HaloBorder&quot;\\n borderStyle=&quot;inset|none|solid|outset&quot;\\n borderThickness=&quot;1&quot;\\n color=&quot;0x0B333C&quot;\\n cornerRadius=&quot;0&quot;\\n disabledColor=&quot;0xAAB3B3&quot;\\n disbledOverlayAlpha=&quot;undefined&quot;\\n dropShadowColor=&quot;0x000000&quot;\\n dropShadowEnabled=&quot;false&quot;\\n fontAntiAliasType=&quot;advanced&quot;\\n fontfamily=&quot;Verdana&quot;\\n fontGridFitType=&quot;pixel&quot;\\n fontSharpness=&quot;0&quot;&quot;\\n fontSize=&quot;10&quot;\\n fontStyle=&quot;normal&quot;\\n fontThickness=&quot;0&quot;\\n fontWeight=&quot;normal&quot;\\n horizontalAlign=&quot;left|center|right&quot;\\n horizontalGap=&quot;<i>8</i>&quot;\\n labelPlacement=&quot;right|left|top|bottom&quot;\\n markerHeight=&quot;15&quot;\\n markerWidth=&quot;10&quot;\\n paddingBottom=&quot;0&quot;\\n paddingLeft=&quot;0&quot;\\n paddingRight=&quot;0&quot;\\n paddingTop=&quot;0&quot;\\n shadowDirection=&quot;center&quot;\\n shadowDistance=&quot;2&quot;\\n stroke=&quot;<i>IStroke; no default</i>&quot;\\n textAlign=&quot;left&quot;\\n textDecoration=&quot;none|underline&quot;\\n textIndent=&quot;0&quot;\\n verticalAlign=&quot;top|middle|bottom&quot;\\n verticalGap=&quot;<i>6</i>&quot;\\n \\n <strong>Events</strong>\\n childAdd=&quot;<i>No default</i>&quot;\\n childIndexChange=&quot;<i>No default</i>&quot;\\n childRemove=&quot;<i>No default</i>&quot;\\n dataChange=&quot;<i>No default</i>&quot;\\n itemClick=&quot;<i>Event; no default</i>&quot;\\n itemMouseDown=&quot;<i>Event; no default</i>&quot;\\n itemMouseOut=&quot;<i>Event; no default</i>&quot;\\n itemMouseOver=&quot;<i>Event; no default</i>&quot;\\n itemMouseUp=&quot;<i>Event; no default</i>&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/PlotChartExample.mxml"]},
      {  "tagName": "see",
         "values": ["mx.charts.LegendItem"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "getLayoutChildAt",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "return": "mx.core.IUIComponent",
          "params": [{ "name": "index", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "mx.charts.Legend",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "field",
        "qname": "actualCreationPolicy",
        "return": "String",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The creation policy of this container.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "creatingContentPane",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Containers use an internal content pane to control scrolling. The <code>creatingContentPane</code> is <code>true</code> while the container is creating the content pane so that some events can be ignored or blocked.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "direction",
        "namespace": "public",
        "bindable": ["directionChanged"],
        "details": [],
        "deprecated": {},
          "description": "Determines how children are placed in the container. Possible MXML values  are <code>&quot;horizontal&quot;</code> and <code>&quot;vertical&quot;</code>. In ActionScript, you can set the direction using the values TileDirection.HORIZONTAL or TileDirection.VERTICAL. The default value is <code>&quot;horizontal&quot;</code>. (If the container is a Legend container, which is a subclass of Tile, the default value is <code>&quot;vertical&quot;</code>.)  <p>The first child is always placed at the upper-left of the Tile container. If the <code>direction</code> is <code>&quot;horizontal&quot;</code>, the children are placed left-to-right in the topmost row, and then left-to-right in the second row, and so on. If the value is <code>&quot;vertical&quot;</code>, the children are placed top-to-bottom in the leftmost column, and then top-to-bottom in the second column, and so on.</p>",
        "tags": [
        {  "tagName": "default",
               "values": [""horizontal""]},
            {  "tagName": "see",
               "values": ["TileDirection"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "tileHeight",
        "namespace": "public",
        "bindable": ["resize"],
        "details": [],
        "deprecated": {},
          "description": "Height of each tile cell, in pixels. If this property is <code>NaN</code>, the default, the height of each cell is determined by the height of the tallest child. If you set this property, the specified value overrides this calculation.",
        "tags": [
        {  "tagName": "default",
               "values": ["NaN"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "tileWidth",
        "namespace": "public",
        "bindable": ["resize"],
        "details": [],
        "deprecated": {},
          "description": "Width of each tile cell, in pixels. If this property is <code>NaN</code>, the defualt, the width of each cell is determined by the width of the widest child. If you set this property, the specified value overrides this calculation.",
        "tags": [
        {  "tagName": "default",
               "values": ["NaN"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "baselinePosition",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "The baselinePosition of a Container is calculated as if there was a UITextField using the Container's styles whose top is at viewMetrics.top.",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "contentMouseX",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "copy",
               "values": ["mx.core.UIComponent#contentMouseX"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "contentMouseY",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "copy",
               "values": ["mx.core.UIComponent#contentMouseY"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "doubleClickEnabled",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Specifies whether the UIComponent object receives <code>doubleClick</code> events. The default value is <code>false</code>, which means that the UIComponent object does not receive <code>doubleClick</code> events.  <p>The <code>mouseEnabled</code> property must also be set to <code>true</code>, its default value, for the object to receive <code>doubleClick</code> events.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false", "false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3", "Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "enabled",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1"]},
            {  "tagName": "copy",
               "values": ["mx.core.IUIComponent#enabled", "mx.core.IUIComponent#enabled", "mx.core.IUIComponent#enabled", "mx.core.IUIComponent#enabled", "mx.core.IUIComponent#enabled", "mx.core.IUIComponent#enabled", "mx.core.IUIComponent#enabled", "mx.core.IUIComponent#enabled"]},
            {  "tagName": "productversion",
               "values": ["Flex 3", "Flex 3", "Flex 3", "Flex 3", "Flex 3", "Flex 3", "Flex 3", "Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0", "3.0", "3.0", "3.0", "3.0", "3.0", "3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "numChildren",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Number of child components in this container.  <p>The number of children is initially equal to the number of children declared in MXML. At runtime, new children may be added by calling <code>addChild()</code> or <code>addChildAt()</code>, and existing children may be removed by calling <code>removeChild()</code>, <code>removeChildAt()</code>, or <code>removeAllChildren()</code>.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "dataProvider",
        "namespace": "public",
        "bindable": ["collectionChange"],
        "details": [],
        "deprecated": {},
          "description": "Set of data to be used in the Legend.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "legendItemClass",
        "return": "Class",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The class used to instantiate LegendItem objects. When a legend's content is derived from the chart or data, it instantiates one instance of <code>legendItemClass</code> for each item described by the <code>dataProvider</code>. If you want custom behavior in your legend items, you can assign a subclass of LegendItem to this property to have the Legend create instances of their derived type instead.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]},
            {  "tagName": "royalesuppresspublicvarwarning",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "autoLayout",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If <code>true</code>, measurement and layout are done when the position or size of a child is changed. If <code>false</code>, measurement and layout are done only once, when children are added to or removed from the container.  <p>When using the Move effect, the layout around the component that is moving does not readjust to fit that the Move effect animates. Setting a container's <code>autoLayout</code> property to <code>true</code> has no effect on this behavior.</p>  <p>The Zoom effect does not work when the <code>autoLayout</code> property is <code>false</code>.</p>  <p>The <code>autoLayout</code> property does not apply to Accordion or ViewStack containers.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "mx.core.EdgeMetrics",
        "qname": "borderMetrics",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns an EdgeMetrics object that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>. The value of each property is equal to the thickness of one side of the border, expressed in pixels.  <p>Unlike <code>viewMetrics</code>, this property is not overridden by subclasses of Container.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "childDescriptors",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Array of UIComponentDescriptor objects produced by the MXML compiler.  <p>Each UIComponentDescriptor object contains the information specified in one child MXML tag of the container's MXML tag. The order of the UIComponentDescriptor objects in the Array is the same as the order of the child tags. During initialization, the child descriptors are used to create the container's child UIComponent objects and its Repeater objects, and to give them the initial property values, event handlers, effects, and so on, that were specified in MXML.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.core.UIComponentDescriptor"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "childRepeaters",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "clipContent",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Whether to apply a clip mask if the positions and/or sizes of this container's children extend outside the borders of this container. If <code>false</code>, the children of this container remain visible when they are moved or sized outside the borders of this container. If <code>true</code>, the children of this container are clipped.  <p>If <code>clipContent</code> is <code>false</code>, then scrolling is disabled for this container and scrollbars will not appear. If <code>clipContent</code> is true, then scrollbars will usually appear when the container's children extend outside the border of the container. For additional control over the appearance of scrollbars, see <code>horizontalScrollPolicy</code> and <code>verticalScrollPolicy</code>.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "createdComponents",
        "namespace": "mx_internal",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "creationIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {
      }
        ,
            "description": "Specifies the order to instantiate and draw the children of the container.  <p>This property can only be used when the <code>creationPolicy</code> property is set to <code>ContainerCreationPolicy.QUEUED</code>. Otherwise, it is ignored.</p>",
          "tags": [
          {  "tagName": "default",
                 "values": ["-1"]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "accessor",
          "access": "read-write",
          "return": "Object",
          "qname": "data",
          "namespace": "public",
          "bindable": ["dataChange"],
          "details": [],
          "deprecated": {},
            "description": "The <code>data</code> property lets you pass a value to the component when you use it in an item renderer or item editor. You typically use data binding to bind a field of the <code>data</code> property to a property of this component.  <p>You do not set this property in MXML.</p>",
          "tags": [
          {  "tagName": "default",
                 "values": ["null"]},
              {  "tagName": "see",
                 "values": ["mx.core.IDataRenderer"]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "accessor",
          "access": "read-only",
          "return": "int",
          "qname": "firstChildIndex",
          "namespace": "mx_internal",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "The index of the first content child, when dealing with both content and non-content children.",
          "tags": [
          {  "tagName": "private",
                 "values": []}  ]},
        { "type": "accessor",
          "access": "read-write",
          "return": "Number",
          "qname": "horizontalScrollPosition",
          "namespace": "public",
          "bindable": ["viewChanged","scroll"],
          "details": [],
          "deprecated": {},
            "description": "The current position of the horizontal scroll bar. This is equal to the distance in pixels between the left edge of the scrollable surface and the leftmost piece of the surface that is currently visible.",
          "tags": [
          {  "tagName": "default",
                 "values": ["0"]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "accessor",
          "access": "read-write",
          "return": "String",
          "qname": "horizontalScrollPolicy",
          "namespace": "public",
          "bindable": ["horizontalScrollPolicyChanged"],
          "details": [],
          "deprecated": {},
            "description": "Specifies whether the horizontal scroll bar is always present, always absent, or automatically added when needed. ActionScript values can be <code>ScrollPolicy.ON</code>, <code>ScrollPolicy.OFF</code>, and <code>ScrollPolicy.AUTO</code>. MXML values can be <code>&quot;on&quot;</code>, <code>&quot;off&quot;</code>, and <code>&quot;auto&quot;</code>.  <p>Setting this property to <code>ScrollPolicy.OFF</code> also prevents the <code>horizontalScrollPosition</code> property from having an effect.</p>  <p>Note: This property does not apply to the ControlBar container.</p>  <p>If the <code>horizontalScrollPolicy</code> is <code>ScrollPolicy.AUTO</code>, the horizontal scroll bar appears when all of the following are true:</p> <ul> <li>One of the container's children extends beyond the left edge or right edge of the container.</li> <li>The <code>clipContent</code> property is <code>true</code>.</li> <li>The width and height of the container are large enough to reasonably accommodate a scroll bar.</li> </ul>",
          "tags": [
          {  "tagName": "default",
                 "values": ["ScrollPolicy.AUTO"]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "accessor",
          "access": "read-write",
          "return": "Class",
          "qname": "icon",
          "namespace": "public",
          "bindable": ["iconChanged"],
          "details": [],
          "deprecated": {},
            "description": "The Class of the icon displayed by some navigator containers to represent this Container.  <p>For example, if this Container is a child of a TabNavigator, this icon appears in the corresponding tab. If this Container is a child of an Accordion, this icon appears in the corresponding header.</p>  <p>To embed the icon in the SWF file, use the &#64;Embed() MXML compiler directive:</p>  <pre>\\n icon=&quot;&#64;Embed('filepath')&quot;\\n </pre>  <p>The image can be a JPEG, GIF, PNG, SVG, or SWF file.</p>",
          "tags": [
          {  "tagName": "default",
                 "values": ["null"]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "accessor",
          "access": "read-write",
          "return": "String",
          "qname": "label",
          "namespace": "public",
          "bindable": ["labelChanged"],
          "details": [],
          "deprecated": {},
            "description": "The text displayed by some navigator containers to represent this Container.  <p>For example, if this Container is a child of a TabNavigator, this string appears in the corresponding tab. If this Container is a child of an Accordion, this string appears in the corresponding header.</p>",
          "tags": [
          {  "tagName": "default",
                 "values": [""""]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "accessor",
          "access": "read-only",
          "return": "Number",
          "qname": "maxHorizontalScrollPosition",
          "namespace": "public",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "The largest possible value for the <code>horizontalScrollPosition</code> property. Defaults to 0 if the horizontal scrollbar is not present.",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "accessor",
          "access": "read-only",
          "return": "Number",
          "qname": "maxVerticalScrollPosition",
          "namespace": "public",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "The largest possible value for the <code>verticalScrollPosition</code> property. Defaults to 0 if the vertical scrollbar is not present.",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "accessor",
          "access": "read-write",
          "return": "int",
          "qname": "numChildrenCreated",
          "namespace": "mx_internal",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "",
          "tags": [
          {  "tagName": "private",
                 "values": []}  ]},
        { "type": "accessor",
          "access": "read-only",
          "return": "int",
          "qname": "numRepeaters",
          "namespace": "mx_internal",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "The number of Repeaters in this Container.  <p>This number includes Repeaters that are immediate children of this container and Repeaters that are nested inside other Repeaters. Consider the following example:</p>  <pre>\\n &lt;mx:HBox&gt;\\n &lt;mx:Repeater dataProvider=&quot;[1, 2]&quot;&gt;\\n &lt;mx:Repeater dataProvider=&quot;...&quot;&gt;\\n &lt;mx:Button/&gt;\\n &lt;/mx:Repeater&gt;\\n &lt;/mx:Repeater&gt;\\n &lt;mx:HBox&gt;\\n </pre>  <p>In this example, the <code>numRepeaters</code> property for the HBox would be set equal to 3 -- one outer Repeater and two inner repeaters.</p>  <p>The <code>numRepeaters</code> property does not include Repeaters that are nested inside other containers. Consider this example:</p>  <pre>\\n &lt;mx:HBox&gt;\\n &lt;mx:Repeater dataProvider=&quot;[1, 2]&quot;&gt;\\n &lt;mx:VBox&gt;\\n &lt;mx:Repeater dataProvider=&quot;...&quot;&gt;\\n &lt;mx:Button/&gt;\\n &lt;/mx:Repeater&gt;\\n &lt;/mx:VBox&gt;\\n &lt;/mx:Repeater&gt;\\n &lt;mx:HBox&gt;\\n </pre>  <p>In this example, the <code>numRepeaters</code> property for the outer HBox would be set equal to 1 -- just the outer repeater. The two inner VBox containers would also have a <code>numRepeaters</code> property equal to 1 -- one Repeater per VBox.</p>",
          "tags": [
          {  "tagName": "private",
                 "values": [""]}  ]},
        { "type": "accessor",
          "access": "read-only",
          "return": "mx.core.IChildList",
          "qname": "rawChildren",
          "namespace": "public",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "A container typically contains child components, which can be enumerated using the <code>Container.getChildAt()</code> method and <code>Container.numChildren</code> property.  In addition, the container may contain style elements and skins, such as the border and background. Flash Player and AIR do not draw any distinction between child components and skins.  They are all accessible using the player's <code>getChildAt()</code> method  and <code>numChildren</code> property. However, the Container class overrides the <code>getChildAt()</code> method and <code>numChildren</code> property (and several other methods) to create the illusion that the container's children are the only child components.  <p>If you need to access all of the children of the container (both the content children and the skins), then use the methods and properties on the <code>rawChildren</code> property instead of the regular Container methods. For example, use the <code>Container.rawChildren.getChildAt())</code> method. However, if a container creates a ContentPane Sprite object for its children, the <code>rawChildren</code> property value only counts the ContentPane, not the container's children. It is not always possible to determine when a container will have a ContentPane.</p>  <p><b>Note:</b>If you call the <code>addChild</code> or <code>addChildAt</code> method of the <code>rawChildren</code> object, set <code>tabFocusEnabled = false</code> on the component that you have added. Doing so prevents users from tabbing to the visual-only component that you have added.</p>",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "accessor",
          "access": "read-only",
          "return": "Boolean",
          "qname": "usePadding",
          "namespace": "mx_internal",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "",
          "tags": [
          {  "tagName": "private",
                 "values": []}  ]},
        { "type": "accessor",
          "access": "read-write",
          "return": "Number",
          "qname": "verticalScrollPosition",
          "namespace": "public",
          "bindable": ["viewChanged","scroll"],
          "details": [],
          "deprecated": {},
            "description": "The current position of the vertical scroll bar. This is equal to the distance in pixels between the top edge of the scrollable surface and the topmost piece of the surface that is currently visible.",
          "tags": [
          {  "tagName": "default",
                 "values": ["0"]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "accessor",
          "access": "read-write",
          "return": "String",
          "qname": "verticalScrollPolicy",
          "namespace": "public",
          "bindable": ["verticalScrollPolicyChanged"],
          "details": [],
          "deprecated": {},
            "description": "Specifies whether the vertical scroll bar is always present, always absent, or automatically added when needed. Possible values are <code>ScrollPolicy.ON</code>, <code>ScrollPolicy.OFF</code>, and <code>ScrollPolicy.AUTO</code>. MXML values can be <code>&quot;on&quot;</code>, <code>&quot;off&quot;</code>, and <code>&quot;auto&quot;</code>.  <p>Setting this property to <code>ScrollPolicy.OFF</code> also prevents the <code>verticalScrollPosition</code> property from having an effect.</p>  <p>Note: This property does not apply to the ControlBar container.</p>  <p>If the <code>verticalScrollPolicy</code> is <code>ScrollPolicy.AUTO</code>, the vertical scroll bar appears when all of the following are true:</p> <ul> <li>One of the container's children extends beyond the top edge or bottom edge of the container.</li> <li>The <code>clipContent</code> property is <code>true</code>.</li> <li>The width and height of the container are large enough to reasonably accommodate a scroll bar.</li> </ul>",
          "tags": [
          {  "tagName": "default",
                 "values": ["ScrollPolicy.AUTO"]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "accessor",
          "access": "read-only",
          "return": "mx.core.EdgeMetrics",
          "qname": "viewMetrics",
          "namespace": "public",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "Returns an object that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>. The value of each property equals the thickness of the chrome (visual elements) around the edge of the container.  <p>The chrome includes the border thickness. If the <code>horizontalScrollPolicy</code> or <code>verticalScrollPolicy</code> property value is <code>ScrollPolicy.ON</code>, the chrome also includes the thickness of the corresponding scroll bar. If a scroll policy is <code>ScrollPolicy.AUTO</code>, the chrome measurement does not include the scroll bar thickness, even if a scroll bar is displayed.</p>  <p>Subclasses of Container should override this method, so that they include other chrome to be taken into account when positioning the Container's children. For example, the <code>viewMetrics</code> property for the Panel class should return an object whose <code>top</code> property includes the thickness of the Panel container's title bar.</p>",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "accessor",
          "access": "read-only",
          "return": "mx.core.EdgeMetrics",
          "qname": "viewMetricsAndPadding",
          "namespace": "public",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "Returns an object that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>. The value of each property is equal to the thickness of the chrome (visual elements) around the edge of the container plus the thickness of the object's margins.  <p>The chrome includes the border thickness. If the <code>horizontalScrollPolicy</code> or <code>verticalScrollPolicy</code> property value is <code>ScrollPolicy.ON</code>, the chrome also includes the thickness of the corresponding scroll bar. If a scroll policy is <code>ScrollPolicy.AUTO</code>, the chrome measurement does not include the scroll bar thickness, even if a scroll bar is displayed.</p>",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "type": "method",
          "qname": "addChild",
          "namespace": "public",
          "bindable": [],
          "details": ["override"],
          "deprecated": {},
            "description": "Adds a child DisplayObject to this Container. The child is added after other existing children, so that the first child added has index 0, the next has index 1, an so on.  <p><b>Note: </b>While the <code>child</code> argument to the method is specified as of type DisplayObject, the argument must implement the IUIComponent interface to be added as a child of a container. All Flex components implement this interface.</p>  <p>Children are layered from back to front. In other words, if children overlap, the one with index 0 is farthest to the back, and the one with index <code>numChildren - 1</code> is frontmost. This means the newly added children are layered in front of existing children.</p>  It must implement the IUIComponent interface.  You typically cast the return value to UIComponent, or to the type of the added component.",
          "tags": [
          {  "tagName": "see",
                 "values": ["mx.core.IUIComponent"]},
              {  "tagName": "param",
                 "values": ["child The DisplayObject to add as a child of this Container."]},
              {  "tagName": "tiptext",
                 "values": ["Adds a child object to this container."]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "return",
                 "values": ["The added child as an object of type DisplayObject."]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "mx.core.IUIComponent",
            "params": [{ "name": "child", "type": "mx.core.IUIComponent"}]}
        ,
        { "type": "method",
          "qname": "addChildAt",
          "namespace": "public",
          "bindable": [],
          "details": ["override"],
          "deprecated": {},
            "description": "Adds a child DisplayObject to this Container. The child is added at the index specified.  <p><b>Note: </b>While the <code>child</code> argument to the method is specified as of type DisplayObject, the argument must implement the IUIComponent interface to be added as a child of a container. All Flex components implement this interface.</p>  <p>Children are layered from back to front. In other words, if children overlap, the one with index 0 is farthest to the back, and the one with index <code>numChildren - 1</code> is frontmost. This means the newly added children are layered in front of existing children.</p>  <p>When you add a new child at an index that is already occupied by an old child, it doesn't replace the old child; instead the old child and the ones after it &quot;slide over&quot; and have their index incremented by one. For example, suppose a Container contains the children (A, B, C) and you add D at index 1. Then the container will contain (A, D, B, C). If you want to replace an old child, you must first remove it before adding the new one.</p>  It must implement the IUIComponent interface.   You typically cast the return value to UIComponent, or to the type of the added component.",
          "tags": [
          {  "tagName": "see",
                 "values": ["mx.core.IUIComponent"]},
              {  "tagName": "param",
                 "values": ["child The DisplayObject to add as a child of this Container.", "index The index to add the child at."]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "return",
                 "values": ["The added child as an object of type DisplayObject."]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "mx.core.IUIComponent",
            "params": [{ "name": "child", "type": "mx.core.IUIComponent"},
          { "name": "index", "type": "int"}]}
        ,
        { "type": "method",
          "qname": "removeChild",
          "namespace": "public",
          "bindable": [],
          "details": ["override"],
          "deprecated": {},
            "description": "Removes a child DisplayObject from the child list of this Container. The removed child will have its <code>parent</code> property set to null. The child will still exist unless explicitly destroyed. If you add it to another container, it will retain its last known state.   You typically cast the return value to UIComponent, or to the type of the removed component.",
          "tags": [
          {  "tagName": "param",
                 "values": ["child The DisplayObject to remove."]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "return",
                 "values": ["The removed child as an object of type DisplayObject."]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "mx.core.IUIComponent",
            "params": [{ "name": "child", "type": "mx.core.IUIComponent"}]}
        ,
        { "type": "method",
          "qname": "removeChildAt",
          "namespace": "public",
          "bindable": [],
          "details": ["override"],
          "deprecated": {},
            "description": "Removes a child DisplayObject from the child list of this Container at the specified index. The removed child will have its <code>parent</code> property set to null. The child will still exist unless explicitly destroyed. If you add it to another container, it will retain its last known state.   You typically cast the return value to UIComponent, or to the type of the removed component.",
          "tags": [
          {  "tagName": "param",
                 "values": ["index The child index of the DisplayObject to remove."]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "return",
                 "values": ["The removed child as an object of type DisplayObject."]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "mx.core.IUIComponent",
            "params": [{ "name": "index", "type": "int"}]}
        ,
        { "type": "method",
          "qname": "getChildAt",
          "namespace": "public",
          "bindable": [],
          "details": ["override"],
          "deprecated": {},
            "description": "Gets the <i>n</i>th child component object.  <p>The children returned from this method include children that are declared in MXML and children that are added using the <code>addChild()</code> or <code>addChildAt()</code> method.</p>   You typically cast the return value to UIComponent, or to the type of a specific Flex control, such as ComboBox or TextArea.",
          "tags": [
          {  "tagName": "param",
                 "values": ["childIndex Number from 0 to (numChildren - 1)."]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "return",
                 "values": ["Reference to the child as an object of type DisplayObject."]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "mx.core.IUIComponent",
            "params": [{ "name": "index", "type": "int"}]}
        ,
        { "type": "method",
          "qname": "getChildByName",
          "namespace": "public",
          "bindable": [],
          "details": ["override"],
          "deprecated": {},
            "description": "Returns the child whose <code>name</code> property is the specified String.   You typically cast the return value to UIComponent, or to the type of a specific Flex control, such as ComboBox or TextArea. Throws a run-time error if the child of the specified name does not exist.",
          "tags": [
          {  "tagName": "param",
                 "values": ["name The identifier of the child."]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "return",
                 "values": ["The DisplayObject representing the child as an object of type DisplayObject."]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "mx.core.IUIComponent",
            "params": [{ "name": "name", "type": "String"}]}
        ,
        { "type": "method",
          "qname": "getChildIndex",
          "namespace": "public",
          "bindable": [],
          "details": ["override"],
          "deprecated": {},
            "description": "Gets the zero-based index of a specific child.  <p>The first child of the container (i.e.: the first child tag that appears in the MXML declaration) has an index of 0, the second child has an index of 1, and so on. The indexes of a container's children determine the order in which they get laid out. For example, in a VBox the child with index 0 is at the top, the child with index 1 is below it, etc.</p>  <p>If you add a child by calling the <code>addChild()</code> method, the new child's index is equal to the largest index among existing children plus one. You can insert a child at a specified index by using the <code>addChildAt()</code> method; in that case the indices of the child previously at that index, and the children at higher indices, all have their index increased by 1 so that all indices fall in the range from 0 to <code>(numChildren - 1)</code>.</p>  <p>If you remove a child by calling <code>removeChild()</code> or <code>removeChildAt()</code> method, then the indices of the remaining children are adjusted so that all indices fall in the range from 0 to <code>(numChildren - 1)</code>.</p>  <p>If <code>myView.getChildIndex(myChild)</code> returns 5, then <code>myView.getChildAt(5)</code> returns myChild.</p>  <p>The index of a child may be changed by calling the <code>setChildIndex()</code> method.</p>",
          "tags": [
          {  "tagName": "param",
                 "values": ["child Reference to child whose index to get."]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "return",
                 "values": ["Number between 0 and (numChildren - 1)."]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "int",
            "params": [{ "name": "child", "type": "mx.core.IUIComponent"}]}
        ,
        { "type": "method",
          "qname": "setChildIndex",
          "namespace": "public",
          "bindable": [],
          "details": ["override"],
          "deprecated": {},
            "description": "Sets the index of a particular child. See the <code>getChildIndex()</code> method for a description of the child's index.   Must be an integer between 0 and (numChildren - 1).",
          "tags": [
          {  "tagName": "param",
                 "values": ["child Reference to child whose index to set.", "newIndex Number that indicates the new index."]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "void",
            "params": [{ "name": "child", "type": "mx.core.IUIComponent"},
          { "name": "newIndex", "type": "int"}]}
        ,
        { "type": "method",
          "qname": "setElementIndex",
          "namespace": "public",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 10", "AIR 1.5"]},
              {  "tagName": "copy",
                 "values": ["mx.core.IVisualElementContainer#setElementIndex()"]},
              {  "tagName": "productversion",
                 "values": ["Flex 4"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "void",
            "params": [{ "name": "element", "type": "mx.core.IVisualElement"},
          { "name": "index", "type": "int"}]}
        ,
        { "type": "method",
          "qname": "swapElements",
          "namespace": "public",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 10", "AIR 1.5"]},
              {  "tagName": "copy",
                 "values": ["mx.core.IVisualElementContainer#swapElements()"]},
              {  "tagName": "productversion",
                 "values": ["Flex 4"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "void",
            "params": [{ "name": "element1", "type": "mx.core.IVisualElement"},
          { "name": "element2", "type": "mx.core.IVisualElement"}]}
        ,
        { "type": "method",
          "qname": "swapElementsAt",
          "namespace": "public",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 10", "AIR 1.5"]},
              {  "tagName": "copy",
                 "values": ["mx.core.IVisualElementContainer#swapElementsAt()"]},
              {  "tagName": "productversion",
                 "values": ["Flex 4"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "void",
            "params": [{ "name": "index1", "type": "int"},
          { "name": "index2", "type": "int"}]}
        ,
        { "type": "method",
          "qname": "updateDisplayList",
          "namespace": "protected",
          "bindable": [],
          "details": ["override"],
          "deprecated": {},
            "description": "Respond to size changes by setting the positions and sizes of this container's children.  <p>See the <code>UIComponent.updateDisplayList()</code> method for more information about the <code>updateDisplayList()</code> method.</p>  <p>The <code>Container.updateDisplayList()</code> method sets the position and size of the Container container's border. In every subclass of Container, the subclass's <code>updateDisplayList()</code> method should call the <code>super.updateDisplayList()</code> method, so that the border is positioned properly.</p>  in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.  in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.",
          "tags": [
          {  "tagName": "see",
                 "values": ["mx.core.UIComponent"]},
              {  "tagName": "param",
                 "values": ["unscaledWidth Specifies the width of the component, in pixels,", "unscaledHeight Specifies the height of the component, in pixels,"]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "void",
            "params": [{ "name": "unscaledWidth", "type": "Number"},
          { "name": "unscaledHeight", "type": "Number"}]}
        ,
        { "type": "method",
          "qname": "getChildren",
          "namespace": "public",
          "bindable": ["childrenChanged"],
          "details": [],
          "deprecated": {},
            "description": "Returns an Array of DisplayObject objects consisting of the content children of the container. This array does <b>not</b> include the DisplayObjects that implement the container's display elements, such as its border and the background image.  of the container.",
          "tags": [
          {  "tagName": "see",
                 "values": ["#rawChildren"]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "return",
                 "values": ["Array of DisplayObject objects consisting of the content children"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "Array",
            "params": []}
        ,
        { "type": "method",
          "qname": "removeAllChildren",
          "namespace": "public",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "Removes all children from the child list of this container.",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "void",
            "params": []}
        ,
        { "type": "method",
          "qname": "createDeferredContent",
          "namespace": "public",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "Performs the equivalent action of calling the <code>createComponentsFromDescriptors(true)</code> method for containers that implement the IDeferredContentOwner interface to support deferred instantiation.",
          "tags": [
          {  "tagName": "see",
                 "values": ["#createComponentsFromDescriptors()"]},
              {  "tagName": "playerversion",
                 "values": ["Flash 10", "AIR 1.5"]},
              {  "tagName": "productversion",
                 "values": ["Flex 4"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "void",
            "params": []}
        ,
        { "type": "method",
          "qname": "layoutChrome",
          "namespace": "protected",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "Respond to size changes by setting the positions and sizes of this container's borders. This is an advanced method that you might override when creating a subclass of Container.  <p>Flex calls the <code>layoutChrome()</code> method when the container is added to a parent container using the <code>addChild()</code> method, and when the container's <code>invalidateDisplayList()</code> method is called.</p>  <p>The <code>Container.layoutChrome()</code> method is called regardless of the value of the <code>autoLayout</code> property.</p>  <p>The <code>Container.layoutChrome()</code> method sets the position and size of the Container container's border. In every subclass of Container, the subclass's <code>layoutChrome()</code> method should call the <code>super.layoutChrome()</code> method, so that the border is positioned properly.</p>  in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.  in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.",
          "tags": [
          {  "tagName": "param",
                 "values": ["unscaledWidth Specifies the width of the component, in pixels,", "unscaledHeight Specifies the height of the component, in pixels,"]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "void",
            "params": [{ "name": "unscaledWidth", "type": "Number"},
          { "name": "unscaledHeight", "type": "Number"}]}
        ,
        { "type": "method",
          "qname": "createBorder",
          "namespace": "protected",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "Creates the container's border skin if it is needed and does not already exist.",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "void",
            "params": []}
        ,
        { "type": "method",
          "qname": "scrollChildren",
          "namespace": "protected",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "Positions the container's content area relative to the viewable area based on the horizontalScrollPosition and verticalScrollPosition properties. Content that doesn't appear in the viewable area gets clipped. This method should be overridden by subclasses that have scrollable chrome in the content area.",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "void",
            "params": []}
        ,
        { "type": "accessor",
          "access": "write-only",
          "return": "Boolean",
          "qname": "forceClipping",
          "namespace": "mx_internal",
          "bindable": [],
          "details": [],
          "deprecated": {}},
        { "type": "method",
          "qname": "executeChildBindings",
          "namespace": "public",
          "bindable": [],
          "details": [],
          "deprecated": {},
            "description": "Executes the bindings into this Container's child UIComponent objects. Flex calls this method automatically once a Container has been created.  on the immediate children of this Container. If <code>true</code>, then also execute the bindings on this container's grandchildren, great-grandchildren, and so on.",
          "tags": [
          {  "tagName": "param",
                 "values": ["recurse If <code>false</code>, then only execute the bindings"]},
              {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ],
            "return": "void",
            "params": [{ "name": "recurse", "type": "Boolean"}]}
        ]
    ,
    "events": [
    { "qname": "itemClick",
          "type": "mx.charts.events.LegendMouseEvent"
        ,
            "description": "Dispatched when the user clicks on a LegendItem in the Legend control.",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "eventType",
                 "values": ["mx.charts.events.LegendMouseEvent.ITEM_CLICK"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "qname": "itemMouseDown",
          "type": "mx.charts.events.LegendMouseEvent"
        ,
            "description": "Dispatched when the user presses the mouse button while over a LegendItem in the Legend control.",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "eventType",
                 "values": ["mx.charts.events.LegendMouseEvent.ITEM_MOUSE_DOWN"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "qname": "itemMouseOut",
          "type": "mx.charts.events.LegendMouseEvent"
        ,
            "description": "Dispatched when the user moves the mouse off of a LegendItem in the Legend.",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "eventType",
                 "values": ["mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OUT"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "qname": "itemMouseOver",
          "type": "mx.charts.events.LegendMouseEvent"
        ,
            "description": "Dispatched when the user moves the mouse over a LegendItem in the Legend control.",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "eventType",
                 "values": ["mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OVER"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "qname": "itemMouseUp",
          "type": "mx.charts.events.LegendMouseEvent"
        ,
            "description": "Dispatched when the user releases the mouse button while over a LegendItem in the Legend.",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "eventType",
                 "values": ["mx.charts.events.LegendMouseEvent.ITEM_MOUSE_UP"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "qname": "childAdd",
          "type": "mx.events.ChildExistenceChangedEvent"
        ,
            "description": "Dispatched after a child has been added to a legend.  <p>The childAdd event is dispatched when the <code>addChild()</code> or <code>addChildAt()</code> method is called. When a container is first created, the <code>addChild()</code> method is automatically called for each child component declared in the MXML file. The <code>addChildAt()</code> method is automatically called whenever a Repeater object adds or removes child objects. The application developer may also manually call these methods to add new children.</p>  <p>At the time when this event is sent, the child object has been initialized, but its width and height have not yet been calculated, and the child has not been drawn on the screen. If you want to be notified when the child has been fully initialized and rendered, then register as a listener for the child's <code>creationComplete</code> event.</p>",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "eventType",
                 "values": ["mx.events.ChildExistenceChangedEvent.CHILD_ADD"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "qname": "childIndexChange",
          "type": "mx.events.IndexChangedEvent"
        ,
            "description": "Dispatched after the index (among the legend children) of a legend child changes. This event is only dispatched for the child specified as the argument to the <code>setChildIndex()</code> method; it is not dispatched for any other child whose index changes as a side effect of the call to the <code>setChildIndex()</code> method.  <p>The child's index is changed when the <code>setChildIndex()</code> method is called.</p>",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "eventType",
                 "values": ["mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "qname": "childRemove",
          "type": "mx.events.ChildExistenceChangedEvent"
        ,
            "description": "Dispatched before a child of a legend is removed.  <p>This event is delivered when any of the following methods is called: <code>removeChild()</code>, <code>removeChildAt()</code>, or <code>removeAllChildren()</code>.</p>",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "eventType",
                 "values": ["mx.events.ChildExistenceChangedEvent.CHILD_REMOVE"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]},
        { "qname": "dataChange",
          "type": "mx.events.FlexEvent"
        ,
            "description": "Dispatched when the <code>data</code> property changes.  <p>When a legend is used as a renderer in a List or other components, the <code>data</code> property is used pass to the legend the data to display.</p>",
          "tags": [
          {  "tagName": "playerversion",
                 "values": ["Flash 9", "AIR 1.1"]},
              {  "tagName": "eventType",
                 "values": ["mx.events.FlexEvent.DATA_CHANGE"]},
              {  "tagName": "productversion",
                 "values": ["Flex 3"]},
              {  "tagName": "langversion",
                 "values": ["3.0"]}  ]}]
    }
  
  
  
  