{ "type": "class",
  "qname": "mx.globalization.LastOperationStatus",
  "baseClassname": ""
  ,
    "description": "The LastOperationStatus class enumerates constant values that represent the status of the most recent globalization service operation.  These values can be retrieved through the read-only property <code>lastOperationStatus</code> available in most globalization classes.",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 10.1", "AIR 2.0"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.8"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "field",
        "qname": "NO_ERROR",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that the last operation succeeded without any errors.  This status can be returned by all constructors, non-static methods, static methods and read/write properties.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "USING_FALLBACK_WARNING",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that a fallback value was set during the most recent operation.  This status can be returned by constructors and methods such as <code>DateTimeFormatter.setDateTimeStyles()</code>, and when retrieving properties such as <code>CurrencyFormatter.groupingPattern</code>.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "USING_DEFAULT_WARNING",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that an operating system default value was used during the most recent operation.  Class constructors can return this status.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "PARSE_ERROR",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that the parsing of a number failed.  This status can be returned by parsing methods of the formatter classes, such as <code>CurrencyFormatter.parse()</code> and <code>NumberFormatter.parseNumber()</code>. For example, if the value &quot;12abc34&quot; is passed as the parameter to the <code>CurrencyFormatter.parse()</code> method, the method returns &quot;NaN&quot; and sets the <code>lastOperationStatus</code> value to <code>LastOperationStatus.PARSE_ERROR</code>.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "UNSUPPORTED_ERROR",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that the requested operation or option is not supported.  This status can be returned by methods such as <code>DateTimeFormatter.setDateTimePattern()</code> and when retrieving properties suce as <code>Collator.ignoreCase</code>.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "ERROR_CODE_UNKNOWN",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that the return error code is not known.  Any non-static method or read/write properties can return this error when the operation is not successful and the return error code is not known.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "PATTERN_SYNTAX_ERROR",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that the pattern for formatting a number, date, or time is invalid.  This status is set when the user's operating system does not support the given pattern.  <p>For example, the following code shows the value of the <code>lastOperationStatus</code> property after an invalid &quot;xx&quot; pattern is used for date formatting:</p>  <listing version=&quot;3.0&quot;> var df:DateTimeFormatter = new DateTimeFormatter(); df.setStyle(&quot;locale&quot;,&quot;en_US&quot;); df.setDateTimePattern(&quot;xx&quot;); trace(df.lastOperationStatus); // &quot;patternSyntaxError&quot; </listing>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "MEMORY_ALLOCATION_ERROR",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that memory allocation has failed.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "ILLEGAL_ARGUMENT_ERROR",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that an argument passed to a method was illegal.  <p>For example, the following code shows that an invalid argument error status is set when <code>CurrencyFormatter.grouping</code> property is set to the invalid value &quot;3;&quot;.</p>  <listing version=&quot;3.0&quot;> var cf:CurrencyFormatter = new CurrencyFormatter(); cf.setStyle(&quot;locale&quot;,&quot;en_US&quot;); cf.groupingPattern = &quot;3;&quot;; trace(cf.lastOperationStatus); // &quot;illegalArgumentError&quot; </listing>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "BUFFER_OVERFLOW_ERROR",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that given buffer is not enough to hold the result.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "INVALID_ATTR_VALUE",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that a given attribute value is out of the expected range.  <p>The following example shows that setting the <code>NumberFormatter.negativeNumberFormat</code> property to an out-of-range value results in an invalid attribute value status.</p>  <listing version=&quot;3.0&quot;> var nf:NumberFormatter = new NumberFormatter(); nf.setStyle(&quot;locale&quot;,&quot;en_US&quot;); nf.negativeNumberFormat = 9; nf.lastOperationStatus; // &quot;invalidAttrValue&quot; </listing>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "NUMBER_OVERFLOW_ERROR",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that an operation resulted a value that exceeds a specified numeric type.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "INVALID_CHAR_FOUND",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that invalid Unicode value was found.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "TRUNCATED_CHAR_FOUND",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that a truncated Unicode character value was found.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "INDEX_OUT_OF_BOUNDS_ERROR",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that an iterator went out of range or an invalid parameter was specified for month, day, or time.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "PLATFORM_API_FAILED",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that an underlying platform API failed for an operation.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "UNEXPECTED_TOKEN",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that an unexpected token was detected in a Locale ID string.  <p>For example, the following code shows the value of the <code>lastOperationStatus</code> property after an incomplete string is used when requesting a locale ID. As a result the <code>lastOperationStatus</code> property is set to the value <code>UNEXPECTED_TOKEN</code> after a call to the <code>LocaleID.getKeysAndValues()</code> method.</p>  <listing version=&quot;3.0&quot;> var locale:flash.globalization.LocaleID = new flash.globalization.LocaleID(&quot;en-US&#64;Collation&quot;); var kav:Object = locale.getKeysAndValues(); trace(locale.lastOperationStatus); // &quot;unexpectedToken&quot; </listing>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "LOCALE_UNDEFINED_ERROR",
        "return": "String",
        "namespace": "public",
        "bindable": [],
        "details": ["static"],
        "deprecated": {},
          "description": "Indicates that <code>Locale</code> is not defined.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.1", "AIR 2.0"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.8"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
