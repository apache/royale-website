{ "type": "class",
  "qname": "mx.containers.GridRow",
  "baseClassname": "mx.containers.HBox"
  ,
    "description": "The GridRow container defines a row in a Grid container, and contains GridCell containers.  <p>GridRow containers have the following default sizing characteristics:</p> <table class=&quot;innertable&quot;> <tr> <th>Characteristic</th> <th>Description</th> </tr> <tr> <td>Height of each row and each cell</td> <td>The default or explicit height of the tallest item in the row. If a GridItem container does not have an explicit size, its default height is the default or explicit height of the child in the cell.</td> </tr> <tr> <td>Width of each column and each cell</td> <td>The default or explicit width of the widest item in the column. If a GridItem container does not have an explicit width, its default width is the default or explicit width of the child in the cell.</td> </tr> <tr> <td>Gap between rows and columns</td> <td>Determined by the horizontalGap and verticalGap properties of the Grid class. The default value for both gaps is 6 pixels.</td> </tr> <tr> <td>Default padding</td> <td>0 pixels for the top, bottom, left, and right values, for all three container classes.</td> </tr> </table>   <p>The <code>&lt;mx:GridRow&gt;</code> must be a child of the <code>&lt;mx:Grid&gt;</code> tag, and has one or more child <code>&lt;mx:GridItem&gt;</code> tags that define the grid cells.</p>  <p>The <code>&lt;mx:GridRow&gt;</code> container inherits the tag attributes of its superclass, and adds the following tag attributes:</p>  <pre>\\n &lt;mx:Grid&gt;\\n &lt;mx:GridRow\\n <strong>Styles</strong>\\n horizontalAlign=&quot;left|center|right&quot;\\n verticalAlign=&quot;top|middle|bottom&quot;\\n &gt;\\n &lt;mx:GridItem\\n <i>child components</i>\\n &lt;/mx:GridItem&gt;\\n ...\\n &lt;/mx:GridRow&gt;\\n ...\\n &lt;/mx:Grid&gt;\\n </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/GridLayoutExample.mxml"]},
      {  "tagName": "see",
         "values": ["mx.containers.Grid", "mx.containers.GridItem"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.containers.GridRow",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "method",
        "qname": "updateDisplayList",
        "namespace": "protected",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Sets the size and position of each child of the GridRow container. For more information about the Grid layout algorithm, see the <a href=&quot;Grid.html#updateDisplayList()&quot;>Grid.updateDisplayList()</a> method.  <p>You should not call this method directly. The Flex LayoutManager calls it at the appropriate time. At application startup, the Flex LayoutManager calls the <code>updateDisplayList()</code> method on every component, starting with the root and working downward.</p>  <p>This is an advanced method for use in subclassing. If you override this method, your implementation should call the <code>super.updateDisplayList()</code> method and call the <code>move()</code> and <code>setActualSize()</code> methods on each of the children. For the purposes of performing layout, you should get the size of this container from the <code>unscaledWidth</code> and <code>unscaledHeight</code> properties, not the <code>width</code> and <code>height</code> properties. The <code>width</code> and <code>height</code> properties do not take into account the value of the <code>scaleX</code> and <code>scaleY</code> properties for this container.</p>  in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.  in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.",
        "tags": [
        {  "tagName": "param",
               "values": ["unscaledWidth Specifies the width of the component, in pixels,", "unscaledHeight Specifies the height of the component, in pixels,"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "unscaledWidth", "type": "Number"},
        { "name": "unscaledHeight", "type": "Number"}]}
      ]
  ,
  "events": [
  ]
  }
