{ "type": "class",
  "qname": "mx.logging.AbstractTarget",
  "baseClassname": ""
  ,
    "description": "This class provides the basic functionality required by the logging framework for a target implementation. It handles the validation of filter expressions and provides a default level property. No implementation of the <code>logEvent()</code> method is provided.",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.logging.AbstractTarget",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "filters",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "In addition to the <code>level</code> setting, filters are used to provide a psuedo-hierarchical mapping for processing only those events for a given category. <p> Each logger belongs to a category. By convention these categories map to the fully-qualified class name in which the logger is used. For example, a logger that is logging messages for the <code>mx.rpc.soap.WebService</code> class, uses &quot;mx.rpc.soap.WebService&quot; as the parameter to the <code>Log.getLogger()</code> method call. When messages are sent under this category only those targets that have a filter which matches that category receive notification of those events. Filter expressions can include a wildcard match, indicated with an asterisk. The wildcard must be the right-most character in the expression. For example: rpc~~, mx.~~, or ~~. If an invalid expression is specified, a <code>InvalidFilterError</code> is thrown. If <code>null</code> or [] is specified, the filters are set to the default of [&quot;~~&quot;]. </p> <p>For example: <pre>\\n var traceLogger:ILoggingTarget = new TraceTarget();\\n traceLogger.filters = [&quot;mx.rpc.~~&quot;, &quot;mx.messaging.~~&quot;];\\n Log.addTarget(traceLogger);\\n </pre> </p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "String",
        "qname": "id",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Provides access to the id of this target. The id is assigned at runtime by the mxml compiler if used as an mxml tag, or internally if used within a script block",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "level",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Provides access to the level this target is currently set at. Value values are: <ul> <li><code>LogEventLevel.FATAL (1000)</code> designates events that are very harmful and will eventually lead to application failure</li>  <li><code>LogEventLevel.ERROR (8)</code> designates error events that might still allow the application to continue running.</li>  <li><code>LogEventLevel.WARN (6)</code> designates events that could be harmful to the application operation</li>  <li><code>LogEventLevel.INFO (4)</code> designates informational messages that highlight the progress of the application at coarse-grained level.</li>  <li><code>LogEventLevel.DEBUG (2)</code> designates informational level messages that are fine grained and most helpful when debugging an application.</li>  <li><code>LogEventLevel.ALL (0)</code> intended to force a target to process all messages.</li> </ul>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "addLogger",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Sets up this target with the specified logger. This allows this target to receive log events from the specified logger.",
        "tags": [
        {  "tagName": "param",
               "values": ["logger The ILogger that this target should listen to."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "logger", "type": "mx.logging.ILogger"}]}
      ,
      { "type": "method",
        "qname": "removeLogger",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Stops this target from receiving events from the specified logger.",
        "tags": [
        {  "tagName": "param",
               "values": ["logger The ILogger that this target should ignore."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "logger", "type": "mx.logging.ILogger"}]}
      ,
      { "type": "method",
        "qname": "initialized",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Called after the implementing object has been created and all properties specified on the tag have been assigned.   If the object is a deep property on the document, id is null.",
        "tags": [
        {  "tagName": "param",
               "values": ["document MXML document that created this object.", "id Used by the document to refer to this object."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "document", "type": "Object"},
        { "name": "id", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "logEvent",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "This method handles a <code>LogEvent</code> from an associated logger. A target uses this method to translate the event into the appropriate format for transmission, storage, or display. This method will be called only if the event's level is in range of the target's level.  <p><b><i>NOTE: Descendants must override this method to make it useful.</i></b></p>",
        "tags": [
        {  "tagName": "param",
               "values": ["event An event from an associated logger."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.logging.LogEvent"}]}
      ]
  ,
  "events": [
  ]
  }
