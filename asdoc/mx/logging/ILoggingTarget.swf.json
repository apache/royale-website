{ "type": "interface",
  "qname": "mx.logging.ILoggingTarget",
"baseInterfaceNames": [
]
,
    "description": "All logger target implementations within the logging framework must implement this interface.",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
    "access": "read-write",
    "return": "Array",
    "qname": "filters",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "In addition to the <code>level</code> setting, filters are used to provide a psuedo-hierarchical mapping for processing only those events for a given category.  <p>Each logger belongs to a category. By convention these categories map to the fully qualified class name in which the logger is used. For example, a logger that is logging messages for the <code>mx.rpc.soap.WebService</code> class would use <code>&quot;mx.rpc.soap.WebService&quot;</code> as the parameter to the <code>Log.getLogger()</code> call. When messages are sent under this category only those targets that have a filter which matches that category will receive notification of those events. Filter expressions may include a wildcard match, indicated with an asterisk. The wildcard must be the right most character in the expression. For example: rpc~~, mx.~~, or ~~. If an invalid expression is specified a <code>InvalidFilterError</code> will be thrown. No spaces or any of the following characters are valid within a filter expression: []~$^&amp;\\/(){}&lt;&gt;+=`!#%?,:;'&quot;&#64;.</p>  <pre>\\n var traceLogger:ILoggingTarget = new TraceTarget();\\n traceLogger.filters = [ &quot;mx.rpc.~~&quot;, &quot;mx.messaging.~~&quot; ];\\n Log.addTarget(traceLogger);\\n </pre>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "example",
           "values": []},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "int",
    "qname": "level",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Provides access to the level this target is currently set at. Value values are: <ul> <li><code>LogEventLevel.FATAL</code> designates events that are very harmful and will eventually lead to application failure</li>  <li><code>LogEventLevel.ERROR</code> designates error events that might still allow the application to continue running.</li>  <li><code>LogEventLevel.WARN</code> designates events that could be harmful to the application operation</li>  <li><code>LogEventLevel.INFO</code> designates informational messages that highlight the progress of the application at coarse-grained level.</li>  <li><code>LogEventLevel.DEBUG</code> designates informational level messages that are fine grained and most helpful when debugging an application.</li>  <li><code>LogEventLevel.ALL</code> intended to force a target to process all messages.</li> </ul>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "method",
    "qname": "addLogger",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Sets up this target with the specified logger. This allows this target to receive log events from the specified logger.  <p><b>Note:</b> This method is called by the framework and should not be called by you directly.</p>",
    "tags": [
    {  "tagName": "param",
           "values": ["logger The ILogger that this target listens to."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "logger", "type": "mx.logging.ILogger"}]}
  ,
  { "type": "method",
    "qname": "removeLogger",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Stops this target from receiving events from the specified logger.  <p><b>Note:</b> This method is called by the framework and should not be called by you directly.</p>",
    "tags": [
    {  "tagName": "param",
           "values": ["logger The ILogger that this target ignores."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "logger", "type": "mx.logging.ILogger"}]}
  ]
  }
